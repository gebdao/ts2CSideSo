#include "gxdheader.h"

PLAY mPLAY;

PLAY::PLAY()
{
    int n;

    mNoAnimalGAttackFrame[0][0][0][0] = 14;
    mNoAnimalGAttackFrame[0][0][1][0] = 11;
    mNoAnimalGAttackFrame[0][0][1][1] = 36;
    mNoAnimalGAttackFrame[0][0][2][0] = 14;
    mNoAnimalGAttackFrame[0][0][2][1] = 36;
    mNoAnimalGAttackFrame[0][0][2][2] = 61;
    mNoAnimalGAttackFrame[0][1][0][0] = 11;
    mNoAnimalGAttackFrame[0][1][1][0] = 14;
    mNoAnimalGAttackFrame[0][1][1][1] = 29;
    mNoAnimalGAttackFrame[0][1][2][0] = 13;
    mNoAnimalGAttackFrame[0][1][2][1] = 38;
    mNoAnimalGAttackFrame[0][1][2][2] = 53;
    mNoAnimalGAttackFrame[0][2][0][0] = 9;
    mNoAnimalGAttackFrame[0][2][1][0] = 12;
    mNoAnimalGAttackFrame[0][2][1][1] = 30;
    mNoAnimalGAttackFrame[0][2][2][0] = 24;
    mNoAnimalGAttackFrame[0][2][2][1] = 37;
    mNoAnimalGAttackFrame[0][2][2][2] = 56;
    mNoAnimalGAttackFrame[0][3][0][0] = 13;
    mNoAnimalGAttackFrame[0][3][1][0] = 13;
    mNoAnimalGAttackFrame[0][3][1][1] = 37;
    mNoAnimalGAttackFrame[0][3][2][0] = 13;
    mNoAnimalGAttackFrame[0][3][2][1] = 37;
    mNoAnimalGAttackFrame[0][3][2][2] = 52;
    mNoAnimalGAttackFrame[1][0][0][0] = 11;
    mNoAnimalGAttackFrame[1][0][1][0] = 13;
    mNoAnimalGAttackFrame[1][0][1][1] = 30;
    mNoAnimalGAttackFrame[1][0][2][0] = 16;
    mNoAnimalGAttackFrame[1][0][2][1] = 35;
    mNoAnimalGAttackFrame[1][0][2][2] = 53;
    mNoAnimalGAttackFrame[1][1][0][0] = 17;
    mNoAnimalGAttackFrame[1][1][1][0] = 23;
    mNoAnimalGAttackFrame[1][1][1][1] = 38;
    mNoAnimalGAttackFrame[1][1][2][0] = 21;
    mNoAnimalGAttackFrame[1][1][2][1] = 29;
    mNoAnimalGAttackFrame[1][1][2][2] = 40;
    mNoAnimalGAttackFrame[1][2][0][0] = 12;
    mNoAnimalGAttackFrame[1][2][1][0] = 17;
    mNoAnimalGAttackFrame[1][2][1][1] = 28;
    mNoAnimalGAttackFrame[1][2][2][0] = 14;
    mNoAnimalGAttackFrame[1][2][2][1] = 27;
    mNoAnimalGAttackFrame[1][2][2][2] = 39;
    mNoAnimalGAttackFrame[1][3][0][0] = 10;
    mNoAnimalGAttackFrame[1][3][1][0] = 16;
    mNoAnimalGAttackFrame[1][3][1][1] = 26;
    mNoAnimalGAttackFrame[1][3][2][0] = 15;
    mNoAnimalGAttackFrame[1][3][2][1] = 24;
    mNoAnimalGAttackFrame[1][3][2][2] = 47;
    mNoAnimalGAttackFrame[2][0][0][0] = 9;
    mNoAnimalGAttackFrame[2][0][1][0] = 10;
    mNoAnimalGAttackFrame[2][0][1][1] = 33;
    mNoAnimalGAttackFrame[2][0][2][0] = 10;
    mNoAnimalGAttackFrame[2][0][2][1] = 33;
    mNoAnimalGAttackFrame[2][0][2][2] = 52;
    mNoAnimalGAttackFrame[2][1][0][0] = 17;
    mNoAnimalGAttackFrame[2][1][1][0] = 13;
    mNoAnimalGAttackFrame[2][1][1][1] = 24;
    mNoAnimalGAttackFrame[2][1][2][0] = 24;
    mNoAnimalGAttackFrame[2][1][2][1] = 38;
    mNoAnimalGAttackFrame[2][1][2][2] = 49;
    mNoAnimalGAttackFrame[2][2][0][0] = 14;
    mNoAnimalGAttackFrame[2][2][1][0] = 13;
    mNoAnimalGAttackFrame[2][2][1][1] = 33;
    mNoAnimalGAttackFrame[2][2][2][0] = 20;
    mNoAnimalGAttackFrame[2][2][2][1] = 37;
    mNoAnimalGAttackFrame[2][2][2][2] = 58;
    mNoAnimalGAttackFrame[2][3][0][0] = 13;
    mNoAnimalGAttackFrame[2][3][1][0] = 13;
    mNoAnimalGAttackFrame[2][3][1][1] = 30;
    mNoAnimalGAttackFrame[2][3][2][0] = 13;
    mNoAnimalGAttackFrame[2][3][2][1] = 31;
    mNoAnimalGAttackFrame[2][3][2][2] = 49;
    mNoAnimalGAttackSkillNum[0][0][0][0] = 1;
    mNoAnimalGAttackSkillNum[0][0][1][0] = 2;
    mNoAnimalGAttackSkillNum[0][0][1][1] = 3;
    mNoAnimalGAttackSkillNum[0][0][2][0] = 1;
    mNoAnimalGAttackSkillNum[0][0][2][1] = 2;
    mNoAnimalGAttackSkillNum[0][0][2][2] = 3;
    mNoAnimalGAttackSkillNum[0][1][0][0] = 2;
    mNoAnimalGAttackSkillNum[0][1][1][0] = 2;
    mNoAnimalGAttackSkillNum[0][1][1][1] = 3;
    mNoAnimalGAttackSkillNum[0][1][2][0] = 1;
    mNoAnimalGAttackSkillNum[0][1][2][1] = 2;
    mNoAnimalGAttackSkillNum[0][1][2][2] = 3;
    mNoAnimalGAttackSkillNum[0][2][0][0] = 3;
    mNoAnimalGAttackSkillNum[0][2][1][0] = 2;
    mNoAnimalGAttackSkillNum[0][2][1][1] = 3;
    mNoAnimalGAttackSkillNum[0][2][2][0] = 1;
    mNoAnimalGAttackSkillNum[0][2][2][1] = 2;
    mNoAnimalGAttackSkillNum[0][2][2][2] = 3;
    mNoAnimalGAttackSkillNum[0][3][0][0] = 1;
    mNoAnimalGAttackSkillNum[0][3][1][0] = 1;
    mNoAnimalGAttackSkillNum[0][3][1][1] = 2;
    mNoAnimalGAttackSkillNum[0][3][2][0] = 1;
    mNoAnimalGAttackSkillNum[0][3][2][1] = 2;
    mNoAnimalGAttackSkillNum[0][3][2][2] = 3;
    mNoAnimalGAttackSkillNum[1][0][0][0] = 1;
    mNoAnimalGAttackSkillNum[1][0][1][0] = 3;
    mNoAnimalGAttackSkillNum[1][0][1][1] = 2;
    mNoAnimalGAttackSkillNum[1][0][2][0] = 3;
    mNoAnimalGAttackSkillNum[1][0][2][1] = 1;
    mNoAnimalGAttackSkillNum[1][0][2][2] = 2;
    mNoAnimalGAttackSkillNum[1][1][0][0] = 1;
    mNoAnimalGAttackSkillNum[1][1][1][0] = 1;
    mNoAnimalGAttackSkillNum[1][1][1][1] = 2;
    mNoAnimalGAttackSkillNum[1][1][2][0] = 1;
    mNoAnimalGAttackSkillNum[1][1][2][1] = 2;
    mNoAnimalGAttackSkillNum[1][1][2][2] = 3;
    mNoAnimalGAttackSkillNum[1][2][0][0] = 1;
    mNoAnimalGAttackSkillNum[1][2][1][0] = 2;
    mNoAnimalGAttackSkillNum[1][2][1][1] = 3;
    mNoAnimalGAttackSkillNum[1][2][2][0] = 3;
    mNoAnimalGAttackSkillNum[1][2][2][1] = 2;
    mNoAnimalGAttackSkillNum[1][2][2][2] = 1;
    mNoAnimalGAttackSkillNum[1][3][0][0] = 1;
    mNoAnimalGAttackSkillNum[1][3][1][0] = 1;
    mNoAnimalGAttackSkillNum[1][3][1][1] = 3;
    mNoAnimalGAttackSkillNum[1][3][2][0] = 2;
    mNoAnimalGAttackSkillNum[1][3][2][1] = 3;
    mNoAnimalGAttackSkillNum[1][3][2][2] = 1;
    mNoAnimalGAttackSkillNum[2][0][0][0] = 1;
    mNoAnimalGAttackSkillNum[2][0][1][0] = 1;
    mNoAnimalGAttackSkillNum[2][0][1][1] = 2;
    mNoAnimalGAttackSkillNum[2][0][2][0] = 1;
    mNoAnimalGAttackSkillNum[2][0][2][1] = 2;
    mNoAnimalGAttackSkillNum[2][0][2][2] = 3;
    mNoAnimalGAttackSkillNum[2][1][0][0] = 2;
    mNoAnimalGAttackSkillNum[2][1][1][0] = 1;
    mNoAnimalGAttackSkillNum[2][1][1][1] = 2;
    mNoAnimalGAttackSkillNum[2][1][2][0] = 2;
    mNoAnimalGAttackSkillNum[2][1][2][1] = 1;
    mNoAnimalGAttackSkillNum[2][1][2][2] = 3;
    mNoAnimalGAttackSkillNum[2][2][0][0] = 3;
    mNoAnimalGAttackSkillNum[2][2][1][0] = 3;
    mNoAnimalGAttackSkillNum[2][2][1][1] = 1;
    mNoAnimalGAttackSkillNum[2][2][2][0] = 2;
    mNoAnimalGAttackSkillNum[2][2][2][1] = 3;
    mNoAnimalGAttackSkillNum[2][2][2][2] = 1;
    mNoAnimalGAttackSkillNum[2][3][0][0] = 2;
    mNoAnimalGAttackSkillNum[2][3][1][0] = 2;
    mNoAnimalGAttackSkillNum[2][3][1][1] = 1;
    mNoAnimalGAttackSkillNum[2][3][2][0] = 3;
    mNoAnimalGAttackSkillNum[2][3][2][1] = 2;
    mNoAnimalGAttackSkillNum[2][3][2][2] = 1;
    mAnimalGAttackFrame[0][0][0][0] = 16;
    mAnimalGAttackFrame[0][0][1][0] = 16;
    mAnimalGAttackFrame[0][0][1][1] = 41;
    mAnimalGAttackFrame[0][0][2][0] = 16;
    mAnimalGAttackFrame[0][0][2][1] = 41;
    mAnimalGAttackFrame[0][0][2][2] = 66;
    mAnimalGAttackFrame[0][1][0][0] = 13;
    mAnimalGAttackFrame[0][1][1][0] = 13;
    mAnimalGAttackFrame[0][1][1][1] = 38;
    mAnimalGAttackFrame[0][1][2][0] = 13;
    mAnimalGAttackFrame[0][1][2][1] = 38;
    mAnimalGAttackFrame[0][1][2][2] = 63;
    mAnimalGAttackFrame[0][2][0][0] = 15;
    mAnimalGAttackFrame[0][2][1][0] = 15;
    mAnimalGAttackFrame[0][2][1][1] = 42;
    mAnimalGAttackFrame[0][2][2][0] = 15;
    mAnimalGAttackFrame[0][2][2][1] = 42;
    mAnimalGAttackFrame[0][2][2][2] = 69;
    mAnimalGAttackFrame[0][3][0][0] = 13;
    mAnimalGAttackFrame[0][3][1][0] = 13;
    mAnimalGAttackFrame[0][3][1][1] = 36;
    mAnimalGAttackFrame[0][3][2][0] = 13;
    mAnimalGAttackFrame[0][3][2][1] = 36;
    mAnimalGAttackFrame[0][3][2][2] = 59;
    mAnimalGAttackFrame[1][0][0][0] = 13;
    mAnimalGAttackFrame[1][0][1][0] = 13;
    mAnimalGAttackFrame[1][0][1][1] = 37;
    mAnimalGAttackFrame[1][0][2][0] = 13;
    mAnimalGAttackFrame[1][0][2][1] = 37;
    mAnimalGAttackFrame[1][0][2][2] = 62;
    mAnimalGAttackFrame[1][1][0][0] = 14;
    mAnimalGAttackFrame[1][1][1][0] = 14;
    mAnimalGAttackFrame[1][1][1][1] = 40;
    mAnimalGAttackFrame[1][1][2][0] = 14;
    mAnimalGAttackFrame[1][1][2][1] = 40;
    mAnimalGAttackFrame[1][1][2][2] = 67;
    mAnimalGAttackFrame[1][2][0][0] = 13;
    mAnimalGAttackFrame[1][2][1][0] = 13;
    mAnimalGAttackFrame[1][2][1][1] = 37;
    mAnimalGAttackFrame[1][2][2][0] = 13;
    mAnimalGAttackFrame[1][2][2][1] = 37;
    mAnimalGAttackFrame[1][2][2][2] = 62;
    mAnimalGAttackFrame[1][3][0][0] = 12;
    mAnimalGAttackFrame[1][3][1][0] = 12;
    mAnimalGAttackFrame[1][3][1][1] = 34;
    mAnimalGAttackFrame[1][3][2][0] = 12;
    mAnimalGAttackFrame[1][3][2][1] = 34;
    mAnimalGAttackFrame[1][3][2][2] = 57;
    mAnimalGAttackFrame[2][0][0][0] = 14;
    mAnimalGAttackFrame[2][0][1][0] = 14;
    mAnimalGAttackFrame[2][0][1][1] = 38;
    mAnimalGAttackFrame[2][0][2][0] = 14;
    mAnimalGAttackFrame[2][0][2][1] = 38;
    mAnimalGAttackFrame[2][0][2][2] = 63;
    mAnimalGAttackFrame[2][1][0][0] = 17;
    mAnimalGAttackFrame[2][1][1][0] = 17;
    mAnimalGAttackFrame[2][1][1][1] = 41;
    mAnimalGAttackFrame[2][1][2][0] = 17;
    mAnimalGAttackFrame[2][1][2][1] = 41;
    mAnimalGAttackFrame[2][1][2][2] = 66;
    mAnimalGAttackFrame[2][2][0][0] = 20;
    mAnimalGAttackFrame[2][2][1][0] = 20;
    mAnimalGAttackFrame[2][2][1][1] = 46;
    mAnimalGAttackFrame[2][2][2][0] = 20;
    mAnimalGAttackFrame[2][2][2][1] = 46;
    mAnimalGAttackFrame[2][2][2][2] = 73;
    mAnimalGAttackFrame[2][3][0][0] = 15;
    mAnimalGAttackFrame[2][3][1][0] = 15;
    mAnimalGAttackFrame[2][3][1][1] = 37;
    mAnimalGAttackFrame[2][3][2][0] = 15;
    mAnimalGAttackFrame[2][3][2][1] = 37;
    mAnimalGAttackFrame[2][3][2][2] = 60;
    mAnimalGAttackSkillNum[0][0][0][0] = 2;
    mAnimalGAttackSkillNum[0][0][1][0] = 2;
    mAnimalGAttackSkillNum[0][0][1][1] = 2;
    mAnimalGAttackSkillNum[0][0][2][0] = 2;
    mAnimalGAttackSkillNum[0][0][2][1] = 2;
    mAnimalGAttackSkillNum[0][0][2][2] = 2;
    mAnimalGAttackSkillNum[0][1][0][0] = 2;
    mAnimalGAttackSkillNum[0][1][1][0] = 2;
    mAnimalGAttackSkillNum[0][1][1][1] = 2;
    mAnimalGAttackSkillNum[0][1][2][0] = 2;
    mAnimalGAttackSkillNum[0][1][2][1] = 2;
    mAnimalGAttackSkillNum[0][1][2][2] = 2;
    mAnimalGAttackSkillNum[0][2][0][0] = 2;
    mAnimalGAttackSkillNum[0][2][1][0] = 2;
    mAnimalGAttackSkillNum[0][2][1][1] = 2;
    mAnimalGAttackSkillNum[0][2][2][0] = 2;
    mAnimalGAttackSkillNum[0][2][2][1] = 2;
    mAnimalGAttackSkillNum[0][2][2][2] = 2;
    mAnimalGAttackSkillNum[0][3][0][0] = 2;
    mAnimalGAttackSkillNum[0][3][1][0] = 2;
    mAnimalGAttackSkillNum[0][3][1][1] = 2;
    mAnimalGAttackSkillNum[0][3][2][0] = 2;
    mAnimalGAttackSkillNum[0][3][2][1] = 2;
    mAnimalGAttackSkillNum[0][3][2][2] = 2;
    mAnimalGAttackSkillNum[1][0][0][0] = 2;
    mAnimalGAttackSkillNum[1][0][1][0] = 2;
    mAnimalGAttackSkillNum[1][0][1][1] = 2;
    mAnimalGAttackSkillNum[1][0][2][0] = 2;
    mAnimalGAttackSkillNum[1][0][2][1] = 2;
    mAnimalGAttackSkillNum[1][0][2][2] = 2;
    mAnimalGAttackSkillNum[1][1][0][0] = 2;
    mAnimalGAttackSkillNum[1][1][1][0] = 2;
    mAnimalGAttackSkillNum[1][1][1][1] = 2;
    mAnimalGAttackSkillNum[1][1][2][0] = 2;
    mAnimalGAttackSkillNum[1][1][2][1] = 2;
    mAnimalGAttackSkillNum[1][1][2][2] = 2;
    mAnimalGAttackSkillNum[1][2][0][0] = 2;
    mAnimalGAttackSkillNum[1][2][1][0] = 2;
    mAnimalGAttackSkillNum[1][2][1][1] = 2;
    mAnimalGAttackSkillNum[1][2][2][0] = 2;
    mAnimalGAttackSkillNum[1][2][2][1] = 2;
    mAnimalGAttackSkillNum[1][2][2][2] = 2;
    mAnimalGAttackSkillNum[1][3][0][0] = 2;
    mAnimalGAttackSkillNum[1][3][1][0] = 2;
    mAnimalGAttackSkillNum[1][3][1][1] = 2;
    mAnimalGAttackSkillNum[1][3][2][0] = 2;
    mAnimalGAttackSkillNum[1][3][2][1] = 2;
    mAnimalGAttackSkillNum[1][3][2][2] = 2;
    mAnimalGAttackSkillNum[2][0][0][0] = 2;
    mAnimalGAttackSkillNum[2][0][1][0] = 2;
    mAnimalGAttackSkillNum[2][0][1][1] = 2;
    mAnimalGAttackSkillNum[2][0][2][0] = 2;
    mAnimalGAttackSkillNum[2][0][2][1] = 2;
    mAnimalGAttackSkillNum[2][0][2][2] = 2;
    mAnimalGAttackSkillNum[2][1][0][0] = 2;
    mAnimalGAttackSkillNum[2][1][1][0] = 2;
    mAnimalGAttackSkillNum[2][1][1][1] = 2;
    mAnimalGAttackSkillNum[2][1][2][0] = 2;
    mAnimalGAttackSkillNum[2][1][2][1] = 2;
    mAnimalGAttackSkillNum[2][1][2][2] = 2;
    mAnimalGAttackSkillNum[2][2][0][0] = 2;
    mAnimalGAttackSkillNum[2][2][1][0] = 2;
    mAnimalGAttackSkillNum[2][2][1][1] = 2;
    mAnimalGAttackSkillNum[2][2][2][0] = 2;
    mAnimalGAttackSkillNum[2][2][2][1] = 2;
    mAnimalGAttackSkillNum[2][2][2][2] = 2;
    mAnimalGAttackSkillNum[2][3][0][0] = 2;
    mAnimalGAttackSkillNum[2][3][1][0] = 2;
    mAnimalGAttackSkillNum[2][3][1][1] = 2;
    mAnimalGAttackSkillNum[2][3][2][0] = 2;
    mAnimalGAttackSkillNum[2][3][2][1] = 2;
    mAnimalGAttackSkillNum[2][3][2][2] = 2;
    for (n = 0; n < 350; ++n)
    {
        mZonePlayerCount[n + 1] = 0.0;
    }
}

BOOL PLAY::Init()
{
    int index01; 

    MAX_AVATAR_OBJECT = 1000;
    MAX_NPC_OBJECT = 100;
    MAX_MONSTER_OBJECT = 1000;
    MAX_ITEM_OBJECT = 1000;
    MAX_EFFECT_OBJECT = 1000;
    MAX_PROXY_OBJECT = 500;
    for (index01 = 0; index01 < MAX_AVATAR_OBJECT; ++index01)
        mPLAY.mAVATAR_OBJECT[index01].Init();

    for (index01 = 0; index01 < MAX_NPC_OBJECT; ++index01)
        mPLAY.mNPC_OBJECT[index01].Init();

    for (index01 = 0; index01 < MAX_MONSTER_OBJECT; ++index01)
        mPLAY.mMONSTER_OBJECT[index01].Init();

    for (index01 = 0; index01 < MAX_ITEM_OBJECT; ++index01)
        mPLAY.mITEM_OBJECT[index01].Init();

    for (index01 = 0; index01 < MAX_EFFECT_OBJECT; ++index01)
        mPLAY.mEFFECT_OBJECT[index01].Init();

    for (index01 = 0; index01 < MAX_PROXY_OBJECT; ++index01)
        mPLAY.mPROXY_OBJECT[index01].Init();

    InitializeCriticalSection(&mPLAY.mCriticalSection);

    return TRUE;
}

void PLAY::Free()
{
    int i; 
    int j; 
    int k; 
    int l; 
    int m; 
    int n; 

    for (i = 0; i < mPLAY.MAX_EFFECT_OBJECT; ++i)
        mPLAY.mEFFECT_OBJECT[i].Free();
    for (j = 0; j < mPLAY.MAX_ITEM_OBJECT; ++j)
        mPLAY.mITEM_OBJECT[j].Free();
    for (k = 0; k < mPLAY.MAX_MONSTER_OBJECT; ++k)
        mPLAY.mMONSTER_OBJECT[k].Free();
    for (l = 0; l < mPLAY.MAX_NPC_OBJECT; ++l)
        mPLAY.mNPC_OBJECT[l].Free();
    for (m = 0; m < mPLAY.MAX_AVATAR_OBJECT; ++m)
        mPLAY.mAVATAR_OBJECT[m].Free();
    for (n = 0; n < mPLAY.MAX_PROXY_OBJECT; ++n)
        mPLAY.mPROXY_OBJECT[n].Free();
}

void PLAY::InitForEnterZone()
{
    int i; 

    for (i = 0; i < mZONENPCINFO.mDATA[mMYINFO.mPresentZoneNumber - 1].mTotalNPCNum; ++i)
    {
        mPLAY.mNPC_OBJECT[i].mNPC_INFO = mNPC.Search( mZONENPCINFO.mDATA[mMYINFO.mPresentZoneNumber - 1].mNPCNumber[i]);
        if (mPLAY.mNPC_OBJECT[i].mNPC_INFO)
        {
            mPLAY.mNPC_OBJECT[i].mCheckValidState = 1;
            mPLAY.mNPC_OBJECT[i].mMotionIndex = 0;
            mPLAY.mNPC_OBJECT[i].mFrame = 0.0;
            mPLAY.mNPC_OBJECT[i].mLocation[0] = mZONENPCINFO.mDATA[mMYINFO.mPresentZoneNumber - 1].mNPCCoord[i][0];
            mPLAY.mNPC_OBJECT[i].mLocation[1] = mZONENPCINFO.mDATA[mMYINFO.mPresentZoneNumber - 1].mNPCCoord[i][1];
            mPLAY.mNPC_OBJECT[i].mLocation[2] = mZONENPCINFO.mDATA[mMYINFO.mPresentZoneNumber - 1].mNPCCoord[i][2];
            mPLAY.mNPC_OBJECT[i].mFront = mZONENPCINFO.mDATA[mMYINFO.mPresentZoneNumber - 1].mNPCAngle[i];
            mPLAY.mNPC_OBJECT[i].mPostFront = mPLAY.mNPC_OBJECT[i].mFront;
        }
    }
}

void PLAY::PROCESS_DATA_201_SEND( int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost1, int tYPost1 )
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost1, 4);
	CopyMemory(&tData[24], &tYPost1, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(201, &tData[0]);
}
void PLAY::PROCESS_DATA_202_SEND( int tNPCIndex, int tSkillIndex )
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tNPCIndex, 4);
	CopyMemory(&tData[4], &tSkillIndex, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(202, &tData[0]);
}
void PLAY::PROCESS_DATA_203_SEND( int tIndex )
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tIndex, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(203, &tData[0]);
}
void PLAY::PROCESS_DATA_204_SEND( int tSkillSort, int tSkillIndex, int tSkillGrade, int tHotKeyPage, int tHotKeyIndex )
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tSkillSort, 4);
	CopyMemory(&tData[4], &tSkillIndex, 4);
	CopyMemory(&tData[8], &tSkillGrade, 4);
	CopyMemory(&tData[12], &tHotKeyPage, 4);
	CopyMemory(&tData[16], &tHotKeyIndex, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(204, &tData[0]);
}
void PLAY::PROCESS_DATA_205_SEND(int tHotKeyPage, int tHotKeyIndex)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tHotKeyPage, 4);
	CopyMemory(&tData[4], &tHotKeyIndex, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(205, &tData[0]);
}
void PLAY::PROCESS_DATA_206_SEND(int tAddSort)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tAddSort, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(206, &tData[0]);
}
void PLAY::PROCESS_DATA_207_SEND(int tMoveZoneValue)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tMoveZoneValue, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(207, &tData[0]);
}
void PLAY::PROCESS_DATA_208_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tPage1, 4);
    CopyMemory(&tData[4], &tIndex1, 4);
    CopyMemory(&tData[8], &tQuantity1, 4);
    CopyMemory(&tData[12], &tPage2, 4);
    CopyMemory(&tData[16], &tIndex2, 4);
    CopyMemory(&tData[20], &tXPost, 4);
    CopyMemory(&tData[24], &tYPost, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(208, &tData[0]);
}
void PLAY::PROCESS_DATA_209_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tPage1, 4);
    CopyMemory(&tData[4], &tIndex1, 4);
    CopyMemory(&tData[8], &tQuantity1, 4);
    CopyMemory(&tData[12], &tPage2, 4);
    CopyMemory(&tData[16], &tIndex2, 4);
    CopyMemory(&tData[20], &tXPost, 4);
    CopyMemory(&tData[24], &tYPost, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(209, &tData[0]);
}
void PLAY::PROCESS_DATA_210_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tPage1, 4);
    CopyMemory(&tData[4], &tIndex1, 4);
    CopyMemory(&tData[8], &tQuantity1, 4);
    CopyMemory(&tData[12], &tPage2, 4);
    CopyMemory(&tData[16], &tIndex2, 4);
    CopyMemory(&tData[20], &tXPost, 4);
    CopyMemory(&tData[24], &tYPost, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(210, &tData[0]);
}
void PLAY::PROCESS_DATA_211_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(211, &tData[0]);
}
void PLAY::PROCESS_DATA_212_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(212, &tData[0]);
}
void PLAY::PROCESS_DATA_213_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(213, &tData[0]);
}
void PLAY::PROCESS_DATA_214_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(214, &tData[0]);
}
void PLAY::PROCESS_DATA_215_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(215, &tData[0]);
}
void PLAY::PROCESS_DATA_216_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(216, &tData[0]);
}
void PLAY::PROCESS_DATA_218_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(218, &tData[0]);
}
void PLAY::PROCESS_DATA_219_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(219, &tData[0]);
}
void PLAY::PROCESS_DATA_220_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(220, &tData[0]);
}
void PLAY::PROCESS_DATA_221_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(221, &tData[0]);
}
void PLAY::PROCESS_DATA_222_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(222, &tData[0]);
}
void PLAY::PROCESS_DATA_223_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(223, &tData[0]);
}
void PLAY::PROCESS_DATA_224_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(224, &tData[0]);
}
void PLAY::PROCESS_DATA_225_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(225, &tData[0]);
}
void PLAY::PROCESS_DATA_226_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(226, &tData[0]);
}
void PLAY::PROCESS_DATA_227_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(227, &tData[0]);
}
void PLAY::PROCESS_DATA_228_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(228, &tData[0]);
}
void PLAY::PROCESS_DATA_229_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(229, &tData[0]);
}
void PLAY::PROCESS_DATA_230_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(230, &tData[0]);
}
void PLAY::PROCESS_DATA_231_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(231, &tData[0]);
}
void PLAY::PROCESS_DATA_232_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(232, &tData[0]);
}
void PLAY::PROCESS_DATA_234_SEND(int tSort)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tSort, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(234, &tData[0]);
}
void PLAY::PROCESS_DATA_235_SEND(int tValue)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tValue, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(235, &tData[0]);
}
void PLAY::PROCESS_DATA_236_SEND()
{
	BYTE tData[100];

	mTRANSFER.T_PROCESS_DATA_SEND(236, &tData[0]);
}
void PLAY::PROCESS_DATA_237_SEND()
{
	BYTE tData[100];

	mTRANSFER.T_PROCESS_DATA_SEND(237, &tData[0]);
}
void PLAY::PROCESS_DATA_238_SEND()
{
	BYTE tData[100];

	mTRANSFER.T_PROCESS_DATA_SEND(238, &tData[0]);
}
void PLAY::PROCESS_DATA_239_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(239, &tData[0]);
}
void PLAY::PROCESS_DATA_240_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(240, &tData[0]);
}
void PLAY::PROCESS_DATA_241_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(241, &tData[0]);
}
void PLAY::PROCESS_DATA_242_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(242, &tData[0]);
}
void PLAY::PROCESS_DATA_243_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(243, &tData[0]);
}
void PLAY::PROCESS_DATA_244_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(244, &tData[0]);
}
void PLAY::PROCESS_DATA_245_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(245, &tData[0]);
}
void PLAY::PROCESS_DATA_246_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(246, &tData[0]);
}
void PLAY::PROCESS_DATA_249_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tPage1, 4);
	CopyMemory(&tData[4], &tIndex1, 4);
	CopyMemory(&tData[8], &tQuantity1, 4);
	CopyMemory(&tData[12], &tPage2, 4);
	CopyMemory(&tData[16], &tIndex2, 4);
	CopyMemory(&tData[20], &tXPost, 4);
	CopyMemory(&tData[24], &tYPost, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(249, &tData[0]);
}
void PLAY::PROCESS_DATA_233_SEND(int tNpcIndex, int tSkillIndex)
{
	BYTE tData[100];

	CopyMemory(&tData[0], &tNpcIndex, 4);
	CopyMemory(&tData[4], &tSkillIndex, 4);
	mTRANSFER.T_PROCESS_DATA_SEND(233, &tData[0]);
}
void PLAY::PROCESS_DATA_247_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tPage1, 4);
    CopyMemory(&tData[4], &tIndex1, 4);
    CopyMemory(&tData[8], &tQuantity1, 4);
    CopyMemory(&tData[12], &tPage2, 4);
    CopyMemory(&tData[16], &tIndex2, 4);
    CopyMemory(&tData[20], &tXPost, 4);
    CopyMemory(&tData[24], &tYPost, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(247, &tData[0]);
}
void PLAY::PROCESS_DATA_248_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tPage1, 4);
    CopyMemory(&tData[4], &tIndex1, 4);
    CopyMemory(&tData[8], &tQuantity1, 4);
    CopyMemory(&tData[12], &tPage2, 4);
    CopyMemory(&tData[16], &tIndex2, 4);
    CopyMemory(&tData[20], &tXPost, 4);
    CopyMemory(&tData[24], &tYPost, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(248, &tData[0]);
}
void PLAY::PROCESS_DATA_250_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tPage1, 4);
    CopyMemory(&tData[4], &tIndex1, 4);
    CopyMemory(&tData[8], &tQuantity1, 4);
    CopyMemory(&tData[12], &tPage2, 4);
    CopyMemory(&tData[16], &tIndex2, 4);
    CopyMemory(&tData[20], &tXPost, 4);
    CopyMemory(&tData[24], &tYPost, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(250, &tData[0]);
}
void PLAY::PROCESS_DATA_251_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tPage1, 4);
    CopyMemory(&tData[4], &tIndex1, 4);
    CopyMemory(&tData[8], &tQuantity1, 4);
    CopyMemory(&tData[12], &tPage2, 4);
    CopyMemory(&tData[16], &tIndex2, 4);
    CopyMemory(&tData[20], &tXPost, 4);
    CopyMemory(&tData[24], &tYPost, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(251, &tData[0]);
}
void PLAY::PROCESS_DATA_252_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tPage1, 4);
    CopyMemory(&tData[4], &tIndex1, 4);
    CopyMemory(&tData[8], &tQuantity1, 4);
    CopyMemory(&tData[12], &tPage2, 4);
    CopyMemory(&tData[16], &tIndex2, 4);
    CopyMemory(&tData[20], &tXPost, 4);
    CopyMemory(&tData[24], &tYPost, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(252, &tData[0]);
}
void PLAY::PROCESS_DATA_253_SEND(int tPage1, int tIndex1, int tQuantity1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tPage1, 4);
    CopyMemory(&tData[4], &tIndex1, 4);
    CopyMemory(&tData[8], &tQuantity1, 4);
    CopyMemory(&tData[12], &tPage2, 4);
    CopyMemory(&tData[16], &tIndex2, 4);
    CopyMemory(&tData[20], &tXPost, 4);
    CopyMemory(&tData[24], &tYPost, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(253, &tData[0]);
}
void PLAY::PROCESS_DATA_254_SEND(int tPage1, int tIndex1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tPage1, 4);
    CopyMemory(&tData[4], &tIndex1, 4);
    CopyMemory(&tData[8], &tPage2, 4);
    CopyMemory(&tData[12], &tIndex2, 4);
    CopyMemory(&tData[16], &tXPost, 4);
    CopyMemory(&tData[20], &tYPost, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(254, &tData[0]);
}
void PLAY::PROCESS_DATA_255_SEND(int tPage1, int tIndex1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tPage1, 4);
    CopyMemory(&tData[4], &tIndex1, 4);
    CopyMemory(&tData[8], &tPage2, 4);
    CopyMemory(&tData[12], &tIndex2, 4);
    CopyMemory(&tData[16], &tXPost, 4);
    CopyMemory(&tData[20], &tYPost, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(255, &tData[0]);
}
void PLAY::PROCESS_DATA_256_SEND(int tPage1, int tIndex1, int tPage2, int tIndex2, int tXPost, int tYPost)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tPage1, 4);
    CopyMemory(&tData[4], &tIndex1, 4);
    CopyMemory(&tData[8], &tPage2, 4);
    CopyMemory(&tData[12], &tIndex2, 4);
    CopyMemory(&tData[16], &tXPost, 4);
    CopyMemory(&tData[20], &tYPost, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(256, &tData[0]);
}
void PLAY::PROCESS_DATA_501_SEND()
{
    BYTE tData[100];

    mTRANSFER.T_PROCESS_DATA_SEND(501, &tData[0]);
}
void PLAY::PROCESS_DATA_502_SEND()
{
    BYTE tData[100];

    mTRANSFER.T_PROCESS_DATA_SEND(502, &tData[0]);
}
void PLAY::PROCESS_DATA_505_SEND(int tValue)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tValue, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(505, &tData[0]);
}
void PLAY::PROCESS_DATA_506_SEND(int tValue)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tValue, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(506, &tData[0]);
}
void PLAY::PROCESS_DATA_507_SEND(float tLocation[3])
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tLocation[0], 12);
    mTRANSFER.T_PROCESS_DATA_SEND(507, &tData[0]);
}
void PLAY::PROCESS_DATA_508_SEND(int tValue)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tValue, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(508, &tData[0]);
}
void PLAY::PROCESS_DATA_511_SEND()
{
    BYTE tData[100];

    mTRANSFER.T_PROCESS_DATA_SEND(511, &tData[0]);
}
void PLAY::PROCESS_DATA_512_SEND()
{
    BYTE tData[100];

    mTRANSFER.T_PROCESS_DATA_SEND(512, &tData[0]);
}
void PLAY::PROCESS_DATA_513_SEND(char* tAvatarName)
{
    BYTE tData[100];

    CopyMemory(&tData[0], tAvatarName, MAX_AVATAR_NAME_LENGTH);
    mTRANSFER.T_PROCESS_DATA_SEND(513, &tData[0]);
}
void PLAY::PROCESS_DATA_514_SEND(char* tAvatarName)
{
    BYTE tData[100];

    CopyMemory(&tData[0], tAvatarName, MAX_AVATAR_NAME_LENGTH);
    mTRANSFER.T_PROCESS_DATA_SEND(514, &tData[0]);
}
void PLAY::PROCESS_DATA_515_SEND(char* tAvatarName)
{
    BYTE tData[100];

    CopyMemory(&tData[0], tAvatarName, MAX_AVATAR_NAME_LENGTH);
    mTRANSFER.T_PROCESS_DATA_SEND(515, &tData[0]);
}
void PLAY::PROCESS_DATA_516_SEND()
{
    BYTE tData[100];

    mTRANSFER.T_PROCESS_DATA_SEND(516, &tData[0]);
}
void PLAY::PROCESS_DATA_518_SEND(char* tAvatarName)
{
    BYTE tData[100];

    CopyMemory(&tData[0], tAvatarName, MAX_AVATAR_NAME_LENGTH);
    mTRANSFER.T_PROCESS_DATA_SEND(518, &tData[0]);
}
void PLAY::PROCESS_DATA_519_SEND(char* tAvatarName)
{
    BYTE tData[100];

    CopyMemory(&tData[0], tAvatarName, MAX_AVATAR_NAME_LENGTH);
    mTRANSFER.T_PROCESS_DATA_SEND(519, &tData[0]);
}
void PLAY::PROCESS_DATA_521_SEND(int tValue)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tValue, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(521, &tData[0]);
}
void PLAY::PROCESS_DATA_522_SEND(int tSort, int tValue)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tSort, 4);
    CopyMemory(&tData[4], &tValue, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(522, &tData[0]);
}
void PLAY::PROCESS_DATA_523_SEND(int tSort, int tValue)
{
    BYTE tData[100];

    CopyMemory(&tData[0], &tSort, 4);
    CopyMemory(&tData[4], &tValue, 4);
    mTRANSFER.T_PROCESS_DATA_SEND(523, &tData[0]);
}

int PLAY::ReturnTribeRole( char* tAvtName1, int tTribe)
{
    int i;

    if (!strcmp(tAvtName1, mTribeInfo.mTribeMaster[tTribe]))
    {
        return 1;
    }
    for (i = 0; i < 12; ++i)
    {
        if (!strcmp(tAvtName1, mTribeInfo.mTribeSubMaster[tTribe][i]))
        {
            return 2;
        }
    }
    return 0;
}

int PLAY::ReturnTribeSubMasterNum( int tTribe)
{
    int i; 
    int v5; 

    v5 = 0;
    for (i = 0; i < 12; ++i)
    {
        if (strcmp(mTribeInfo.mTribeSubMaster[tTribe][i], "") != 0)
            ++v5;
    }
    return v5;
}
int PLAY::CheckPossibleChangeToTribe4()
{
    int v2;
    int i;

    v2 = 0;
    for (i = 1; i < 4; ++i)
    {
        if (mPLAY.mWorldInfo.mTribePoint[i] > mPLAY.mWorldInfo.mTribePoint[v2])
        {
            v2 = i;
        }
    }
    return v2;
}

int PLAY::ReturnLowOrHighTribe( int tSort )
{
    int v2; 
    int result; 
    int v4; 
    int v6; 
    int i; 
    int j; 
    int v9; 

    v9 = 0;
    for (i = 1; i < 4; ++i)
    {
        v2 = mUTIL.ReturnTribePoint(i);
        if (v2 >= mUTIL.ReturnTribePoint(v9))
        {
            v9 = i;
        }
    }
    if (v9 == 3)
    {
        return 1;
    }
    v6 = 0;
    for (j = 1; j < 4; ++j)
    {
        v4 = mUTIL.ReturnTribePoint(j);
        if (v4 <= mUTIL.ReturnTribePoint(v6))
        {
            v6 = j;
        }
    }
    if (tSort == v6)
    {
        return 2;
    }

    return 0;
}

int PLAY::ReturnTribePointForReturnFaction( int tTribe )
{
    int v2; 
    int v4;
    int v6; 
    int i; 
    int j; 
    int v9;

    v9 = 0;
    for (i = 1; i < 4; ++i)
    {
        v2 = mUTIL.ReturnTribePoint(i);
        if (v2 >= mUTIL.ReturnTribePoint(v9))
        {
            v9 = i;
        }
    }
    if (tTribe == v9)
    {
        return 1;
    }
    v6 = 0;
    for (j = 1; j < 4; ++j)
    {
        v4 = mUTIL.ReturnTribePoint(j);
        if (v4 <= mUTIL.ReturnTribePoint(v6))
        {
            v6 = j;
        }
    }
    if (v6 == 3)
    {
        return 2;
    }

    return 0;
}

void PLAY::DemandGuildCreate(char* tGuildName)
{
    BYTE tData[500];

    memcpy(&tData[0], tGuildName, 13);
    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_GUILD_WORK_SEND(1, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP[0].hPresentElapsedSeconds;
    }
}

void PLAY::DemandGuildInfo(int tSort)
{
    BYTE tData[500];

    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_GUILD_WORK_SEND(2, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
        mMYINFO.mDemandGuildInfoSort = tSort;
    }
}
void PLAY::DemandGuildEnter()
{
    int result;
    BYTE tData[500];

    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_GUILD_WORK_SEND(3, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}
void PLAY::DemandGuildDelegateMaster(char* tAvtName, char* tGuildName, int tEntrustDate)
{
    int result;
    BYTE tData[500];

    CopyMemory(&tData[0], tAvtName, MAX_AVATAR_NAME_LENGTH);
    CopyMemory(&tData[MAX_AVATAR_NAME_LENGTH], tGuildName, 13);
    CopyMemory(&tData[MAX_AVATAR_NAME_LENGTH + 13], &tEntrustDate, 4);
    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_GUILD_WORK_SEND(17, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}

void PLAY::DemandGuildMarkEffectOff()
{
    int result;
    BYTE tData[500];

    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_GUILD_WORK_SEND(13, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}
void PLAY::DemandGuildMarkEffectOn()
{
    int result;
    BYTE tData[500];

    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_GUILD_WORK_SEND(12, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}
void PLAY::DemandGuildBuffSort( int tSort )
{
    int result;
    BYTE tData[500];

    CopyMemory(&tData[0], &tSort, 4);
    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_GUILD_WORK_SEND(14, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}
void PLAY::DemandGuildCallName( char* tAvtName, char* tCallName )
{
    int result;
    BYTE tData[500];

    CopyMemory(&tData[0], tAvtName, MAX_AVATAR_NAME_LENGTH);
    CopyMemory(&tData[MAX_AVATAR_NAME_LENGTH], tCallName, 5);
    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_GUILD_WORK_SEND(10, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}
void PLAY::DemandGuildNotice( char* tString )
{
    int result;
    BYTE tData[500];

    CopyMemory(&tData[0], tString, 204);
    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_GUILD_WORK_SEND(5, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}
void PLAY::DemandGuildBreak( )
{
    int result;
    BYTE tData[500];

    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_GUILD_WORK_SEND(6, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}
void PLAY::DemandGuildExpand( )
{
    int result;
    BYTE tData[500];

    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_GUILD_WORK_SEND(7, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}
void PLAY::DemandGuildOut( char* tAvtName )
{
    int result;
    BYTE tData[500];

    CopyMemory(&tData[0], tAvtName, MAX_AVATAR_NAME_LENGTH);
    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_GUILD_WORK_SEND(8, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}
void PLAY::DemandGuildLeave( )
{
    int result;
    BYTE tData[500];

    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_GUILD_WORK_SEND(4, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}
void PLAY::DemandGuildRole( char *tAvtName, int tSort )
{
    int result;
    BYTE tData[500];

    CopyMemory(&tData[0], tAvtName, MAX_AVATAR_NAME_LENGTH);
    CopyMemory(&tData[MAX_AVATAR_NAME_LENGTH], &tSort, 4);
    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_GUILD_WORK_SEND(9, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}
void PLAY::DemandTribeStatInit( )
{
    int result;
    BYTE tData[500];

    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_TRIBE_WORK_SEND(1, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}
void PLAY::DemandMakeTribeWeapon( int tSort )
{
    int result;
    BYTE tData[500];

    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_TRIBE_WORK_SEND(tSort, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}
void PLAY::DemandInsertTribeSubMaster( char* tAvtName )
{
    int result;
    BYTE tData[500];

    CopyMemory(&tData[0], tAvtName, MAX_AVATAR_NAME_LENGTH);
    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_TRIBE_WORK_SEND(2, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}
void PLAY::DemandDeleteTribeSubMaster( char* tAvtName )
{
    int result;
    BYTE tData[500];

    CopyMemory(&tData[0], tAvtName, MAX_AVATAR_NAME_LENGTH);
    if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock)
    {
        mTRANSFER.T_TRIBE_WORK_SEND(3, &tData[0]);
        mMYINFO.mNetworkLock = 1;
        mMYINFO.mSendItemPacketPostTime = mAPP->hPresentElapsedSeconds;
    }
}
void PLAY::ProcessForData(int tResult, int tSort, BYTE tData[100])
{
    int tPage1;
    int tIndex1;
    int tQuantity1;
    int tPage2;
    int tIndex2;
    int tXPost;
    int tYPost;
    int tCost;
    ITEM_INFO* tItem;
    SKILL_INFO* tSkill;
    char* tstr;
    char* tstr2;
    char* tstr3;
    int tValue, tValue2, tValue3, tValue4, tValue5;
    float fValue, fValue2, fValue3, fValue4, fValue5;
    int i, j, k, l;
    char Buffer[1000];
    int tLevel;


    switch (tSort)
    {
    case 201:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            if (tResult == 2)
            {
                tstr = mMESSAGE.Return(2427);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
            }
        }
        else
        {
            mMYINFO.mNetworkLock = 0;
            for (i = 0; i < MAX_ITEM_OBJECT && (!mITEM_OBJECT[i].mCheckValidState || mITEM_OBJECT[i].mServerIndex != tPage1 || mITEM_OBJECT[i].mUniqueNumber != tIndex1); ++i)
            {
                ;
            }
            if (i != MAX_ITEM_OBJECT)
            {
                tItem = mITEM.Search(mITEM_OBJECT[i].mDATA.iIndex);
                if (tItem)
                {
                    tValue = tItem->iSort;
                    if (tValue == 1)
                    {
                        mMYINFO.mAvatarInfo.aMoney += mITEM_OBJECT[i].mDATA.iQuantity;
                        tstr = mMESSAGE.Return(118);
                        mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                    }
                    else if (tValue == 2)
                    {
                        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][0] = mITEM_OBJECT[i].mDATA.iIndex;
                        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][1] = tXPost;
                        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][2] = tYPost;
                        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][3] += mITEM_OBJECT[i].mDATA.iQuantity;
                        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][4] = 0;
                        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][5] = 0;
                        tstr = mMESSAGE.Return(119);
                        mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                    }
                    else
                    {
                        if (tValue == 25)
                        {
                            tstr = mMESSAGE.Return(2396);
                        }
                        else
                        {
                            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][0] = mITEM_OBJECT[i].mDATA.iIndex;
                            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][1] = tXPost;
                            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][2] = tYPost;
                            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][3] = mITEM_OBJECT[i].mDATA.iQuantity;
                            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][4] = mITEM_OBJECT[i].mDATA.iValue;
                            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][5] = mITEM_OBJECT[i].mDATA.iItemRecognitionNumber;
                            mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][0] = mITEM_OBJECT[i].mDATA.iSocket[0];
                            mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][1] = mITEM_OBJECT[i].mDATA.iSocket[1];
                            mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][2] = mITEM_OBJECT[i].mDATA.iSocket[2];
                            tstr = mMESSAGE.Return(119);
                        }
                        mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                    }
                    mMYINFO.A011(mITEM_OBJECT[i].mLocation, 0, -1, 0, 0, 0, 0);
                    mPLAY.mITEM_OBJECT[i].Free();
                }
            }
        }
        return;

    case 202:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
        }
        else
        {
            mMYINFO.mNetworkLock = 0;
            tSkill = mSKILL.Search(tIndex1);
            if (tSkill)
            {
                switch (tSkill->sType)
                {
                case 1:
                    for (i = 0; i < 10 && mMYINFO.mAvatarInfo.aSkill[i][0] >= 1; ++i)
                    {
                        ;
                    }
                    if (i != 10)
                    {
                        GSOUND::Play(&mGDATA.mSOUND_5[281], 0, 100);
                        break;
                    }
                    return;

                case 2:
                    for (i = 20; i < 30 && mMYINFO.mAvatarInfo.aSkill[i][0] >= 1; ++i)
                    {
                        ;
                    }
                    if (i != 30)
                    {
                        switch (tSkill->sAttackType)
                        {
                        case 2:
                            GSOUND::Play(&mGDATA.mSOUND_5[282], 0, 100);
                            break;
                        case 3:
                            GSOUND::Play(&mGDATA.mSOUND_5[283], 0, 100);
                            break;
                        case 4:
                            GSOUND::Play(&mGDATA.mSOUND_5[284], 0, 100);
                            break;
                        case 5:
                            GSOUND::Play(&mGDATA.mSOUND_5[285], 0, 100);
                            break;
                        }
                        break;
                    }
                    return;

                case 3:
                    for (i = 10; i < 20 && mMYINFO.mAvatarInfo.aSkill[i][0] >= 1; ++i)
                    {
                        ;
                    }
                    if (i != 20)
                    {
                        GSOUND::Play(&mGDATA.mSOUND_5[281], 0, 100);
                        break;
                    }
                    for (i = 30; i < 40 && mMYINFO.mAvatarInfo.aSkill[i][0] >= 1; ++i)
                    {
                        ;
                    }
                    if (i != 40)
                    {
                        GSOUND::Play(&mGDATA.mSOUND_5[281], 0, 100);
                        break;
                    }
                    return;

                case 4:
                    for (i = 10; i < 20 && mMYINFO.mAvatarInfo.aSkill[i][0] >= 1; ++i)
                    {
                        ;
                    }
                    if (i != 20)
                    {
                        GSOUND::Play(&mGDATA.mSOUND_5[281], 0, 100);
                        break;
                    }
                    for (i = 30; i < 40 && mMYINFO.mAvatarInfo.aSkill[i][0] >= 1; ++i)
                    {
                        ;
                    }
                    if (i != 40)
                    {
                        GSOUND::Play(&mGDATA.mSOUND_5[281], 0, 100);
                        break;
                    }
                    return;

                default:
                    return;
                }
                mMYINFO.mAvatarInfo.aSkillPoint -= tSkill->sLearnSkillPoint;
                mMYINFO.mAvatarInfo.aSkill[i][0] = tSkill->sIndex;
                mMYINFO.mAvatarInfo.aSkill[i][1] = tSkill->sLearnSkillPoint;
                mBASICUI.Insert1(mMESSAGE.Return(134), mFONTCOLOR.mData[44]);
            }
        }
        return;

    case 203:
        CopyMemory(&tPage1, &tData[0], 4);
        mMYINFO.mNetworkLock = 0;
        if (!tResult)
        {
            GSOUND::Play(&mGDATA.mSOUND_5[288], 0, 100);
            --mMYINFO.mAvatarInfo.aSkillPoint;
            mSKILLUI.mSkillLevel[tPage1] = ++mMYINFO.mAvatarInfo.aSkill[tPage1][1];
        }
        return;

    case 204:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        if (tPage1 == 1)
        {
            mCHOICEUI.InitForPick();
            mMYINFO.mAvatarInfo.aHotKey[tPage2][tIndex2][0] = mMYINFO.mAvatarInfo.aSkill[tIndex1][0];
            mMYINFO.mAvatarInfo.aHotKey[tPage2][tIndex2][1] = tQuantity1;
            mMYINFO.mAvatarInfo.aHotKey[tPage2][tIndex2][2] = 1;
            GSOUND::Play(&mGDATA.mSOUND_5[286], 0, 100);
        }
        else if (tPage1 == 2)
        {
            mCHOICEUI.InitForPick();
            mMYINFO.mAvatarInfo.aHotKey[tPage2][tIndex2][0] = tIndex1;
            mMYINFO.mAvatarInfo.aHotKey[tPage2][tIndex2][1] = 0;
            mMYINFO.mAvatarInfo.aHotKey[tPage2][tIndex2][2] = 2;
            GSOUND::Play(&mGDATA.mSOUND_5[286], 0, 100);
        }
        return;

    case 205:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
        }
        else
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForPick();
            mMYINFO.mAvatarInfo.aHotKey[tPage1][tIndex1][0] = 0;
            mMYINFO.mAvatarInfo.aHotKey[tPage1][tIndex1][1] = 0;
            mMYINFO.mAvatarInfo.aHotKey[tPage1][tIndex1][2] = 0;
            if (mMYINFO.mHotKeyPage == tPage1 && mMYINFO.mHotKeyIndex == tIndex1)
                mMYINFO.mHotKeyIndex = -1;
            GSOUND::Play(&mGDATA.mSOUND_5[287], 0, 100);
        }
        return;

    case 206:
        CopyMemory(&tPage1, &tData[0], 4);
        if (!tResult)
        {
            mMYINFO.mNetworkLock = 0;
            switch (tPage1)
            {
            case 1:
                ++mMYINFO.mAvatarInfo.aStr;
                break;
            case 2:
                ++mMYINFO.mAvatarInfo.aDex;
                break;
            case 3:
                ++mMYINFO.mAvatarInfo.aVit;
                break;
            case 4:
                ++mMYINFO.mAvatarInfo.aInt;
                break;
            case 5:
                mMYINFO.mAvatarInfo.aStr += 5;
                break;
            case 6:
                mMYINFO.mAvatarInfo.aDex += 5;
                break;
            case 7:
                mMYINFO.mAvatarInfo.aVit += 5;
                break;
            case 8:
                mMYINFO.mAvatarInfo.aInt += 5;
                break;
            default:
                break;
            }
            mAVATAR_OBJECT[0].mDATA.aMaxLifeValue = mFACTOR.GetMaxLife();
            mAVATAR_OBJECT[0].mDATA.aMaxManaValue = mFACTOR.GetMaxMana();
        }
        mMYINFO.mNetworkLock = 0;
        return;

    case 207:
        mMYINFO.mNetworkLock = 0;
        memcpy(&tPage1, &tData[0], 4);
        mMYINFO.mAvatarInfo.aMoney -= tPage1;
        return;

    case 208:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][0] = mCHOICEUI.mItemIdx;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][1] = tXPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][2] = tYPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][3] += mCHOICEUI.mItemQuantity;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][4] = mCHOICEUI.mItemImprove;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][5] = mCHOICEUI.mItemSerial;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][0] = mCHOICEUI.mItemSocket[0];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][1] = mCHOICEUI.mItemSocket[1];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][2] = mCHOICEUI.mItemSocket[2];
        return;

    case 209:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        tstr = mMESSAGE.Return(122);
        mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
        return;

    case 210:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aEquip[tIndex2][0] = mCHOICEUI.mItemIdx;
        mMYINFO.mAvatarInfo.aEquip[tIndex2][1] = mCHOICEUI.mItemQuantity;
        mMYINFO.mAvatarInfo.aEquip[tIndex2][2] = mCHOICEUI.mItemImprove;
        mMYINFO.mAvatarInfo.aEquip[tIndex2][3] = mCHOICEUI.mItemSerial;
        mMYINFO.mAvatarInfo.aEquipSocket[tIndex2][0] = mCHOICEUI.mItemSocket[0];
        mMYINFO.mAvatarInfo.aEquipSocket[tIndex2][1] = mCHOICEUI.mItemSocket[1];
        mMYINFO.mAvatarInfo.aEquipSocket[tIndex2][2] = mCHOICEUI.mItemSocket[2];
        mAVATAR_OBJECT[0].mDATA.aEquipForView[tIndex2][0] = mMYINFO.mAvatarInfo.aEquip[tIndex2][0];
        mAVATAR_OBJECT[0].mDATA.aEquipForView[tIndex2][1] = mMYINFO.mAvatarInfo.aEquip[tIndex2][2];
        mAVATAR_OBJECT[0].mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass3();
        mAVATAR_OBJECT[0].mDATA.aAction.aSort = 1;
        mAVATAR_OBJECT[0].mDATA.aAction.aFrame = 0.0;
        mAVATAR_OBJECT[0].mDATA.aMaxLifeValue = mFACTOR.GetMaxLife();
        mAVATAR_OBJECT[0].mDATA.aMaxManaValue = mFACTOR.GetMaxMana();
        return;

    case 211:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aHotKey[tPage2][tIndex2][0] = mCHOICEUI.mItemIdx;
        mMYINFO.mAvatarInfo.aHotKey[tPage2][tIndex2][1] += mCHOICEUI.mItemQuantity;
        mMYINFO.mAvatarInfo.aHotKey[tPage2][tIndex2][2] = 3;
        GSOUND::Play(&mGDATA.mSOUND_5[286], 0, 100);
        return;

    case 212:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        tItem = mITEM.Search(mCHOICEUI.mItemIdx);
        if (tItem)
        {
            if (tItem->iSort == 2)
                mMYINFO.mAvatarInfo.aMoney += mCHOICEUI.mItemQuantity * tItem->iSellCost;
            else
                mMYINFO.mAvatarInfo.aMoney += tItem->iSellCost;
            tstr = mMESSAGE.Return(141);
            mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
        }
        return;

    case 213:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][0] = mCHOICEUI.mItemIdx;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][1] = tXPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][2] = tYPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][3] = mCHOICEUI.mItemX;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][4] = mCHOICEUI.mItemY;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][5] = mCHOICEUI.mItemQuantity;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][0] = mCHOICEUI.mItemSocket[0];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][1] = mCHOICEUI.mItemSocket[1];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][2] = mCHOICEUI.mItemSocket[2];
        mAVATAR_OBJECT[0].mDATA.aEquipForView[tIndex1][0] = 0;
        mAVATAR_OBJECT[0].mDATA.aEquipForView[tIndex1][1] = 0;
        mAVATAR_OBJECT[0].mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass3();
        mAVATAR_OBJECT[0].mDATA.aAction.aSort = 1;
        mAVATAR_OBJECT[0].mDATA.aAction.aFrame = 0.0;
        mAVATAR_OBJECT[0].mDATA.aMaxLifeValue = mFACTOR.GetMaxLife();
        if (mAVATAR_OBJECT[0].mDATA.aLifeValue > mFACTOR.GetMaxLife())
            mAVATAR_OBJECT[0].mDATA.aLifeValue = mFACTOR.GetMaxLife();
        mAVATAR_OBJECT[0].mDATA.aMaxManaValue = mFACTOR.GetMaxMana();
        if (mAVATAR_OBJECT[0].mDATA.aManaValue > mFACTOR.GetMaxMana())
            mAVATAR_OBJECT[0].mDATA.aManaValue = mFACTOR.GetMaxMana();
        return;

    case 214:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][0] = mCHOICEUI.mItemIdx;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][1] = tXPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][2] = tYPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][3] += mCHOICEUI.mItemX;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][4] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][5] = 0;
        return;

    case 215:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        tItem = mITEM.Search(tIndex1);
        if (tItem)
        {
            if (tItem->iSort == 2)
                mMYINFO.mAvatarInfo.aMoney -= mMYINFO.mPresentZoneNumber == 291 ? tQuantity1 * (tItem->iBuyCost * 0.90f) : tQuantity1 * tItem->iBuyCost;
            else
                mMYINFO.mAvatarInfo.aMoney -= mMYINFO.mPresentZoneNumber == 291 ? (tItem->iBuyCost * 0.90f) : tItem->iBuyCost;
            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][0] = tIndex1;
            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][1] = tXPost;
            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][2] = tYPost;
            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][3] += tQuantity1;
            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][4] = 0;
            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][5] = 0;
            mMYINFO.mAvatarInfo.aKillOtherTribe -= tItem->iBuyCPCost;
            ::mPLAY.mAVATAR_OBJECT[0].mDATA.aKillOtherTribe = mMYINFO.mAvatarInfo.aKillOtherTribe;
            tstr = mMESSAGE.Return(142);
            mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
            if (tIndex1 == 2314)
                ++mMYINFO.Rcmd1;
        }
        return;

    case 216:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aHotKey[tPage2][tIndex2][0] = mCHOICEUI.mItemIdx;
        mMYINFO.mAvatarInfo.aHotKey[tPage2][tIndex2][1] += mCHOICEUI.mItemX;
        mMYINFO.mAvatarInfo.aHotKey[tPage2][tIndex2][2] = mCHOICEUI.mItemY;
        return;

    case 217:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        tstr = mMESSAGE.Return(238);
        mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
        return;

    case 218:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aTrade[tIndex2][0] = mCHOICEUI.mItemIdx;
        mMYINFO.mAvatarInfo.aTrade[tIndex2][1] += mCHOICEUI.mItemQuantity;
        mMYINFO.mAvatarInfo.aTrade[tIndex2][2] = mCHOICEUI.mItemImprove;
        mMYINFO.mAvatarInfo.aTrade[tIndex2][3] = mCHOICEUI.mItemSerial;
        mMYINFO.mAvatarInfo.aTradeSocket[tIndex2][0] = mCHOICEUI.mItemSocket[0];
        mMYINFO.mAvatarInfo.aTradeSocket[tIndex2][1] = mCHOICEUI.mItemSocket[1];
        mMYINFO.mAvatarInfo.aTradeSocket[tIndex2][2] = mCHOICEUI.mItemSocket[2];
        mMYINFO.mAvatarInfo.aTradeSocket[tIndex2][3] = mCHOICEUI.mItemSocket[3];
        mMYINFO.mAvatarInfo.aTradeSocket[tIndex2][4] = mCHOICEUI.mItemSocket[4];
        return;

    case 219:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        goto LABEL_176;

    case 220:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aTrade[tIndex2][0] = mCHOICEUI.mItemIdx;
        mMYINFO.mAvatarInfo.aTrade[tIndex2][1] += mCHOICEUI.mItemX;
        mMYINFO.mAvatarInfo.aTrade[tIndex2][2] = mCHOICEUI.mItemY;
        mMYINFO.mAvatarInfo.aTrade[tIndex2][3] = mCHOICEUI.mItemQuantity;
        mMYINFO.mAvatarInfo.aTradeSocket[tIndex2][0] = mCHOICEUI.mItemSocket[0];
        mMYINFO.mAvatarInfo.aTradeSocket[tIndex2][1] = mCHOICEUI.mItemSocket[1];
        mMYINFO.mAvatarInfo.aTradeSocket[tIndex2][2] = mCHOICEUI.mItemSocket[2];
        mMYINFO.mAvatarInfo.aTradeSocket[tIndex2][3] = mCHOICEUI.mItemSocket[3];
        mMYINFO.mAvatarInfo.aTradeSocket[tIndex2][4] = mCHOICEUI.mItemSocket[4];
        return;

    case 221:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aTradeMoney += tQuantity1;
        return;

    case 222:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aMoney += tQuantity1;
        return;

    case 223:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aStoreItem[tPage2][tIndex2][0] = mCHOICEUI.mItemIdx;
        mMYINFO.mAvatarInfo.aStoreItem[tPage2][tIndex2][1] += mCHOICEUI.mItemQuantity;
        mMYINFO.mAvatarInfo.aStoreItem[tPage2][tIndex2][2] = mCHOICEUI.mItemImprove;
        mMYINFO.mAvatarInfo.aStoreItem[tPage2][tIndex2][3] = mCHOICEUI.mItemSerial;
        mMYINFO.mAvatarInfo.aStoreSocket[tPage2][tIndex2][0] = mCHOICEUI.mItemSocket[0];
        mMYINFO.mAvatarInfo.aStoreSocket[tPage2][tIndex2][1] = mCHOICEUI.mItemSocket[1];
        mMYINFO.mAvatarInfo.aStoreSocket[tPage2][tIndex2][2] = mCHOICEUI.mItemSocket[2];
        mMYINFO.mAvatarInfo.aStoreSocket[tPage2][tIndex2][3] = mCHOICEUI.mItemSocket[3];
        mMYINFO.mAvatarInfo.aStoreSocket[tPage2][tIndex2][4] = mCHOICEUI.mItemSocket[4];
        return;

    case 224:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][0] = mCHOICEUI.mItemIdx;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][1] = tXPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][2] = tYPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][3] += mCHOICEUI.mItemX;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][4] = mCHOICEUI.mItemY;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][5] = mCHOICEUI.mItemQuantity;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][0] = mCHOICEUI.mItemSocket[0];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][1] = mCHOICEUI.mItemSocket[1];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][2] = mCHOICEUI.mItemSocket[2];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][3] = mCHOICEUI.mItemSocket[3];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][4] = mCHOICEUI.mItemSocket[4];
        return;

    case 225:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aStoreItem[tPage2][tIndex2][0] = mCHOICEUI.mItemIdx;
        mMYINFO.mAvatarInfo.aStoreItem[tPage2][tIndex2][1] += mCHOICEUI.mItemX;
        mMYINFO.mAvatarInfo.aStoreItem[tPage2][tIndex2][2] = mCHOICEUI.mItemY;
        mMYINFO.mAvatarInfo.aStoreItem[tPage2][tIndex2][3] = mCHOICEUI.mItemQuantity;
        mMYINFO.mAvatarInfo.aStoreSocket[tPage2][tIndex2][0] = mCHOICEUI.mItemSocket[0];
        mMYINFO.mAvatarInfo.aStoreSocket[tPage2][tIndex2][1] = mCHOICEUI.mItemSocket[1];
        mMYINFO.mAvatarInfo.aStoreSocket[tPage2][tIndex2][2] = mCHOICEUI.mItemSocket[2];
        mMYINFO.mAvatarInfo.aStoreSocket[tPage2][tIndex2][3] = mCHOICEUI.mItemSocket[3];
        mMYINFO.mAvatarInfo.aStoreSocket[tPage2][tIndex2][4] = mCHOICEUI.mItemSocket[4];
        return;

    case 226:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aStoreMoney += tQuantity1;
        return;

    case 227:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aMoney += tQuantity1;
        return;

    case 228:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.uSaveItem[tIndex2][0] = mCHOICEUI.mItemIdx;
        mMYINFO.mAvatarInfo.uSaveItem[tIndex2][1] += mCHOICEUI.mItemQuantity;
        mMYINFO.mAvatarInfo.uSaveItem[tIndex2][2] = mCHOICEUI.mItemImprove;
        mMYINFO.mAvatarInfo.uSaveItem[tIndex2][3] = mCHOICEUI.mItemSerial;
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex2][0] = mCHOICEUI.mItemSocket[0];
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex2][1] = mCHOICEUI.mItemSocket[1];
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex2][2] = mCHOICEUI.mItemSocket[2];
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex2][3] = mCHOICEUI.mItemSocket[3];
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex2][4] = mCHOICEUI.mItemSocket[4];
        return;

    case 229:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
    LABEL_176:
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][0] = mCHOICEUI.mItemIdx;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][1] = tXPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][2] = tYPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][3] += mCHOICEUI.mItemX;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][4] = mCHOICEUI.mItemY;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][5] = mCHOICEUI.mItemQuantity;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][0] = mCHOICEUI.mItemSocket[0];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][1] = mCHOICEUI.mItemSocket[1];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][2] = mCHOICEUI.mItemSocket[2];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][3] = mCHOICEUI.mItemSocket[3];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][4] = mCHOICEUI.mItemSocket[4];
        return;

    case 230:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.uSaveItem[tIndex2][0] = mCHOICEUI.mItemIdx;
        mMYINFO.mAvatarInfo.uSaveItem[tIndex2][1] += mCHOICEUI.mItemX;
        mMYINFO.mAvatarInfo.uSaveItem[tIndex2][2] = mCHOICEUI.mItemY;
        mMYINFO.mAvatarInfo.uSaveItem[tIndex2][3] = mCHOICEUI.mItemQuantity;
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex2][0] = mCHOICEUI.mItemSocket[0];
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex2][1] = mCHOICEUI.mItemSocket[1];
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex2][2] = mCHOICEUI.mItemSocket[2];
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex2][3] = mCHOICEUI.mItemSocket[3];
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex2][4] = mCHOICEUI.mItemSocket[4];
        return;

    case 231:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.uSaveMoney += tQuantity1;
        return;

    case 232:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aMoney += tQuantity1;
        return;

    case 233:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
        }
        else
        {
            mMYINFO.mNetworkLock = 0;
            tSkill = mSKILL.Search(tIndex1);
            if (tSkill)
            {
                switch (tSkill->sType)
                {
                case 1:
                    for (i = 0; i < 10 && mMYINFO.mAvatarInfo.aSkill[i][0] >= 1; ++i)
                    {
                        ;
                    }
                    if (i != 10)
                    {
                        GSOUND::Play(&mGDATA.mSOUND_5[281], 0, 100);
                        break;
                    }
                    return;

                case 2:
                    for (i = 20; i < 30 && mMYINFO.mAvatarInfo.aSkill[i][0] >= 1; ++i)
                    {
                        ;
                    }
                    if (i != 30)
                    {
                        switch (tSkill->sAttackType)
                        {
                        case 2:
                            GSOUND::Play(&mGDATA.mSOUND_5[282], 0, 100);
                            break;
                        case 3:
                            GSOUND::Play(&mGDATA.mSOUND_5[283], 0, 100);
                            break;
                        case 4:
                            GSOUND::Play(&mGDATA.mSOUND_5[284], 0, 100);
                            break;
                        case 5:
                            GSOUND::Play(&mGDATA.mSOUND_5[285], 0, 100);
                            break;
                        default:
                            break;
                        }
                        break;
                    }
                    return;

                case 3:
                    for (i = 10; i < 20 && mMYINFO.mAvatarInfo.aSkill[i][0] >= 1; ++i)
                    {
                        ;
                    }
                    if (i != 20)
                    {
                        GSOUND::Play(&mGDATA.mSOUND_5[281], 0, 100);
                        break;
                    }
                    for (i = 30; i < 40 && mMYINFO.mAvatarInfo.aSkill[i][0] >= 1; ++i)
                    {
                        ;
                    }
                    if (i != 40)
                    {
                        GSOUND::Play(&mGDATA.mSOUND_5[281], 0, 100);
                        break;
                    }
                    return;

                case 4:
                    for (i = 10; i < 20 && mMYINFO.mAvatarInfo.aSkill[i][0] >= 1; ++i)
                    {
                        ;
                    }
                    if (i != 20)
                    {
                        GSOUND::Play(&mGDATA.mSOUND_5[281], 0, 100);
                        break;
                    }
                    for (i = 30; i < 40 && mMYINFO.mAvatarInfo.aSkill[i][0] >= 1; ++i)
                    {
                        ;
                    }
                    if (i != 40)
                    {
                        GSOUND::Play(&mGDATA.mSOUND_5[281], 0, 100);
                        break;
                    }
                    return;

                default:
                    return;
                }
                // Main
                mMYINFO.mAvatarInfo.aSkillPoint -= tSkill->sLearnSkillPoint;
                mMYINFO.mAvatarInfo.aSkill[i][0] = tSkill->sIndex;
                mMYINFO.mAvatarInfo.aSkill[i][1] = tSkill->sLearnSkillPoint;
                mBASICUI.Insert1(mMESSAGE.Return(134), mFONTCOLOR.mData[44]);
            }
        }
        return;

    case 234:
        CopyMemory(&tPage1, &tData[0], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
        }
        else
        {
            mMYINFO.mNetworkLock = 0;
            switch (tPage1)
            {
            case 1:
                --mMYINFO.mAvatarInfo.aLifePotionConvertNum;
                break;
            case 2:
                --mMYINFO.mAvatarInfo.aLifePotionConvertNum;
                break;
            case 3:
                --mMYINFO.mAvatarInfo.aChiPotionConvertNum;
                break;
            }
        }
        return;

    case 235:
        CopyMemory(&tPage1, &tData[0], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            if (tResult == 1)
            {
                tstr = mMESSAGE.Return(2290);
                mBASICUI.Insert1( tstr, mFONTCOLOR.mData[44]);
            }
        }
        else
        {
            mMYINFO.mNetworkLock = 0;
            mMYINFO.mAvatarInfo.aKillOtherTribe += tPage1;
            ::mPLAY.mAVATAR_OBJECT[0].mDATA.aKillOtherTribe += tPage1;
            mMYINFO.mAvatarInfo.aTeacherPoint -= 100000 * tPage1;
            tstr = mMESSAGE.Return( 832);
            mBASICUI.Insert1( tstr, mFONTCOLOR.mData[44]);
        }
        return;

    case 236:
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            if (tResult == 1)
            {
                tstr = mMESSAGE.Return(880);
                mBASICUI.Insert1( tstr, mFONTCOLOR.mData[44]);
            }
        }
        else
        {
            mMYINFO.mNetworkLock = 0;
            mMYINFO.mAvatarInfo.aKillOtherTribe -= 30;
            mPLAY.mAVATAR_OBJECT[0].mDATA.aKillOtherTribe -= 30;
            tstr = mMESSAGE.Return(872);
            mBASICUI.Insert1( tstr, mFONTCOLOR.mData[44]);
        }
        return;

    case 237:
        mMYINFO.mNetworkLock = 0;
        if (!tResult)
        {
            mMYINFO.mAvatarInfo.aTeacherPoint += 694 * mMYINFO.mAvatarInfo.aCapsuleOnlineTime;
            mMYINFO.mAvatarInfo.aCapsuleOnlineTime = 0;
            tstr = mMESSAGE.Return(1281);
            mBASICUI.Insert1( tstr, mFONTCOLOR.mData[44]);
        }
        return;

    case 238:
        mMYINFO.mNetworkLock = 0;
        if (!tResult)
        {
            mMYINFO.mAvatarInfo.aTeacherPoint += 1388 * mMYINFO.mAvatarInfo.aPCCafeOnlineTimeToMerit;
            mMYINFO.mAvatarInfo.aPCCafeOnlineTimeToMerit = 0;
            tstr = mMESSAGE.Return( 1371);
            mBASICUI.Insert1( tstr, mFONTCOLOR.mData[44]);
        }
        return;

    case 239:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        tItem = mITEM.Search(tIndex1);
        if (tItem)
        {
            if (tItem->iSort == 2)
                mMYINFO.mAvatarInfo.aMoney -= tQuantity1 * tItem->iBuyCost;
            else
                mMYINFO.mAvatarInfo.aMoney -= tItem->iBuyCost;
            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][0] = tIndex1;
            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][1] = tXPost;
            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][2] = tYPost;
            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][3] += tQuantity1;
            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][4] = 0;
            mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][5] = 0;
            mMYINFO.mAvatarInfo.aKillOtherTribe -= tItem->iBuyCPCost;
            ::mPLAY.mAVATAR_OBJECT[0].mDATA.aKillOtherTribe = mMYINFO.mAvatarInfo.aKillOtherTribe;
            tstr = mMESSAGE.Return(142);
            mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
        }
        return;

    case 240:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aTradeMoney2 += tQuantity1;
        return;

    case 241:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aStoreMoney2 += tQuantity1;
        return;

    case 242:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.uSaveMoney2 += tQuantity1;
        return;

    case 243:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aMoney2 += tQuantity1;
        return;

    case 244:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aMoney2 += tQuantity1;
        return;

    case 245:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aMoney2 += tQuantity1;
        return;

    case 246:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aMoney2 += tQuantity1 / 1000000000;
        return;

    case 247:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aMoney += 1000000000 * tQuantity1;
        return;

    case 248:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][0] = mMYINFO.mAvatarInfo.aStoreItem[tPage1][tIndex1][0];
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][1] = tXPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][2] = tYPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][3] += mMYINFO.mAvatarInfo.aStoreItem[tPage1][tIndex1][1];
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][4] = mMYINFO.mAvatarInfo.aStoreItem[tPage1][tIndex1][2];
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][5] = mMYINFO.mAvatarInfo.aStoreItem[tPage1][tIndex1][3];
        mMYINFO.mAvatarInfo.aStoreItem[tPage1][tIndex1][0] = 0;
        mMYINFO.mAvatarInfo.aStoreItem[tPage1][tIndex1][1] = 0;
        mMYINFO.mAvatarInfo.aStoreItem[tPage1][tIndex1][2] = 0;
        mMYINFO.mAvatarInfo.aStoreItem[tPage1][tIndex1][3] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][0] = mMYINFO.mAvatarInfo.aStoreSocket[tPage1][tIndex1][0];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][1] = mMYINFO.mAvatarInfo.aStoreSocket[tPage1][tIndex1][1];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][2] = mMYINFO.mAvatarInfo.aStoreSocket[tPage1][tIndex1][2];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][3] = mMYINFO.mAvatarInfo.aStoreSocket[tPage1][tIndex1][3];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][4] = mMYINFO.mAvatarInfo.aStoreSocket[tPage1][tIndex1][4];
        mMYINFO.mAvatarInfo.aStoreSocket[tPage1][tIndex1][0] = 0;
        mMYINFO.mAvatarInfo.aStoreSocket[tPage1][tIndex1][1] = 0;
        mMYINFO.mAvatarInfo.aStoreSocket[tPage1][tIndex1][2] = 0;
        mMYINFO.mAvatarInfo.aStoreSocket[tPage1][tIndex1][3] = 0;
        mMYINFO.mAvatarInfo.aStoreSocket[tPage1][tIndex1][4] = 0;
        return;

    case 249:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][0] = mMYINFO.mAvatarInfo.uSaveItem[tIndex1][0];
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][1] = tXPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][2] = tYPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][3] += mMYINFO.mAvatarInfo.uSaveItem[tIndex1][1];
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][4] = mMYINFO.mAvatarInfo.uSaveItem[tIndex1][2];
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][5] = mMYINFO.mAvatarInfo.uSaveItem[tIndex1][3];
        mMYINFO.mAvatarInfo.uSaveItem[tIndex1][0] = 0;
        mMYINFO.mAvatarInfo.uSaveItem[tIndex1][1] = 0;
        mMYINFO.mAvatarInfo.uSaveItem[tIndex1][2] = 0;
        mMYINFO.mAvatarInfo.uSaveItem[tIndex1][3] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][0] = mMYINFO.mAvatarInfo.aSaveSocket[tIndex1][0];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][1] = mMYINFO.mAvatarInfo.aSaveSocket[tIndex1][1];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][2] = mMYINFO.mAvatarInfo.aSaveSocket[tIndex1][2];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][3] = mMYINFO.mAvatarInfo.aSaveSocket[tIndex1][3];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][4] = mMYINFO.mAvatarInfo.aSaveSocket[tIndex1][4];
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex1][0] = 0;
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex1][1] = 0;
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex1][2] = 0;
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex1][3] = 0;
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex1][4] = 0;
        return;

    case 250:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aStoreItem[tPage2][tIndex2][0] = mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][0];
        mMYINFO.mAvatarInfo.aStoreItem[tPage2][tIndex2][1] += mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][3];
        mMYINFO.mAvatarInfo.aStoreItem[tPage2][tIndex2][2] = mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][4];
        mMYINFO.mAvatarInfo.aStoreItem[tPage2][tIndex2][3] = mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][5];
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][0] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][1] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][2] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][3] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][4] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][5] = 0;
        mMYINFO.mAvatarInfo.aStoreSocket[tPage2][tIndex2][0] = mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][0];
        mMYINFO.mAvatarInfo.aStoreSocket[tPage2][tIndex2][1] = mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][1];
        mMYINFO.mAvatarInfo.aStoreSocket[tPage2][tIndex2][2] = mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][2];
        mMYINFO.mAvatarInfo.aStoreSocket[tPage2][tIndex2][3] = mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][3];
        mMYINFO.mAvatarInfo.aStoreSocket[tPage2][tIndex2][4] = mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][4];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][0] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][1] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][2] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][3] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][4] = 0;
        return;

    case 251:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.uSaveItem[tIndex2][0] = mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][0];
        mMYINFO.mAvatarInfo.uSaveItem[tIndex2][1] += mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][3];
        mMYINFO.mAvatarInfo.uSaveItem[tIndex2][2] = mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][4];
        mMYINFO.mAvatarInfo.uSaveItem[tIndex2][3] = mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][5];
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][0] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][1] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][2] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][3] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][4] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][5] = 0;
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex2][0] = mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][0];
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex2][1] = mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][1];
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex2][2] = mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][2];
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex2][3] = mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][3];
        mMYINFO.mAvatarInfo.aSaveSocket[tIndex2][4] = mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][4];
        mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][0] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][1] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][2] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][3] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][4] = 0;
        return;

    case 252:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        tItem = mITEM.Search(mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][0]);
        if (tItem)
        {
            if (tItem->iSort == 2)
                mMYINFO.mAvatarInfo.aMoney += mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][3] * tItem->iSellCost;
            else
                mMYINFO.mAvatarInfo.aMoney += tItem->iSellCost;
            mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][0] = 0;
            mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][1] = 0;
            mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][2] = 0;
            mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][3] = 0;
            mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][4] = 0;
            mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][5] = 0;
            tstr = mMESSAGE.Return(141);
            mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
        }
        return;

    case 253:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tQuantity1, &tData[8], 4);
        CopyMemory(&tPage2, &tData[12], 4);
        CopyMemory(&tIndex2, &tData[16], 4);
        CopyMemory(&tXPost, &tData[20], 4);
        CopyMemory(&tYPost, &tData[24], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aHotKey[tPage2][tIndex2][0] = mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][0];
        mMYINFO.mAvatarInfo.aHotKey[tPage2][tIndex2][1] += mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][3];
        mMYINFO.mAvatarInfo.aHotKey[tPage2][tIndex2][2] = 3;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][0] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][1] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][2] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][3] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][4] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][5] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][0] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][1] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][2] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][3] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage1][tIndex1][4] = 0;
        GSOUND::Play(&mGDATA.mSOUND_5[286], 0, 100);
        return;

    case 254:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tPage2, &tData[8], 4);
        CopyMemory(&tIndex2, &tData[12], 4);
        CopyMemory(&tXPost, &tData[16], 4);
        CopyMemory(&tYPost, &tData[20], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aPetInventoryData[tIndex2] = mCHOICEUI.mItemIdx;
        return;

    case 255:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tPage2, &tData[8], 4);
        CopyMemory(&tIndex2, &tData[12], 4);
        CopyMemory(&tXPost, &tData[16], 4);
        CopyMemory(&tYPost, &tData[20], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
            return;
        }
        mMYINFO.mNetworkLock = 0;
        mCHOICEUI.InitForPick();
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][0] = mCHOICEUI.mItemIdx;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][1] = tXPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][2] = tYPost;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][3] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][4] = 0;
        mMYINFO.mAvatarInfo.aInventory[tPage2][tIndex2][5] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][0] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][1] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][2] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][3] = 0;
        mMYINFO.mAvatarInfo.aInventorySocket[tPage2][tIndex2][4] = 0;
        return;

    case 256:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        CopyMemory(&tPage2, &tData[8], 4);
        CopyMemory(&tIndex2, &tData[12], 4);
        CopyMemory(&tXPost, &tData[16], 4);
        CopyMemory(&tYPost, &tData[20], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForDown();
        }
        else
        {
            mMYINFO.mNetworkLock = 0;
            mCHOICEUI.InitForPick();
            mMYINFO.mAvatarInfo.aPetInventoryData[tIndex2] = mCHOICEUI.mItemIdx;
        }
        return;

    case 501:
        mMYINFO.mNetworkLock = 0;
        return;
    case 502:
        mMYINFO.mNetworkLock = 0;
        return;
    case 503:
        mMYINFO.mNetworkLock = 0;
        return;
    case 504:
        mMYINFO.mNetworkLock = 0;
        return;
    case 505:
        mMYINFO.mNetworkLock = 0;
        return;
    case 506:
        mMYINFO.mNetworkLock = 0;
        return;
    case 508:
        mMYINFO.mNetworkLock = 0;
        return;
    case 509:
        mMYINFO.mNetworkLock = 0;
        return;
    case 510:
        mMYINFO.mNetworkLock = 0;
        return;
    case 511:
        mMYINFO.mNetworkLock = 0;
        mMYINFO.mAvatarInfo.aSpecialState = 1;
        mAVATAR_OBJECT[0].mDATA.aSpecialState = 1;
        return;
    case 512:
        mMYINFO.mNetworkLock = 0;
        mMYINFO.mAvatarInfo.aSpecialState = 0;
        mAVATAR_OBJECT[0].mDATA.aSpecialState = 0;
        return;
    case 513:
        mMYINFO.mNetworkLock = 0;
        return;
    case 514:
        mMYINFO.mNetworkLock = 0;
        return;
    case 515:
        mMYINFO.mNetworkLock = 0;
        return;
    case 516:
        mMYINFO.mNetworkLock = 0;
        return;
    case 517:
        mMYINFO.mNetworkLock = 0;
        return;
    case 518:
        mMYINFO.mNetworkLock = 0;
        return;
    case 519:
        mMYINFO.mNetworkLock = 0;
        return;
    case 520:
        mMYINFO.mNetworkLock = 0;
        if (tResult)
        {
            if (tResult == 1)
            {
                mBASICUI.Insert1("Tribe Number Error 1~4(Server)", 2);
            }
            else if (tResult == 2)
            {
                mBASICUI.Insert1("Invalid Money 1~1000000000(Server)", 2);
            }
        }
        else
        {
            mBASICUI.Insert1("TribeBank additional Money will be saved in 10 min", 2);
        }
        return;

    case 521:
        if (tResult)
        {
            mBASICUI.Insert1("GM Command Error", mFONTCOLOR.mData[44]);
        }
        else
        {
            memcpy(&tLevel, &tData[0], 4);
            if (tLevel <= 145)
            {
                mMYINFO.mAvatarInfo.aLevel2 = 0;
                mPLAY.mAVATAR_OBJECT[0].mDATA.aLevel2 = 0;
                mMYINFO.mAvatarInfo.aGeneralExperience2 = 0;
                mMYINFO.mAvatarInfo.aLevel1 = tLevel;
                mPLAY.mAVATAR_OBJECT[0].mDATA.aLevel1 = tLevel;
                mMYINFO.mAvatarInfo.aGeneralExperience1 = mLEVEL.ReturnLevelFactor1(tLevel);
            }
            else
            {
                mMYINFO.mAvatarInfo.aLevel2 = tLevel - 145;
                mPLAY.mAVATAR_OBJECT[0].mDATA.aLevel2 = tLevel - 145;
                mMYINFO.mAvatarInfo.aLevel1 = 145;
                mPLAY.mAVATAR_OBJECT[0].mDATA.aLevel1 = 145;
                mMYINFO.mAvatarInfo.aGeneralExperience1 = 2000000000;
                mMYINFO.mAvatarInfo.aGeneralExperience2 = mLEVEL.ReturnHighExpValue(tLevel - 145);
            }
            ::mPLAY.mAVATAR_OBJECT[0].mDATA.aLifeValue = mFACTOR.GetMaxLife();
            ::mPLAY.mAVATAR_OBJECT[0].mDATA.aManaValue = mFACTOR.GetMaxMana();
        }
        mMYINFO.mNetworkLock = 0;
        return;
    case 522:
        CopyMemory(&tPage1, &tData[0], 4);
        CopyMemory(&tIndex1, &tData[4], 4);
        if (tResult)
        {
            mMYINFO.mNetworkLock = 0;
        }
        else
        {
            mMYINFO.mNetworkLock = 0;
            switch (tPage1)
            {
            case 1:
                mMYINFO.mAvatarInfo.aStr = tIndex1;
                break;
            case 2:
                mMYINFO.mAvatarInfo.aDex = tIndex1;
                break;
            case 3:
                mMYINFO.mAvatarInfo.aVit = tIndex1;
                break;
            case 4:
                mMYINFO.mAvatarInfo.aInt = tIndex1;
                break;
            default:
                break;
            }
        LABEL_353:
            mAVATAR_OBJECT[0].mDATA.aMaxLifeValue = mFACTOR.GetMaxLife();
            mAVATAR_OBJECT[0].mDATA.aMaxManaValue = mFACTOR.GetMaxMana();
        }
        return;
    case 523:
        mMYINFO.mNetworkLock = 0;
        return;
    case 524:
        mMYINFO.mNetworkLock = 0;
        if (tResult)
        {
            mBASICUI.Insert1("GM Command Error", mFONTCOLOR.mData[44]);
            return;
        }
        mMYINFO.mAvatarInfo.aLevel1 = 145;
        mMYINFO.mAvatarInfo.aLevel2 = 12;
        mMYINFO.mAvatarInfo.aGeneralExperience1 = 2000000000;
        mMYINFO.mAvatarInfo.aGeneralExperience2 = 0;
        mPLAY.mAVATAR_OBJECT[0].mDATA.aLevel1 = 145;
        mPLAY.mAVATAR_OBJECT[0].mDATA.aLevel2 = 12;
        break;
    
    case 528:
        mMYINFO.mNetworkLock = 0;
        break;

    case 529:
        mMYINFO.mNetworkLock = 0;
        if (tResult)
            mBASICUI.Insert1("Commend Error!!", mFONTCOLOR.mData[44]);
        memcpy(&tPage1, &tData[0], 4);
        sprintf(Buffer, "%d Kill User", tPage1);
        mBASICUI.Insert1(Buffer, mFONTCOLOR.mData[44]);
        break;

    case 530:
        mMYINFO.mNetworkLock = 0;
        break;

    case 900:
        mMYINFO.mNetworkLock = 0;
        if (!tResult)
        {
            mMYINFO.mNetworkLock = 0;
            CopyMemory(&tPage1, &tData[0], 4);
            CopyMemory(&tIndex1, &tData[4], 4);
            CopyMemory(&tQuantity1, &tData[8], 4);
            CopyMemory(&tPage2, &tData[12], 4);
            CopyMemory(&tXPost, &tData[20], 4);
            CopyMemory(&tYPost, &tData[24], 4);
            tItem = mITEM.Search(tPage2);
            if (tItem)
            {
                if (tItem->iSort == 2)
                    tCost = tItem->iBuyCost * tQuantity1;
                else
                    tCost = tItem->iBuyCost;
                mMYINFO.mAvatarInfo.aMoney -= tCost;
                mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][0] = tPage2;
                mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][1] = tXPost;
                mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][2] = tYPost;
                mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][3] = tQuantity1;
                mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][4] = 0;
                mMYINFO.mAvatarInfo.aInventory[tPage1][tIndex1][5] = 0;
                mMYINFO.mAvatarInfo.aKillOtherTribe -= tItem->iBuyCPCost;
                mAVATAR_OBJECT[0].mDATA.aKillOtherTribe -= tItem->iBuyCPCost;
                tstr = mMESSAGE.Return(594);
                mBASICUI.Insert1(tstr, 3);
                return;
            }
        }
        return;


    default:
        return;



    }
}
char* PLAY::ReturnTribeName(int tTribe)
{
    switch (tTribe)
    {
    case 0:
        return mMESSAGE.Return(75);
    case 1:
        return mMESSAGE.Return(76);
    case 2:
        return mMESSAGE.Return(77);
    case 3:
        return mMESSAGE.Return(78);
    default:
        return "";
    }
}

void AVATAR_OBJECT::Draw( int tDrawSort, int mIndex, float dTime)
{
    ITEM_INFO* mEquip[13];
    GMOTION* nMOTION;
    GMOTION* tMOTION;
    GMOTION* sMOTION;
    GMOBJECT* wMOBJECT;
    GMOBJECT* wxMOBJECT;
    GMOBJECT* rMOBJECT;
    char* tstr;
    int tstrlen;
    int tCostumeIndex = -1;
    int tIsTea = -1;
    int tAnimalIndex = -1;
    float tA[3];
    float tSetEffectAngle[3];
    float tRBEffectAngle[3];
    float tBookEffectAngle[3];
    float tPetEffectAngle[3];
    float tL[3];
    float tSkillCoord[3];
    float tHaloCoord[3];
    float tSetEffectCoord[3];
    float tRBEffectCoord[3];
    float tBookEffectCoord[3];
    float tPetEffectCoord[3];
    float tPartyLoc[3];
    int tFrame;
    float pFrame;
    int index01;
    int index02;
    int index03;
    int tDataIndex = -1;
    int tPetGrowStep;
    int tItemSort;
    int tPetIndex;
    int tTribeRole;
    int v36;
    int tSkillIndex;
    float tEffectLoc[3];
    float tEffectAngle[3];

    float tPShopAngle;
    D3DXMATRIX pOut;
    float v6;
    D3DXMATRIX v50;
    D3DXMATRIX v15;
    D3DXMATRIX v18;
    D3DXMATRIX v51;
    float tPShopCoord[3];
    float tPShoprAngle[3];
    float v5;

    if (!mCheckValidState || tDrawSort < 1 || tDrawSort > 2 || !mDATA.aVisibleState || !mUTIL.CheckPossibleDrawMeWithCamera(mDATA.aAction.aLocation, 20.0))
    {
        return;
    }

    // Animal Index
    if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
    {
        switch (mDATA.aAnimalNumber)
        {
        case 1301: tAnimalIndex = 0; break;
        case 1302: tAnimalIndex = 1; break;
        case 1303: tAnimalIndex = 2; break;
        case 1304: tAnimalIndex = 3; break;
        case 1305: tAnimalIndex = 4; break;
        case 1306: tAnimalIndex = 5; break;
        case 1307: tAnimalIndex = 6; break;
        case 1308: tAnimalIndex = 7; break;
        case 1309: tAnimalIndex = 8; break;
        case 1313: tAnimalIndex = 9; break;
        case 1314: tAnimalIndex = 10; break;
        case 1315: tAnimalIndex = 11; break;
        case 1316: tAnimalIndex = 43; break;//12
        case 1317: tAnimalIndex = 13; break;
        case 1318: tAnimalIndex = 14; break;
        case 1319: tAnimalIndex = 15; break;
        case 1320: tAnimalIndex = 16; break;
        case 1321: tAnimalIndex = 17; break;
        case 1322: tAnimalIndex = 18; break;
        case 1323: tAnimalIndex = 19; break;
        case 1324: tAnimalIndex = 20; break;
        case 1325: tAnimalIndex = 21; break;
        case 1326: tAnimalIndex = 22; break;
        case 1327: tAnimalIndex = 23; break;
        case 1328: tAnimalIndex = 24; break;
        case 1329: tAnimalIndex = 25; break;
        case 1330: tAnimalIndex = 26; break;
        case 1331: tAnimalIndex = 27; break;
        case 1332: tAnimalIndex = 48; break; 
        case 1333: tAnimalIndex = 50; break; 
        case 1334: tAnimalIndex = 51; break; 
        case 1335: tAnimalIndex = 49; break; 
        case 1336: tAnimalIndex = 46; break; 
        case 1337: tAnimalIndex = 47; break; 
        case 1340: tAnimalIndex = 30; break;
        case 1341: tAnimalIndex = 31; break;
        case 1338: tAnimalIndex = 28; break;
        case 1339: tAnimalIndex = 29; break;
        case 1342: tAnimalIndex = 34; break;
        case 1343: tAnimalIndex = 35; break;
        case 1344: tAnimalIndex = 36; break;
        case 1345: tAnimalIndex = 37; break;
        case 1346: tAnimalIndex = 38; break;
        case 1347: tAnimalIndex = 39; break;
        case 6500: tAnimalIndex = 60; break;
        case 6501: tAnimalIndex = 61; break;
        case 6502: tAnimalIndex = 62; break;
        case 6503: tAnimalIndex = 63; break;
        case 6504: tAnimalIndex = 64; break;
        case 6505: tAnimalIndex = 65; break;
        case 6506: tAnimalIndex = 66; break;
        case 6507: tAnimalIndex = 67; break;
        case 6508: tAnimalIndex = 68; break;
        case 6509: tAnimalIndex = 69; break;
        default: break;
        }

        if (tAnimalIndex != -1)
        {
            switch (mDATA.aAction.aSort)
            {
            case 0:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject( &mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 1:
                GSOBJECT::DisplaySObject( &mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][0], mIndex == 0);
                break;
            case 2:
            case 32:
                GSOBJECT::DisplaySObject( &mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][1], mIndex == 0);
                break;
            case 5:
            case 6:
            case 7:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 81:
            case 82:
            case 83:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 9:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 10:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 11:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 12:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 13:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 30:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 31:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 38:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 39:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 40:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 41:
            case 66:
            case 67:
            case 68:
            case 75:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 60:
            case 61:
            case 62:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 63:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 64:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            case 65:
                tFrame = GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                if (tFrame >= 1)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject(&mGDATA.mMOUNT[tAnimalIndex][0], tDrawSort, pFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, &mGDATA.mMOUNT_MOTION[tAnimalIndex][2], mIndex == 0);
                }
                break;
            default:
                break;
            }
        }
    }

    // Costume Index
    if (mDATA.aFashionNumber > 0 && !mDATA.aCostumeHide)
    {
        switch (mDATA.aFashionNumber)
        {
        case 301:
        case 302:
        case 303:
        case 346:
        case 347:
        case 348:
        case 388:
        case 389:
        case 390:
            tCostumeIndex = 0;
            break;
        case 304:
        case 305:
        case 306:
        case 349:
        case 350:
        case 351:
        case 391:
        case 392:
        case 393:
            tCostumeIndex = 1;
            break;
        case 307:
        case 308:
        case 309:
            tCostumeIndex = 2;
            break;
        case 310:
        case 311:
        case 312:
        case 352:
        case 353:
        case 354:
        case 1891:
        case 1892:
        case 1893:
            tCostumeIndex = 3;
            break;
        case 313:
        case 314:
        case 315:
            tCostumeIndex = 4;
            break;
        case 316:
        case 317:
        case 318:
        case 355:
        case 356:
        case 357:
            tCostumeIndex = 5;
            break;
        case 319:
        case 320:
        case 321:
        case 358:
        case 359:
        case 360:
            tCostumeIndex = 6;
            break;
        case 322:
        case 323:
        case 324:
        case 361:
        case 362:
        case 363:
            tCostumeIndex = 7;
            break;
        case 325:
        case 326:
        case 327:
            tCostumeIndex = 8;
            break;
        case 328:
        case 329:
        case 330:
            tCostumeIndex = 9;
            break;
        case 331:
        case 332:
        case 333:
            tCostumeIndex = 10;
            break;
        case 334:
        case 335:
        case 336:
        case 364:
        case 365:
        case 366:
            tCostumeIndex = 11;
            break;
        case 337:
        case 338:
        case 339:
        case 367:
        case 368:
        case 369:
            tCostumeIndex = 12;
            break;
        case 340:
        case 341:
        case 342:
        case 370:
        case 371:
        case 372:
            tCostumeIndex = 13;
            break;
        case 343:
        case 344:
        case 345:
        case 373:
        case 374:
        case 375:
            tCostumeIndex = 14;
            break;
        case 376:
        case 377:
        case 378:
            tCostumeIndex = 15;
            break;
        case 379:
        case 380:
        case 381:
            tCostumeIndex = 16;
            break;
        case 382:
        case 383:
        case 384:
            tCostumeIndex = 17;
            break;
        case 385:
        case 386:
        case 387:
            tCostumeIndex = 18;
            break;
        case 394:
        case 395:
        case 396:
            tCostumeIndex = 19;
            break;
        case 397:
        case 398:
        case 399:
            tCostumeIndex = 20;
            break;

        case 2146:
        case 2147:
        case 2148:
            tCostumeIndex = 21;
            break;
        case 1801:
        case 1802:
        case 1803:
            tCostumeIndex = 22;
            break;
        case 18124:
        case 18125:
        case 18126:
            tCostumeIndex = 23;
            break;
        case 18127:
        case 18128:
        case 18129:
            tCostumeIndex = 24;
            break;
        case 18130:
        case 18131:
        case 18132:
            tCostumeIndex = 25;
            break;
        case 93301:
        case 93302:
        case 93303:
            tIsTea = 1;
            tCostumeIndex = 26;
        case 93304:
        case 93305:
        case 93306:
            tIsTea = 1;
            tCostumeIndex = 27;
            break;
        case 93307:
        case 93308:
        case 93309:
            tIsTea = 1;
            tCostumeIndex = 28;
            break;
        case 93310:
        case 93311:
        case 93312:
            tIsTea = 1;
            tCostumeIndex = 29;
            break;
        case 93313:
        case 93314:
        case 93315:
            tIsTea = 1;
            tCostumeIndex = 30;
            break;
        case 93319:
        case 93320:
        case 93321:
            tIsTea = 1;
            tCostumeIndex = 31;
            break;
        case 93322:
        case 93323:
        case 93324:
            tIsTea = 1;
            tCostumeIndex = 32;
            break;
        case 93325:
        case 93326:
        case 93327:
            tIsTea = 1;
            tCostumeIndex = 33;
            break;
        case 93328:
        case 93329:
        case 93330:
            tIsTea = 1;
            tCostumeIndex = 34;
            break;
        case 93334:
        case 93335:
        case 93336:
            tIsTea = 1;
            tCostumeIndex = 35;
            break;
        case 93337:
        case 93338:
        case 93339:
            tIsTea = 1;
            tCostumeIndex = 36;
            break;
        case 93340:
        case 93341:
        case 93342:
            tIsTea = 1;
            tCostumeIndex = 37;
            break;
        case 93343:
        case 93344:
        case 93345:
            tIsTea = 1;
            tCostumeIndex = 38;
            break;
        case 93376:
        case 93377:
        case 93378:
            tIsTea = 1;
            tCostumeIndex = 39;
            break;
        case 93379:
        case 93380:
        case 93381:
            tIsTea = 1;
            tCostumeIndex = 40;
            break;

        default:
            break;
        }
    }

    // Start
    mEquip[0] = mITEM.Search(mDATA.aEquipForView[0][0]);
    mEquip[1] = mITEM.Search(mDATA.aEquipForView[1][0]);
    mEquip[2] = mITEM.Search(mDATA.aEquipForView[2][0]);
    mEquip[3] = mITEM.Search(mDATA.aEquipForView[3][0]);
    mEquip[4] = mITEM.Search(mDATA.aEquipForView[4][0]);
    mEquip[5] = mITEM.Search(mDATA.aEquipForView[5][0]);
    mEquip[6] = mITEM.Search(mDATA.aEquipForView[6][0]);
    mEquip[7] = mITEM.Search(mDATA.aEquipForView[7][0]);
    mEquip[8] = mITEM.Search(mDATA.aEquipForView[8][0]);
    mEquip[9] = mITEM.Search(mDATA.aEquipForView[9][0]);
    mEquip[10] = mITEM.Search(mDATA.aEquipForView[10][0]);
    mEquip[11] = mITEM.Search(mDATA.aEquipForView[11][0]);
    mEquip[12] = mITEM.Search(mDATA.aEquipForView[12][0]);
    if (mDATA.aAnimalAbsorbState)
    {
        if (mEquip[10])
        {
            if (mEquip[10]->iIndex >= 219 && mEquip[10]->iIndex <= 233)
            {
                if (mDATA.aAction.aSort == 32 && !(mDATA.aAction.aType % 2))
                {
                    nMOTION = mGDATA.ReturnCharacterMotion(mDATA.aPreviousTribe, mDATA.aGender, mDATA.aAction.aType, 96, mDATA.aLevel1, mDATA.aLevel2, 0);
                }
                else
                {
                    nMOTION = mGDATA.ReturnCharacterMotion(mDATA.aPreviousTribe, mDATA.aGender, mDATA.aAction.aType, mDATA.aAction.aSort, mDATA.aLevel1, mDATA.aLevel2, 0);
                }
            }
            else
            {
                nMOTION = mGDATA.ReturnCharacterMotion(mDATA.aPreviousTribe, mDATA.aGender, mDATA.aAction.aType, mDATA.aAction.aSort, mDATA.aLevel1, mDATA.aLevel2, 0);
            }
        }
        else
        {
            nMOTION = mGDATA.ReturnCharacterMotion(mDATA.aPreviousTribe, mDATA.aGender, mDATA.aAction.aType, mDATA.aAction.aSort, mDATA.aLevel1, mDATA.aLevel2, 0);
        }
    }
    else
    {
        if (mEquip[10])
        {
            if (mEquip[10]->iIndex >= 219 && mEquip[10]->iIndex <= 233)
            {
                if (mDATA.aAction.aSort == 32 && !(mDATA.aAction.aType % 2) && mDATA.aAnimalNumber == 0)
                {
                    mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
                    nMOTION = mGDATA.ReturnCharacterMotion(mDATA.aPreviousTribe, mDATA.aGender, mDATA.aAction.aType, 96, mDATA.aLevel1, mDATA.aLevel2, mDATA.aAnimalNumber);
                }
                else
                {
                    nMOTION = mGDATA.ReturnCharacterMotion(mDATA.aPreviousTribe, mDATA.aGender, mDATA.aAction.aType, mDATA.aAction.aSort, mDATA.aLevel1, mDATA.aLevel2, mDATA.aAnimalNumber);
                }
            }
            else
            {
                nMOTION = mGDATA.ReturnCharacterMotion(mDATA.aPreviousTribe, mDATA.aGender, mDATA.aAction.aType, mDATA.aAction.aSort, mDATA.aLevel1, mDATA.aLevel2, mDATA.aAnimalNumber);
            }
        }
        else
        {
            nMOTION = mGDATA.ReturnCharacterMotion(mDATA.aPreviousTribe, mDATA.aGender, mDATA.aAction.aType, mDATA.aAction.aSort, mDATA.aLevel1, mDATA.aLevel2, mDATA.aAnimalNumber);
        }
    }

    /*if (mDATA.aAnimalAbsorbState)
    {
        nMOTION = mGDATA.ReturnCharacterMotion( mDATA.aPreviousTribe, mDATA.aGender, mDATA.aAction.aType, mDATA.aAction.aSort, mDATA.aLevel1, mDATA.aLevel2, 0);
    }
    else
    {
        nMOTION = mGDATA.ReturnCharacterMotion( mDATA.aPreviousTribe, mDATA.aGender, mDATA.aAction.aType, mDATA.aAction.aSort, mDATA.aLevel1, mDATA.aLevel2, mDATA.aAnimalNumber);
    }*/

    // War Mode Disabled, Draw Entire Avatar
    if (mGAMEOPTION.tWarMode <= 0)
    {
        if (mDATA.aTribe == 3)
        {
            if (mEquip[2])
            {
                if (mEquip[2]->iDataNumber3D != 37 && mEquip[2]->iDataNumber3D != 39 && tCostumeIndex == -1)
                {
                    GSOBJECT::DisplaySObject(mGDATA.mHEADBAND_NANGIN[mDATA.aPreviousTribe][mDATA.aGender], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                }
            }
        }
        if (mDATA.aSpecialState == 1)
        {
            // Draw GM Hat

            // Draw Face
            GSOBJECT::DisplaySObject( &mGDATA.mCHARFACE[mDATA.aPreviousTribe][mDATA.aGender][mDATA.aFaceType], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
        }
        else
        {
            // Draw Hair
            if (tIsTea != 1) // Dont Draw Hair when using 2.8 Costume
            {
                GSOBJECT::DisplaySObject(&mGDATA.mCHARHAIR[mDATA.aPreviousTribe][mDATA.aGender][mDATA.aHeadType], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            }

            // Draw Face
            GSOBJECT::DisplaySObject(&mGDATA.mCHARFACE[mDATA.aPreviousTribe][mDATA.aGender][mDATA.aFaceType], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
        }

        // Draw Armor w/o costume
        if (tCostumeIndex == -1)
        {
            if (mEquip[2])
            {
                // Draw Nangin
                if (mDATA.aTribe == 3 && GSOBJECT::Load(&mGDATA.mBODY_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][mEquip[2]->iDataNumber3D], mIndex == 0))
                {
                    GSOBJECT::DisplaySObject(&mGDATA.mBODY_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][mEquip[2]->iDataNumber3D], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                }
                else // Draw Non Nangin
                {
                    GSOBJECT::DisplaySObject(&mGDATA.mBODY[mDATA.aPreviousTribe][mDATA.aGender][mEquip[2]->iDataNumber3D], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                }
            }
            else
            {
                // Draw Body
                GSOBJECT::DisplaySObject(mGDATA.mBODY[mDATA.aPreviousTribe][mDATA.aGender], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            }
            // Draw Boots
            if (mEquip[5])
            {
                if (mDATA.aTribe == 3 && GSOBJECT::Load(&mGDATA.mFEET_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][mEquip[5]->iDataNumber3D], mIndex == 0))
                {
                    GSOBJECT::DisplaySObject(&mGDATA.mFEET_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][mEquip[5]->iDataNumber3D], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                }
                else
                {
                    GSOBJECT::DisplaySObject(&mGDATA.mFEET[mDATA.aPreviousTribe][mDATA.aGender][mEquip[5]->iDataNumber3D], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                }
            }
            else
            {
                // Draw Feet
                GSOBJECT::DisplaySObject(mGDATA.mFEET[mDATA.aPreviousTribe][mDATA.aGender], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            }
        }
        else // Draw Costume
        {
            if (mDATA.aTribe == 3)
            {
                // Draw Nangin Costume
                GSOBJECT::DisplaySObject( &mGDATA.mCOSTUME_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][tCostumeIndex], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            }
            else
            {
                // Draw Normal Suit
                GSOBJECT::DisplaySObject( &mGDATA.mCOSTUME[mDATA.aPreviousTribe][mDATA.aGender][tCostumeIndex], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            }
        }
        // Draw Deco 1
        if (mEquip[9])
        {
            if (mDATA.aTribe == mDATA.aPreviousTribe)
            {
                GSOBJECT::DisplaySObject( &mGDATA.mDECO1[mDATA.aPreviousTribe][mDATA.aGender][mEquip[9]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            }
            else
            {
                GSOBJECT::DisplaySObject( &mGDATA.mDECO1_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][mEquip[9]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            }
        }
        // Draw Deco 2 or Wing Enchant
        if (mEquip[10])
        {
            if (mDATA.aAnimalNumber == 0 || mDATA.aAnimalAbsorbState == 1)
            {
                switch (mEquip[10]->iIndex)
                {
                case 219:
                case 220:
                case 221:
                    if (mDATA.aAction.aSort == 3)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][511]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                {
                                    switch (mDATA.aAction.aType)
                                    {
                                    case 0: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][520], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 2: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][522], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 4: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][524], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 6: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][526], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    }
                                }
                                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                {
                                    switch (mDATA.aAction.aType)
                                    {
                                    case 0: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][530], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 2: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][532], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 4: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][534], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 6: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][536], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    }
                                }
                                switch (mDATA.aAction.aType)
                                {
                                case 0: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][510], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                case 2: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][512], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                case 4: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][514], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                case 6: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][516], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                }
                            }
                        }
                    }
                    if (mDATA.aAction.aSort == 1)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][508]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mMYINFO.mAvatarInfo.aLevel1 + mMYINFO.mAvatarInfo.aLevel2 >= 146)
                                {
                                    if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][538], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][539], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][537], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                else
                                {
                                    if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][518], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][528], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][508], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                            }
                        }
                    }
                    if (mDATA.aAction.aSort == 2)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][509]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][519], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][529], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][509], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                            }
                        }
                    }
                    if (mDATA.aAction.aSort == 32)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][509]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][521], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][531], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][511], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                            }
                        }
                    }
                    break;

                case 222:
                case 223:
                case 224:
                    if (mDATA.aAction.aSort == 3)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][611]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                {
                                    switch (mDATA.aAction.aType)
                                    {
                                    case 0: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][620], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 2: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][622], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 4: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][624], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 6: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][626], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    }
                                }
                                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                {
                                    switch (mDATA.aAction.aType)
                                    {
                                    case 0: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][630], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 2: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][632], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 4: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][634], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 6: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][636], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    }
                                }
                                switch (mDATA.aAction.aType)
                                {
                                case 0: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][610], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                case 2: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][612], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                case 4: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][614], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                case 6: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][616], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                }
                            }
                        }
                    }
                    if (mDATA.aAction.aSort == 1)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][608]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mMYINFO.mAvatarInfo.aLevel1 + mMYINFO.mAvatarInfo.aLevel2 >= 146)
                                {
                                    if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][638], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][639], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][637], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                else
                                {
                                    if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][618], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][628], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][608], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                            }
                        }
                    }
                    if (mDATA.aAction.aSort == 2)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][609]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][619], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][629], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][609], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                            }
                        }
                    }
                    if (mDATA.aAction.aSort == 32)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][609]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][621], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][631], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][611], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                            }
                        }
                    }
                    break;

                case 225:
                case 226:
                case 227:
                    if (mDATA.aAction.aSort == 3)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][711]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                {
                                    switch (mDATA.aAction.aType)
                                    {
                                    case 0: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][720], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 2: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][722], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 4: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][724], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 6: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][726], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    }
                                }
                                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                {
                                    switch (mDATA.aAction.aType)
                                    {
                                    case 0: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][730], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 2: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][732], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 4: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][734], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 6: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][736], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    }
                                }
                                switch (mDATA.aAction.aType)
                                {
                                case 0: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][710], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                case 2: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][712], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                case 4: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][714], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                case 6: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][716], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                }
                            }
                        }
                    }
                    if (mDATA.aAction.aSort == 1)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][708]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mMYINFO.mAvatarInfo.aLevel1 + mMYINFO.mAvatarInfo.aLevel2 >= 146)
                                {
                                    if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][738], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][739], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][737], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                else
                                {
                                    if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][718], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][728], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][708], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                            }
                        }
                    }
                    if (mDATA.aAction.aSort == 2)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][709]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][719], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][729], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][709], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                            }
                        }
                    }
                    if (mDATA.aAction.aSort == 32)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][709]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][721], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][731], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][711], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                            }
                        }
                    }
                    break;

                case 228:
                case 229:
                case 230:
                    if (mDATA.aAction.aSort == 3)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][811]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                {
                                    switch (mDATA.aAction.aType)
                                    {
                                    case 0: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][820], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 2: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][822], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 4: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][824], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 6: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][826], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    }
                                }
                                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                {
                                    switch (mDATA.aAction.aType)
                                    {
                                    case 0: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][830], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 2: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][832], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 4: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][834], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 6: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][836], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    }
                                }
                                switch (mDATA.aAction.aType)
                                {
                                case 0: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][810], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                case 2: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][812], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                case 4: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][814], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                case 6: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][816], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                }
                            }
                        }
                    }
                    if (mDATA.aAction.aSort == 1)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][808]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mMYINFO.mAvatarInfo.aLevel1 + mMYINFO.mAvatarInfo.aLevel2 >= 146)
                                {
                                    if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][838], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][839], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][837], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                else
                                {
                                    if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][818], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][828], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][808], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                            }
                        }
                    }
                    if (mDATA.aAction.aSort == 2)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][809]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][819], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][829], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][809], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                            }
                        }
                    }
                    if (mDATA.aAction.aSort == 32)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][809]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][821], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][831], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][811], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                            }
                        }
                    }
                    break;

                case 231:
                case 232:
                case 233:
                    if (mDATA.aAction.aSort == 3)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][911]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                {
                                    switch (mDATA.aAction.aType)
                                    {
                                    case 0: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][920], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 2: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][922], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 4: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][924], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 6: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][926], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    }
                                }
                                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                {
                                    switch (mDATA.aAction.aType)
                                    {
                                    case 0: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][930], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 2: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][932], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 4: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][934], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    case 6: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][936], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                    }
                                }
                                switch (mDATA.aAction.aType)
                                {
                                case 0: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][910], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                case 2: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][912], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                case 4: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][914], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                case 6: GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][916], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0); break;
                                }
                            }
                        }
                    }
                    if (mDATA.aAction.aSort == 1)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][908]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mMYINFO.mAvatarInfo.aLevel1 + mMYINFO.mAvatarInfo.aLevel2 >= 146)
                                {
                                    if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][938], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][939], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][937], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                else
                                {
                                    if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][918], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                    {
                                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][928], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                    }
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][908], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                            }
                        }
                    }
                    if (mDATA.aAction.aSort == 2)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][909]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][919], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][929], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][909], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                            }
                        }
                    }
                    if (mDATA.aAction.aSort == 32)
                    {
                        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][909]);
                        if (tFrame > 0)
                        {
                            tEffectLoc[0] = mDATA.aAction.aLocation[0];
                            tEffectLoc[1] = mDATA.aAction.aLocation[1];
                            tEffectLoc[2] = mDATA.aAction.aLocation[2];
                            tEffectAngle[0] = 0.0f;
                            tEffectAngle[1] = mDATA.aAction.aFront;
                            tEffectAngle[2] = 0.0f;
                            if (!(mDATA.aAction.aType % 2))
                            {
                                if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33 && mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) < 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][921], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                                {
                                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][931], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                                }
                                GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][911], tDrawSort, mDATA.aAction.aFrame, tEffectLoc, tEffectAngle, 0);
                            }
                        }
                    }
                    break;

                default:
                    if (tCostumeIndex == -1)
                    {
                        // Draw Deco
                        if (mDATA.aEquipForView[10][0] >= 2355 && mDATA.aEquipForView[10][0] <= 2372)
                        {
                            if (mUTIL.Return4thValue(mDATA.aEquipForView[10][1]) > 0)
                            {
                                GSOBJECT::DisplaySObject(&mGDATA.mDECO2[mDATA.aPreviousTribe][mDATA.aGender][21], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                            }
                            else
                            {
                                GSOBJECT::DisplaySObject(&mGDATA.mDECO2[mDATA.aPreviousTribe][mDATA.aGender][mEquip[10]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                            }
                        }
                        else if (mDATA.aEquipForView[10][0] >= 2379 && mDATA.aEquipForView[10][0] <= 2381)
                        {
                            if (mUTIL.Return4thValue(mDATA.aEquipForView[10][1]) > 0)
                            {
                                GSOBJECT::DisplaySObject(&mGDATA.mDECO2[mDATA.aPreviousTribe][mDATA.aGender][21], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                            }
                            else
                            {
                                GSOBJECT::DisplaySObject(&mGDATA.mDECO2[mDATA.aPreviousTribe][mDATA.aGender][mEquip[10]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                            }
                        }
                        else if (mUTIL.ReturnItemSort2(mDATA.aEquipForView[10][0]) == 2)
                        {
                            if (mDATA.aTribe == mDATA.aPreviousTribe)
                            {
                                GSOBJECT::DisplaySObject(&mGDATA.mDECO2[mDATA.aPreviousTribe][mDATA.aGender][mEquip[10]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                            }
                            else
                            {
                                GSOBJECT::DisplaySObject(&mGDATA.mDECO2_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][mEquip[10]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                            }
                        }
                        else if (mDATA.aTribe == mDATA.aPreviousTribe)
                        {
                            GSOBJECT::DisplaySObject(&mGDATA.mDECO2[mDATA.aPreviousTribe][mDATA.aGender][mEquip[10]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                        }
                        else
                        {
                            GSOBJECT::DisplaySObject(&mGDATA.mDECO2_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][mEquip[10]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                        }

                        // Draw Enchant
                        if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
                        {
                            if (mDATA.aEquipForView[10][0] == 216 || mDATA.aEquipForView[10][0] == 217 || mDATA.aEquipForView[10][0] == 218)
                            {
                                GSOBJECT_OLD::DisplaySObject(&mGDATA.mENCHANT_GLOW[mDATA.aPreviousTribe][mDATA.aGender][1][5][3], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                            }
                            else
                            {
                                GSOBJECT_OLD::DisplaySObject(&mGDATA.mENCHANT_GLOW[mDATA.aPreviousTribe][mDATA.aGender][1][5][1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                            }
                        }
                        else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33)
                        {
                            if (mDATA.aEquipForView[10][0] == 216 || mDATA.aEquipForView[10][0] == 217 || mDATA.aEquipForView[10][0] == 218)
                            {
                                GSOBJECT_OLD::DisplaySObject(&mGDATA.mENCHANT_GLOW[mDATA.aPreviousTribe][mDATA.aGender][1][5][2], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                            }
                            else
                            {
                                GSOBJECT_OLD::DisplaySObject(mGDATA.mENCHANT_GLOW[mDATA.aPreviousTribe][mDATA.aGender][1][5], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                            }
                        }
                    }
                    break;
                }
            }

            //if (tCostumeIndex == -1)
            //{
            //    // Draw Deco
            //    if (mDATA.aEquipForView[10][0] >= 2355 && mDATA.aEquipForView[10][0] <= 2372)
            //    {
            //        if (mUTIL.Return4thValue(mDATA.aEquipForView[10][1]) > 0)
            //        {
            //            GSOBJECT::DisplaySObject(&mGDATA.mDECO2[mDATA.aPreviousTribe][mDATA.aGender][21], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            //        }
            //        else
            //        {
            //            GSOBJECT::DisplaySObject(&mGDATA.mDECO2[mDATA.aPreviousTribe][mDATA.aGender][mEquip[10]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            //        }
            //    }
            //    else if (mDATA.aEquipForView[10][0] >= 2379 && mDATA.aEquipForView[10][0] <= 2381)
            //    {
            //        if (mUTIL.Return4thValue(mDATA.aEquipForView[10][1]) > 0)
            //        {
            //            GSOBJECT::DisplaySObject(&mGDATA.mDECO2[mDATA.aPreviousTribe][mDATA.aGender][21], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            //        }
            //        else
            //        {
            //            GSOBJECT::DisplaySObject(&mGDATA.mDECO2[mDATA.aPreviousTribe][mDATA.aGender][mEquip[10]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            //        }
            //    }
            //    else if (mUTIL.ReturnItemSort2(mDATA.aEquipForView[10][0]) == 2)
            //    {
            //        if (mDATA.aTribe == mDATA.aPreviousTribe)
            //        {
            //            GSOBJECT::DisplaySObject(&mGDATA.mDECO2[mDATA.aPreviousTribe][mDATA.aGender][mEquip[10]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            //        }
            //        else
            //        {
            //            GSOBJECT::DisplaySObject(&mGDATA.mDECO2_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][mEquip[10]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            //        }
            //    }
            //    else if (mDATA.aTribe == mDATA.aPreviousTribe)
            //    {
            //        GSOBJECT::DisplaySObject(&mGDATA.mDECO2[mDATA.aPreviousTribe][mDATA.aGender][mEquip[10]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            //    }
            //    else
            //    {
            //        GSOBJECT::DisplaySObject(&mGDATA.mDECO2_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][mEquip[10]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            //    }

            //    // Draw Enchant
            //    if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) == 40)
            //    {
            //        if (mDATA.aEquipForView[10][0] == 216 || mDATA.aEquipForView[10][0] == 217 || mDATA.aEquipForView[10][0] == 218)
            //        {
            //            GSOBJECT_OLD::DisplaySObject(&mGDATA.mENCHANT_GLOW[mDATA.aPreviousTribe][mDATA.aGender][1][5][3], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            //        }
            //        else
            //        {
            //            GSOBJECT_OLD::DisplaySObject(&mGDATA.mENCHANT_GLOW[mDATA.aPreviousTribe][mDATA.aGender][1][5][1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            //        }
            //    }
            //    else if (mUTIL.ReturnISValue(mDATA.aEquipForView[10][1]) >= 33)
            //    {
            //        if (mDATA.aEquipForView[10][0] == 216 || mDATA.aEquipForView[10][0] == 217 || mDATA.aEquipForView[10][0] == 218)
            //        {
            //            GSOBJECT_OLD::DisplaySObject(&mGDATA.mENCHANT_GLOW[mDATA.aPreviousTribe][mDATA.aGender][1][5][2], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            //        }
            //        else
            //        {
            //            GSOBJECT_OLD::DisplaySObject(mGDATA.mENCHANT_GLOW[mDATA.aPreviousTribe][mDATA.aGender][1][5], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            //        }
            //    }
            //}
        }
        if (mEquip[11])
        {
            if (mDATA.aTribe == mDATA.aPreviousTribe)
            {
                GSOBJECT::DisplaySObject( &mGDATA.mDECO3[mDATA.aPreviousTribe][mDATA.aGender][mEquip[11]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            }
            else
            {
                GSOBJECT::DisplaySObject( &mGDATA.mDECO3_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][mEquip[11]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            }
        }
        if (mEquip[12])
        {
            if (mDATA.aTribe == mDATA.aPreviousTribe)
            {
                GSOBJECT::DisplaySObject( &mGDATA.mDECO4[mDATA.aPreviousTribe][mDATA.aGender][mEquip[12]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            }
            else
            {
                GSOBJECT::DisplaySObject( &mGDATA.mDECO4_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][mEquip[12]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            }
        }

        // Draw Weapon
    DRAWGENERAL:
        if (mEquip[7])
        {
            switch (mEquip[7]->iSort)
            {
            case 13:
            case 16:
            case 19:
                GSOBJECT::DisplaySObject(&mGDATA.mWEAPON_1[mDATA.aPreviousTribe][mDATA.aGender][mEquip[7]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                break;
            case 14:
            case 17:
            case 20:
                GSOBJECT::DisplaySObject(&mGDATA.mWEAPON_2[mDATA.aPreviousTribe][mDATA.aGender][mEquip[7]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                break;
            case 15:
            case 18:
            case 21:
                GSOBJECT::DisplaySObject(&mGDATA.mWEAPON_3[mDATA.aPreviousTribe][mDATA.aGender][mEquip[7]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                if (mDATA.aPreviousTribe == 2)
                {
                    memset(&tA, 0, sizeof(tA));
                    GSOBJECT::GetSObjectCoord(mGDATA.mWEAPON_3_EFFECT[mDATA.aPreviousTribe][mDATA.aGender], 2, &tL[0], mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, nMOTION, mIndex == 0);
                    GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[28], tDrawSort, 0.0, &tL[0], &tA[0], 0);
                }
                else
                {
                    memset(&tA, 0, sizeof(tA));
                    GSOBJECT::GetSObjectCoord(mGDATA.mWEAPON_3_EFFECT[mDATA.aPreviousTribe][mDATA.aGender], 2, &tL[0], mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, nMOTION, mIndex == 0);
                    GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[27], tDrawSort, 0.0, &tL[0], &tA[0], 0);

                    GSOBJECT::GetSObjectCoord(mGDATA.mWEAPON_3_EFFECT[mDATA.aPreviousTribe][mDATA.aGender], 3, &tL[0], mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, nMOTION, mIndex == 0);
                    GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[27], tDrawSort, 0.0, &tL[0], &tA[0], 0);
                }
                break;
            }
            // Draw Weapon Enchant
            if (mEquip[7]->iCheckItemSet == 3)
            {
                if (mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) >= 0 && mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) < 5)
                {
                    tDataIndex = 1;
                }
                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) >= 5 && mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) < 9)
                {
                    tDataIndex = 6;
                }
                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) >= 9 && mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) < 11)
                {
                    tDataIndex = 7;
                }
                else if(mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) >= 12)
                {
                    tDataIndex = 8;
                }
            }
            else if (mUTIL.ReturnItemSort2(mDATA.aEquipForView[7][0]) == 1 || mUTIL.ReturnItemSort2(mDATA.aEquipForView[7][0]) == 4)
            {
                if (mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) >= 3 && mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) < 6)
                {
                    tDataIndex = 0;
                }
                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) >= 6 && mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) < 9)
                {
                    tDataIndex = 1;
                }
                else if (mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) >= 9 && mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) < 12)
                {
                    tDataIndex = 2;
                }
                else if(mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) >= 12)
                {
                    tDataIndex = 3;
                }
            }
            else if (mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) >= 1 && mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) < 10)
            {
                tDataIndex = 0;
            }
            else if (mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) >= 10 && mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) < 20)
            {
                tDataIndex = 1;
            }
            else if (mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) >= 20 && mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) < 30)
            {
                tDataIndex = 2;
            }
            else if (mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) >= 30 && mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) < 40)
            {
                tDataIndex = 3;
            }
            else if (mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) == 40)
            {
                tDataIndex = 4;
            }
            else if (mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) >= 41 && mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) < 44)
            {
                tDataIndex = 5;
            }
            else if (mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) >= 44 && mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) < 47)
            {
                tDataIndex = 6;
            }
            else if (mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) >= 47 && mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) < 50)
            {
                tDataIndex = 7;
            }
            else if (mUTIL.ReturnISValue(mDATA.aEquipForView[7][1]) == 50)
            {
                tDataIndex = 8;
            }
            if (tDataIndex != -1)
            {
                GSOBJECT_OLD::DisplaySObject(&mGDATA.mENCHANT_GLOW[mDATA.aPreviousTribe][mDATA.aGender][mEquip[7]->iType - 1][mEquip[7]->iSort - 1][tDataIndex], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            }
        }
        // Draw Cape w/o costume
        if (mEquip[1] && tCostumeIndex == -1)
        {
            if (mEquip[1]->iSort == 8)
            {
                GSOBJECT::DisplaySObject( &mGDATA.mCAPE1[mDATA.aPreviousTribe][mDATA.aGender][mEquip[1]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            }
            else if (mEquip[1]->iSort == 29)
            {
                GSOBJECT::DisplaySObject( &mGDATA.mCAPE2[mDATA.aPreviousTribe][mDATA.aGender][mEquip[1]->iDataNumber3D - 1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
            }
        }
        // Draw Pet
        if (mEquip[8])
        {
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                tL[0] = mDATA.aAction.aLocation[0];
                tL[1] = mDATA.aAction.aLocation[1] + 35.0f;
                tL[2] = mDATA.aAction.aLocation[2];
            }
            else
            {
                tL[0] = mDATA.aAction.aLocation[0];
                tL[1] = mDATA.aAction.aLocation[1] + 25.0f;
                tL[2] = mDATA.aAction.aLocation[2];
            }
            tA[0] = 0.0f;
            tA[1] = mDATA.aAction.aFront;
            tA[2] = 0.0f;
            tPetGrowStep = (int)mPET.ReturnGrowStep(mDATA.aEquipForView[8][0], mDATA.aEquipForView[8][1]);
            if (!mPET.CheckIfPetMaxGrow(mDATA.aEquipForView[8][0], mDATA.aEquipForView[8][1]))
            {
                tPetGrowStep = 5;
            }
            tItemSort = mUTIL.ReturnItemSort2(mDATA.aEquipForView[8][0]);
            if (tItemSort == 5 || tItemSort == 6)
            {
                tPetGrowStep = 0;
            }
            tPetIndex = 0;
            if (tItemSort == 5 || tItemSort == 6)
            {
                tMOTION = &mGDATA.mPET_MOTION[mEquip[8]->iDataNumber3D - 1][tPetGrowStep][tPetIndex];
                tFrame = GMOTION::GetTotalFrameNum(tMOTION, mIndex == 0);
                if (tFrame > 0)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject( &mGDATA.mPET[mEquip[8]->iDataNumber3D - 1][tPetGrowStep][0], tDrawSort, pFrame, &tL[0], tA[1], 10.0, tMOTION, mIndex == 0);
                }
            }
            else
            {
                tMOTION = &mGDATA.mPET_MOTION[mEquip[8]->iDataNumber3D - 1][tPetGrowStep][0];
                tFrame = GMOTION::GetTotalFrameNum(tMOTION, mIndex == 0);
                if (tFrame > 0)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject( &mGDATA.mPET[mEquip[8]->iDataNumber3D - 1][tPetGrowStep][0], tDrawSort, pFrame, &tL[0], tA[1], 10.0, tMOTION, mIndex == 0);
                }
            }
        }
        // Draw FL/VFL Decoration
        tTribeRole = mPLAY.ReturnTribeRole(mDATA.aName, mDATA.aTribe);
        if (tTribeRole == 1)
        {
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                tL[0] = mDATA.aAction.aLocation[0];
                tL[1] = mDATA.aAction.aLocation[1] + 27.0;
                tL[2] = mDATA.aAction.aLocation[2];
                if (!mDATA.aGender)
                {
                    tL[1] = tL[1] + 1.0;
                }
            }
            else
            {
                tL[0] = mDATA.aAction.aLocation[0];
                tL[1] = mDATA.aAction.aLocation[1] + 21.0;
                tL[2] = mDATA.aAction.aLocation[2];
                if (!mDATA.aGender)
                {
                    tL[1] = tL[1] + 1.0;
                }
            }
            if (mDATA.aTribe == 3)
            {
                GSOBJECT::DisplaySObject( mGDATA.mTRIBELEADER_CAPE_NANGIN[mDATA.aPreviousTribe][mDATA.aGender], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                sMOTION = &mGDATA.mTRIBELEADER_HEADGEARNANGIN_MOTION[mDATA.aPreviousTribe][mDATA.aGender];
                tFrame = GMOTION::GetTotalFrameNum(sMOTION, mIndex == 0);
                if (tFrame > 0)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject( mGDATA.mTRIBELEADER_HEADGEARNANGIN[mDATA.aPreviousTribe][mDATA.aGender], tDrawSort, pFrame, &tL[0], mDATA.aAction.aFront, 10.0, sMOTION, mIndex == 0);
                }
            }
            else
            {
                GSOBJECT::DisplaySObject( mGDATA.mTRIBELEADER_CAPE[mDATA.aPreviousTribe][mDATA.aGender], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                sMOTION = &mGDATA.mTRIBELEADER_HEADGEAR_MOTION[mDATA.aPreviousTribe][mDATA.aGender];
                tFrame = GMOTION::GetTotalFrameNum(sMOTION, mIndex == 0);
                if (tFrame > 0)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject( mGDATA.mTRIBELEADER_HEADGEAR[mDATA.aPreviousTribe][mDATA.aGender], tDrawSort, pFrame, &tL[0], mDATA.aAction.aFront, 10.0, sMOTION, mIndex == 0);
                }
            }
        }
        else if (tTribeRole == 2)
        {
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                tL[0] = mDATA.aAction.aLocation[0];
                tL[1] = mDATA.aAction.aLocation[1] + 27.0;
                tL[2] = mDATA.aAction.aLocation[2];
                if (!mDATA.aGender)
                {
                    tL[1] = tL[1] + 1.0;
                }
            }
            else
            {
                tL[0] = mDATA.aAction.aLocation[0];
                tL[1] = mDATA.aAction.aLocation[1] + 21.0;
                tL[2] = mDATA.aAction.aLocation[2];
                if (!mDATA.aGender)
                {
                    tL[1] = tL[1] + 1.0;
                }
            }
            if (mDATA.aTribe == 3)
            {
                GSOBJECT::DisplaySObject( &mGDATA.mTRIBELEADER_CAPE_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                sMOTION = &mGDATA.mTRIBELEADER_HEADGEARNANGIN_MOTION[mDATA.aPreviousTribe][mDATA.aGender];
                tFrame = GMOTION::GetTotalFrameNum(sMOTION, mIndex == 0);
                if (tFrame > 0)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject( &mGDATA.mTRIBELEADER_HEADGEARNANGIN[mDATA.aPreviousTribe][mDATA.aGender][1], tDrawSort, pFrame, &tL[0], mDATA.aAction.aFront, 10.0, sMOTION, mIndex == 0);
                }
            }
            else
            {
                GSOBJECT::DisplaySObject( &mGDATA.mTRIBELEADER_CAPE[mDATA.aPreviousTribe][mDATA.aGender][1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                sMOTION = &mGDATA.mTRIBELEADER_HEADGEAR_MOTION[mDATA.aPreviousTribe][mDATA.aGender];
                tFrame = GMOTION::GetTotalFrameNum(sMOTION, mIndex == 0);
                if (tFrame > 0)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::DisplaySObject( &mGDATA.mTRIBELEADER_HEADGEAR[mDATA.aPreviousTribe][mDATA.aGender][1], tDrawSort, pFrame, &tL[0], mDATA.aAction.aFront, 10.0, sMOTION, mIndex == 0);
                }
            }
        }
        // Draw Complete Legendary Vigil Deco
        v36 = 0;
        for (index01 = 0; index01 < 13; ++index01)
        {
            if (mEquip[index01] && (!index01 || index01 == 2 || index01 == 3 || index01 == 4 || index01 == 5 || index01 == 7) && (mUTIL.ReturnItemSort(mEquip[index01]) == 1 || mUTIL.ReturnItemSort(mEquip[index01]) == 4))
            {
                ++v36;
            }
        }
        if (v36 == 6)
        {
            GSOBJECT::DisplaySObject( mGDATA.mLEGENDSET_VIGIL_EFFECT[mDATA.aPreviousTribe][mDATA.aGender], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
        }

        // Draw GM Hat
        if (mDATA.aSpecialState == 1)
        {
            GSOBJECT::DisplaySObject( mGDATA.mGM_HAT[mDATA.aPreviousTribe][mDATA.aGender], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
        }

        // Draw Skill Effects
        tL[0] = mDATA.aAction.aLocation[0];
        tL[1] = mDATA.aAction.aLocation[1];
        tL[2] = mDATA.aAction.aLocation[2];
        tA[0] = 0.0;
        tA[1] = mDATA.aAction.aFront;
        tA[2] = 0.0;
        if (mGAMEOPTION.tDisplaySkillEffect == 1)
        {
            switch (mDATA.aAction.aSort)
            {
            case 0:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][1], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][1], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 5:
                tSkillIndex = -1;
                switch (mDATA.aAction.aType)
                {
                case 3:
                    tSkillIndex = 3;
                    break;
                case 5:
                    tSkillIndex = 7;
                    break;
                case 7:
                    tSkillIndex = 11;
                    break;
                }
                if (tSkillIndex != -1)
                {
                    if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                    {
                        GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                    else
                    {
                        GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                    
                }
                break;
            case 6:
                tSkillIndex = -1;
                switch (mDATA.aAction.aType)
                {
                case 3:
                    tSkillIndex = 4;
                    break;
                case 5:
                    tSkillIndex = 8;
                    break;
                case 7:
                    tSkillIndex = 12;
                    break;
                }
                if (tSkillIndex != -1)
                {
                    if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                    {
                        GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                    else
                    {
                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                }
                break;
            case 7:
                tSkillIndex = -1;
                switch (mDATA.aAction.aType)
                {
                case 3:
                    tSkillIndex = 5;
                    break;
                case 5:
                    tSkillIndex = 9;
                    break;
                case 7:
                    tSkillIndex = 13;
                    break;
                }
                if (tSkillIndex != -1)
                {
                    if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                    {
                        GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                    else
                    {
                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                }
                break;
            case 11:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][20], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][20], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 14:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][15], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][15], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 15:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][16], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][16], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 16:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][22], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][22], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 31:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][18], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][18], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 38:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][19], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][19], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 39:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][21], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][21], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 41:
                tSkillIndex = 24;
                if (mDATA.mSpecialSkillState == 2)
                {
                    tSkillIndex = 506;
                }
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
                tSkillIndex = 12 * (mDATA.aAction.aSort - 42) + 32;
                if (mDATA.aAction.aSort == 44 && mUTIL.CheckSpecialSkillState(0, 91383, mDATA.aAction.aSkillNumber, -1, -1, -1) == 1)
                {
                    tSkillIndex = 493;
                }
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
                tSkillIndex = 12 * (mDATA.aAction.aSort - 48) + 93;
                if (mDATA.aAction.aSort == 50 && mUTIL.CheckSpecialSkillState(0, 91383, mDATA.aAction.aSkillNumber, -1, -1, -1) == 1)
                {
                    tSkillIndex = 494;
                }
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 54:
                if (!mDATA.aAnimalNumber || mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][154], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 55:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][190], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][190], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 56:
                tSkillIndex = 226;
                if (mUTIL.CheckSpecialSkillState(0, 91383, mDATA.aAction.aSkillNumber, -1, -1, -1) == 1)
                {
                    tSkillIndex = 494;
                }
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 57:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][238], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][238], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 58:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][274], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][274], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 60:
            case 61:
            case 62:
                tSkillIndex = 2 * mDATA.aAction.aSort - 94;
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 64:
                tSkillIndex = -1;
                switch (mDATA.aAction.aSkillNumber)
                {
                case 76:
                    tSkillIndex = 311;
                    break;
                case 77:
                    tSkillIndex = 314;
                    break;
                case 78:
                    tSkillIndex = 317;
                    break;
                case 79:
                    tSkillIndex = 320;
                    break;
                case 80:
                    tSkillIndex = 323;
                    break;
                case 81:
                    tSkillIndex = 326;
                    break;
                default:
                    break;
                }
                if (tSkillIndex != -1)
                {
                    if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                    {
                        GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                    else
                    {
                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                }
                break;
            case 65:
                tSkillIndex = -1;
                switch (mDATA.aAction.aSkillNumber)
                {
                case 76:
                    tSkillIndex = 312;
                    break;
                case 77:
                    tSkillIndex = 315;
                    break;
                case 78:
                    tSkillIndex = 318;
                    break;
                case 79:
                    tSkillIndex = 321;
                    break;
                case 80:
                    tSkillIndex = 324;
                    break;
                case 81:
                    tSkillIndex = 327;
                    break;
                default:
                    break;
                }
                if (tSkillIndex != -1)
                {
                    if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                    {
                        GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                    else
                    {
                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                }
                if (mDATA.aAction.aSkillValue == 1)
                {
                    tSkillIndex = -1;
                    switch (mDATA.aAction.aSkillNumber)
                    {
                    case 76:
                        tSkillIndex = 30;
                        break;
                    case 77:
                        tSkillIndex = 31;
                        break;
                    case 78:
                        tSkillIndex = 32;
                        break;
                    case 79:
                        tSkillIndex = 33;
                        break;
                    case 80:
                        tSkillIndex = 34;
                        break;
                    case 81:
                        tSkillIndex = 35;
                        break;
                    default:
                        break;
                    }
                    if (tSkillIndex != -1)
                    {
                        GMOBJECT::DisplayMObject( &mGDATA.mMODEL3[tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                }
                break;
            case 66:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][329], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][329], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 67:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][330], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][330], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 68:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][332], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][332], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 69:
            case 70:
                tSkillIndex = 12 * (mDATA.aAction.aSort - 69) + 334;
                if (mDATA.aAction.aSort == 70 && mUTIL.CheckSpecialSkillState(0, 91384, mDATA.aAction.aSkillNumber, mDATA.aAction.aTargetObjectSort, mDATA.aAction.aTargetObjectIndex, mDATA.aAction.aTargetObjectUniqueNumber) == 1)
                {
                    tSkillIndex = 496;
                }
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 71:
            case 72:
                tSkillIndex = 12 * (mDATA.aAction.aSort - 71) + 358;
                if (mDATA.aAction.aSort == 72 && mUTIL.CheckSpecialSkillState(0, 91384, mDATA.aAction.aSkillNumber, mDATA.aAction.aTargetObjectSort, mDATA.aAction.aTargetObjectIndex, mDATA.aAction.aTargetObjectUniqueNumber) == 1)
                {
                    tSkillIndex = 497;
                }
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 73:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][382], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][382], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 74:
                tSkillIndex = 418;
                if (mUTIL.CheckSpecialSkillState(0, 91384, mDATA.aAction.aSkillNumber, mDATA.aAction.aTargetObjectSort, mDATA.aAction.aTargetObjectIndex, mDATA.aAction.aTargetObjectUniqueNumber) == 1)
                {
                    tSkillIndex = 497;
                }
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 75:
                tSkillIndex = -1;
                switch (mDATA.aAction.aSkillNumber)
                {
                case 103:
                    tSkillIndex = 454;
                    break;
                case 104:
                    tSkillIndex = 457;
                    break;
                case 105:
                    tSkillIndex = 459;
                    break;
                }
                if (tSkillIndex != -1)
                {
                    if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                    {
                        GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                    else
                    {
                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                }
                break;
            case 76:
                tSkillIndex = -1;
                switch (mDATA.aAction.aSkillNumber)
                {
                case 106:
                case 108:
                case 110:
                    tSkillIndex = 462;
                    break;
                case 107:
                case 109:
                case 111:
                    tSkillIndex = 464;
                    break;
                default:
                    break;
                }
                if (tSkillIndex != -1)
                {
                    if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                    {
                        GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                    else
                    {
                        GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                }
                break;
            case 81:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][475], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][475], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 82:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][476], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][476], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 83:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][477], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][477], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 85:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][478], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][478], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 86:
                tSkillIndex = 479;
                if (mUTIL.CheckSpecialSkillState(0, 91385, mDATA.aAction.aSkillNumber, -1, -1, -1) == 1)
                {
                    tSkillIndex = 501;
                }
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 87:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][480], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][480], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 88:
                tSkillIndex = 481;
                if (mUTIL.CheckSpecialSkillState(0, 91385, mDATA.aAction.aSkillNumber, -1, -1, -1) == 1)
                {
                    tSkillIndex = 502;
                }
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 89:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][482], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][482], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 90:
                tSkillIndex = 485;
                if (mUTIL.CheckSpecialSkillState(0, 91385, mDATA.aAction.aSkillNumber, -1, -1, -1) == 1)
                {
                    tSkillIndex = 503;
                }
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 91:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][488], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][488], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 92:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][489], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][489], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            case 93:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][490], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    if (mDATA.mFishingState)
                    {
                        GMOBJECT::DisplayMObject( &mGDATA.mMODEL3[226], tDrawSort, mDATA.aAction.aFrame, mDATA.mFishingLocation, &tA[0], 0);
                    }
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][490], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    if (mDATA.mFishingState)
                    {
                        GMOBJECT::DisplayMObject( &mGDATA.mMODEL3[226], tDrawSort, mDATA.aAction.aFrame, mDATA.mFishingLocation, &tA[0], 0);
                    }
                }
                break;
            case 94:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][491], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    if (mDATA.mFishingState)
                    {
                        GMOBJECT::DisplayMObject( &mGDATA.mMODEL3[228], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][491], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    if (mDATA.mFishingState)
                    {
                        GMOBJECT::DisplayMObject( &mGDATA.mMODEL3[228], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                    }
                }
                break;
            case 95:
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][492], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                else
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][492], tDrawSort, mDATA.aAction.aFrame, &tL[0], &tA[0], 0);
                }
                break;
            default:
                break;
            }
            // Draw Buff Effects
            for (index01 = 0; index01 < MAX_AVATAR_EFFECT_SORT_NUM; ++index01)
            {
                if (mDATA.aEffectValueForView[index01] >= 1 && (index01 < 17 || index01 > 28))
                {
                    tSkillIndex = index01;
                    if (index01 == 11 && mMYINFO.mMixSkillWaitingTime[0] > 0)
                    {
                        tSkillIndex = 15;
                    }
                    if (tSkillIndex == 13 && mMYINFO.mMixSkillWaitingTime[1] > 0)
                    {
                        tSkillIndex = 16;
                    }
                    if (tSkillIndex == 29)
                    {
                        tSkillIndex = 17;
                    }
                    else if (tSkillIndex == 30)
                    {
                        tSkillIndex = 18;
                    }
                    tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mSKILL_BUFF_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex]);
                    if (tFrame >= 1)
                    {
                        pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                        if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                        {
                            tSkillCoord[0] = tL[0];
                            tSkillCoord[1] = tL[1] + 7.0;
                            tSkillCoord[2] = tL[2];
                            if (mDATA.aPreviousTribe == 2 && tSkillIndex == 3)
                            {
                                tSkillCoord[1] = tL[1] + 14.0;
                            }
                            GMOBJECT::DisplayMObject( &mGDATA.mSKILL_BUFF_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, pFrame, &tSkillCoord[0], &tA[0], 0);
                        }
                        else
                        {
                            GMOBJECT::DisplayMObject( &mGDATA.mSKILL_BUFF_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][tSkillIndex], tDrawSort, pFrame, &tL[0], &tA[0], 0);
                        }
                    }
                }
            }
        }

        // Draw Party Buffs
        if (mDATA.aAction.aSort == 64 && mDATA.aAction.aSkillValue == 1)
        {
            if (!strcmp(mDATA.aPartyName, mMYINFO.mAvatarInfo.aPartyName))
            {
                tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[170]);
                if (tFrame > 0)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[170], tDrawSort, pFrame, &tL[0], &tA[0], 0);
                    for (index01 = 0; index01 < 4; ++index01)
                    {
                        if (mPLAY.GetPartySkillLocation(mDATA.aAction.aFront, mDATA.aAction.aLocation, mDATA.aAction.aSkillNumber, index01, tPartyLoc))
                        {
                            GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[170], tDrawSort, pFrame, &tPartyLoc[0], &tA[0], 0);
                        }
                    }
                }
            }
            else
            {
                tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[29]);
                if (tFrame > 0)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[29], tDrawSort, pFrame, &tL[0], &tA[0], 0);
                    for (index01 = 0; index01 < 4; ++index01)
                    {
                        if (mPLAY.GetPartySkillLocation( mDATA.aAction.aFront, mDATA.aAction.aLocation, mDATA.aAction.aSkillNumber, index01, tPartyLoc))
                        {
                            GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[29], tDrawSort, pFrame, &tPartyLoc[0], &tA[0], 0);
                        }
                    }
                }
            }
        }

        // Draw Halo
        if (mDATA.aHalo > 0)
        {
            if (mDATA.aGender)
            {
                tDataIndex = (mDATA.aHalo - 1) / 8 + 183;
                if (tDataIndex > 194)
                {
                    tDataIndex = 194;
                }
            }
            else
            {
                tDataIndex = (mDATA.aHalo - 1) / 8 + 171;
                if (tDataIndex > 182)
                {
                    tDataIndex = 182;
                }
            }
            tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[tDataIndex]);
            if (tFrame > 0)
            {
                pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                tHaloCoord[0] = tL[0];
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    tHaloCoord[1] = tL[1] + 7.0;
                }
                else
                {
                    tHaloCoord[1] = tL[1];
                }
                tHaloCoord[2] = tL[2];
                GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[tDataIndex], tDrawSort, pFrame, &tHaloCoord[0], &tA[0], 0);
            }
        }

        // Draw Dragon
        /*{
            tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mDRAGON_EFFECT[1]);
            if (tFrame > 1)
            {
                pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                tHaloCoord[0] = tL[0];
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                    tHaloCoord[1] = tL[1] + 7.0;
                else
                    tHaloCoord[1] = tL[1];
                tHaloCoord[2] = tL[2];
                GMOBJECT::DisplayMObject(&mGDATA.mDRAGON_EFFECT[1], tDrawSort, pFrame, &mDATA.aAction.aLocation[0], &tA[0], 0);
            }
        }*/

        // Draw Set Effect
        if (mUTIL.GetWarlordState(mDATA.aEquipForView) > 0)
        {
            wMOBJECT = 0;
            wxMOBJECT = 0;
            switch (mUTIL.GetWarlordState(mDATA.aEquipForView) % 10)
            {
            case 0:
                wMOBJECT = &mGDATA.mMODEL3[206];
                wxMOBJECT = &mGDATA.mMODEL3[263];
                break;
            case 1:
                wMOBJECT = &mGDATA.mMODEL3[197];
                break;
            case 2:
                wMOBJECT = &mGDATA.mMODEL3[198];
                break;
            case 3:
                wMOBJECT = &mGDATA.mMODEL3[199];
                break;
            case 4:
                wMOBJECT = &mGDATA.mMODEL3[200];
                break;
            case 5:
                wMOBJECT = &mGDATA.mMODEL3[201];
                break;
            case 6:
                wMOBJECT = &mGDATA.mMODEL3[202];
                break;
            case 7:
                wMOBJECT = &mGDATA.mMODEL3[203];
                break;
            case 8:
                wMOBJECT = &mGDATA.mMODEL3[204];
                break;
            case 9:
                wMOBJECT = &mGDATA.mMODEL3[205];
                break;
            default:
                break;
            }
            if (wMOBJECT)
            {
                tFrame = GMOBJECT::GetTotalFrameNum(wMOBJECT);
                if (tFrame > 0)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    GSOBJECT::GetSObjectCoord( mGDATA.mWEAPON_3_EFFECT[mDATA.aPreviousTribe][mDATA.aGender], 4, &tSetEffectCoord[0], mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, nMOTION, mIndex == 0);
                    tSetEffectAngle[0] = 0.0;
                    tSetEffectAngle[1] = mDATA.aAction.aFront;
                    tSetEffectAngle[2] = 0.0;
                    GMOBJECT::DisplayMObject(wMOBJECT, tDrawSort, pFrame, &tSetEffectCoord[0], &tSetEffectAngle[0], 0);
                    
                }
            }
            if (wxMOBJECT)
            {
                tFrame = GMOBJECT::GetTotalFrameNum(wxMOBJECT);
                if (tFrame > 0)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    tSetEffectAngle[0] = 0.0;
                    tSetEffectAngle[1] = mDATA.aAction.aFront;
                    tSetEffectAngle[2] = 0.0;
                    GMOBJECT::DisplayMObject(wxMOBJECT, tDrawSort, pFrame, mDATA.aAction.aLocation, &tSetEffectAngle[0], 0);

                }
            }
        }

        // Draw Rebirth Effect
        if (mDATA.aRebirth > 0)
        {
            rMOBJECT = 0;
            switch (mDATA.aRebirth)
            {
            case 1:
                rMOBJECT = &mGDATA.mMODEL3[208];
                break;
            case 2:
                rMOBJECT = &mGDATA.mMODEL3[209];
                break;
            case 3:
                rMOBJECT = &mGDATA.mMODEL3[210];
                break;
            case 4:
                rMOBJECT = &mGDATA.mMODEL3[211];
                break;
            case 5:
                rMOBJECT = &mGDATA.mMODEL3[212];
                break;
            case 6:
                rMOBJECT = &mGDATA.mMODEL3[213];
                break;
            case 7:
                rMOBJECT = &mGDATA.mMODEL3[214];
                break;
            case 8:
                rMOBJECT = &mGDATA.mMODEL3[215];
                break;
            case 9:
                rMOBJECT = &mGDATA.mMODEL3[216];
                break;
            case 10:
                rMOBJECT = &mGDATA.mMODEL3[220];
                break;
            case 11:
                rMOBJECT = &mGDATA.mMODEL3[221];
                break;
            case 12:
                rMOBJECT = &mGDATA.mMODEL3[222];
                break;
            default:
                break;
            }
            if (rMOBJECT)
            {
                tFrame = GMOBJECT::GetTotalFrameNum(rMOBJECT);
                if (tFrame > 0)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    tRBEffectCoord[0] = mDATA.aAction.aLocation[0];
                    if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                    {
                        tRBEffectCoord[1] = mDATA.aAction.aLocation[1] + 7.0;
                    }
                    else
                    {
                        tRBEffectCoord[1] = mDATA.aAction.aLocation[1];
                    }
                    tRBEffectCoord[2] = mDATA.aAction.aLocation[2];
                    tRBEffectAngle[0] = 0.0;
                    tRBEffectAngle[1] = mDATA.aAction.aFront;
                    tRBEffectAngle[2] = 0.0;
                    GMOBJECT::DisplayMObject(rMOBJECT, tDrawSort, pFrame, &tRBEffectCoord[0], &tRBEffectAngle[0], 0);
                }
            }
        }

        if ( mPLAY.ReturnTribeRole(mDATA.aName, mDATA.aTribe) == 1 || mPLAY.ReturnTribeRole(mDATA.aName, mDATA.aTribe) == 2 )
        {
            tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[253 + mDATA.aTribe]);
            if (tFrame > 0)
            {
                pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                tEffectLoc[0] = mDATA.aAction.aLocation[0];
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    tEffectLoc[1] = mDATA.aAction.aLocation[1] + 7.0f;
                }
                else
                {
                    tEffectLoc[1] = mDATA.aAction.aLocation[1];
                }
                tEffectLoc[2] = mDATA.aAction.aLocation[2];
                tEffectAngle[0] = 0.0f;
                tEffectAngle[1] = mDATA.aAction.aFront;
                tEffectAngle[2] = 0.0f;
                GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[253 + mDATA.aTribe], tDrawSort, pFrame, tEffectLoc, tEffectAngle, 0);
            }
        }

        /*{
            tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[279]);
            if (tFrame > 0)
            {
                pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                tEffectLoc[0] = mDATA.aAction.aLocation[0];
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                {
                    tEffectLoc[1] = mDATA.aAction.aLocation[1] + 32.0f;
                }
                else
                {
                    tEffectLoc[1] = mDATA.aAction.aLocation[1] + 25.0f;
                }
                tEffectLoc[2] = mDATA.aAction.aLocation[2];
                tEffectAngle[0] = 0.0f;
                tEffectAngle[1] = mDATA.aAction.aFront;
                tEffectAngle[2] = 0.0f;
                GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[279], tDrawSort, pFrame, tEffectLoc, tEffectAngle, 0);
            }
        }*/

        // Draw Avatar Effects For State
        if (mLevelUpEffectState)
        {
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][2], tDrawSort, mLevelUpEffectStateUpdateTime, &tL[0], &tA[0], 0);
            }
            else
            {
                GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][2], tDrawSort, mLevelUpEffectStateUpdateTime, &tL[0], &tA[0], 0);
            }
        }
        if (mRebirthEffectState)
        {
            GMOBJECT::DisplayMObject( &mGDATA.mMODEL3[207], tDrawSort, mRebirthEffectStateUpdateTime, &tL[0], &tA[0], 0);
        }
        if (mReflectDamageEffectState)
        {
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][456], tDrawSort, mReflectDamageEffectStateUpdateTime, &tL[0], &tA[0], 0);
            }
            else
            {
                GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][456], tDrawSort, mReflectDamageEffectStateUpdateTime, &tL[0], &tA[0], 0);
            }
        }
        if (mDestroyHeavenShieldState)
        {
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][461], tDrawSort, mDestroyHeavenShieldStateUpdateTime, &tL[0], &tA[0], 0);
            }
            else
            {
                GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][461], tDrawSort, mDestroyHeavenShieldStateUpdateTime, &tL[0], &tA[0], 0);
            }
        }
        if (mHealOtherPlayerSkillEffectState)
        {
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][463], tDrawSort, mHealOtherPlayerSkillEffectUpdateTime, &tL[0], &tA[0], 0);
            }
            else
            {
                GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][463], tDrawSort, mHealOtherPlayerSkillEffectUpdateTime, &tL[0], &tA[0], 0);
            }
        }
        if (mHealManaOtherPlayerSkillEffectState)
        {
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                GMOBJECT::DisplayMObject( &mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][465], tDrawSort, mHealManaOtherPlayerSkillEffectUpdateTime, &tL[0], &tA[0], 0);
            }
            else
            {
                GMOBJECT::DisplayMObject( &mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][465], tDrawSort, mHealManaOtherPlayerSkillEffectUpdateTime, &tL[0], &tA[0], 0);
            }
        }
        if (mDamageUpForGarudaEffect)
        {
            tBookEffectCoord[0] = tL[0];
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                tBookEffectCoord[1] = tL[1] + 7.0;
            }
            else
            {
                tBookEffectCoord[1] = tL[1];
            }
            tBookEffectCoord[2] = tL[2];
            GMOBJECT::DisplayMObject( &mGDATA.mMODEL3[195], tDrawSort, mDamageUpForGarudaUpdateTime, &tBookEffectCoord[0], &tA[0], 0);
        }
        if (mAtkRateBookForEffect == 1 || mDodgeBookForEffect == 1)
        {
            tBookEffectCoord[0] = tL[0];
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                tBookEffectCoord[1] = tL[1] + 7.0;
            }
            else
            {
                tBookEffectCoord[1] = tL[1];
            }
            tBookEffectCoord[2] = tL[2];
            if (mAtkRateBookForEffect == 1)
            {
                GMOBJECT::DisplayMObject( &mGDATA.mMODEL3[219], tDrawSort, mAtkRateBookForEffectUpdateTime, &tBookEffectCoord[0], &tA[0], 0);
            }
            else
            {
                GMOBJECT::DisplayMObject( &mGDATA.mMODEL3[219], tDrawSort, mDodgeBookForEffectUpdateTime, &tBookEffectCoord[0], &tA[0], 0);
            }
        }
        if (mPetGrowEffectState)
        {
            tPetEffectCoord[0] = mDATA.aAction.aLocation[0];
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                tPetEffectCoord[1] = mDATA.aAction.aLocation[1] + 35.0;
            }
            else
            {
                tPetEffectCoord[1] = mDATA.aAction.aLocation[1] + 25.0;
            }
            tPetEffectCoord[2] = mDATA.aAction.aLocation[2];
            tPetEffectAngle[0] = 0.0;
            tPetEffectAngle[1] = mDATA.aAction.aFront;
            tPetEffectAngle[2] = 0.0;
            GMOBJECT::DisplayMObject( &mGDATA.mMODEL3[158], tDrawSort, mPetGrowEffectStateUpdateTime, &tPetEffectCoord[0], &tPetEffectAngle[0], 0);
        }

        // Draw PShop
        if (mDATA.aPShopState == 1)
        {
            tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[159]);
            if (tFrame > 0)
            {
                pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                tPShopAngle = mDATA.aAction.aFront + 0.0;
                if (tPShopAngle > 360.0)
                {
                    tPShopAngle = tPShopAngle - 360.0;
                }
                D3DXMatrixTranslation(&pOut, mDATA.aAction.aLocation[0], 0.0, mDATA.aAction.aLocation[2]);
                v6 = tPShopAngle * 0.01745329238474369;
                D3DXMatrixRotationY(&v50, v6);
                D3DXMatrixMultiply(&v15, &v50, &pOut);
                CopyMemory(&v18, &v15, sizeof(D3DXMATRIX));
                CopyMemory(&v51, &v18, sizeof(D3DXMATRIX));
                tPShopCoord[0] = 0.0;
                tPShopCoord[1] = 0.0;
                tPShopCoord[2] = 5.0;
                tPShoprAngle[0] = 0.0;
                tPShoprAngle[1] = mDATA.aAction.aFront;
                tPShoprAngle[2] = 0.0;
                D3DXVec3TransformCoord((D3DXVECTOR3*)&tPShopCoord[0], (D3DXVECTOR3*)&tPShopCoord[0], &v51);
                v5 = mDATA.aAction.aLocation[1] + 20.0;
                if (mGDATA.mZONE.mWORLD.GetYCoord(tPShopCoord[0], tPShopCoord[2], &tPShopCoord[1], 1, v5, 0, 0))
                {
                    switch (mDATA.aTribe)
                    {
                    case 0:
                        GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[159], tDrawSort, pFrame, &tPShopCoord[0], &tPShoprAngle[0], 0);
                        break;
                    case 1:
                        GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[160], tDrawSort, pFrame, &tPShopCoord[0], &tPShoprAngle[0], 0);
                        break;
                    case 2:
                        GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[161], tDrawSort, pFrame, &tPShopCoord[0], &tPShoprAngle[0], 0);
                        break;
                    case 3:
                        GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[162], tDrawSort, pFrame, &tPShopCoord[0], &tPShoprAngle[0], 0);
                        break;
                    default:
                        break;
                    }
                }
            }
        }
        // Draw GM Arrow Effect
        if (mDATA.aArrow == 1)
        {
            GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[106], tDrawSort, mPinkArrowForGMEffect, &tL[0], &tA[0], 0);
        }
        if (mDATA.aSecretSkillState > 0)
        {
            switch (mDATA.aSecretSkillState)
            {
            case 91393:
            case 91397:
            case 91401:
                tDataIndex = 242;
                break;
            case 91394:
            case 91398:
            case 91402:
                tDataIndex = 243;
                break;
            case 91395:
            case 91399:
            case 91403:
                tDataIndex = 244;
                break;
            case 91396:
            case 91400:
            case 91404:
                tDataIndex = 245;
                break;
            }
            tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[tDataIndex]);
            if (tFrame > 0)
            {
                pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[tDataIndex], tDrawSort, pFrame, &tL[0], &tA[0], 0);
            }
        }
        return;
    }
    else if (mGAMEOPTION.tWarMode == 1)
    {
        if (mDATA.aTribe == 3)
        {
            GSOBJECT::DisplaySObject(mGDATA.mWARMODE_OUTFIT_NANGIN[mDATA.aPreviousTribe][mDATA.aGender], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
        }
        else
        {
            GSOBJECT::DisplaySObject(mGDATA.mWARMODE_OUTFIT[mDATA.aPreviousTribe][mDATA.aGender], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
        }
        goto DRAWGENERAL;
    }
    else if (mGAMEOPTION.tWarMode == 2)
    {
        if (mDATA.aTribe == 3)
        {
            GSOBJECT::DisplaySObject(&mGDATA.mWARMODE_OUTFIT_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
        }
        else
        {
            GSOBJECT::DisplaySObject(&mGDATA.mWARMODE_OUTFIT[mDATA.aPreviousTribe][mDATA.aGender][1], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
        }
        goto DRAWGENERAL;
    }
    else if (mGAMEOPTION.tWarMode == 3)
    {
        if (mDATA.aTribe == 3)
        {
            GSOBJECT::DisplaySObject(&mGDATA.mWARMODE_OUTFIT_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][2], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
        }
        else
        {
            GSOBJECT::DisplaySObject(&mGDATA.mWARMODE_OUTFIT[mDATA.aPreviousTribe][mDATA.aGender][2], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
        }
        if (mEquip[7])
        {
            switch (mEquip[7]->iSort)
            {
            case 13:
            case 16:
            case 19:
                GSOBJECT::DisplaySObject( &mGDATA.mWARMODE_OUTFIT[mDATA.aPreviousTribe][mDATA.aGender][3], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                break;
            case 14:
            case 17:
            case 20:
                GSOBJECT::DisplaySObject( &mGDATA.mWARMODE_OUTFIT[mDATA.aPreviousTribe][mDATA.aGender][4], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                break;
            case 15:
            case 18:
            case 21:
                GSOBJECT::DisplaySObject( &mGDATA.mWARMODE_OUTFIT[mDATA.aPreviousTribe][mDATA.aGender][5], tDrawSort,mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
                break;
            default:
                break;
            }
        }
        if (mDATA.aSpecialState == 1)
        {
            GSOBJECT::DisplaySObject( mGDATA.mGM_HAT[mDATA.aPreviousTribe][mDATA.aGender], tDrawSort, mDATA.aAction.aFrame, mDATA.aAction.aLocation, mDATA.aAction.aFront, 20.0, nMOTION, mIndex == 0);
        }
        if (mDATA.aAction.aSort == 64 && mDATA.aAction.aSkillValue == 1)
        {
            if (!strcmp(mDATA.aPartyName, mMYINFO.mAvatarInfo.aPartyName))
            {
                tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[170]);
                if (tFrame > 0)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    tL[0] = mDATA.aAction.aLocation[0];
                    tL[1] = mDATA.aAction.aLocation[1];
                    tL[2] = mDATA.aAction.aLocation[2];
                    tA[0] = 0.0;
                    tA[1] = mDATA.aAction.aFront;
                    tA[2] = 0.0;
                    GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[170], tDrawSort, pFrame, &tL[0], &tA[0], 0);
                    for (index01 = 0; index01 < 4; ++index01)
                    {
                        if (mPLAY.GetPartySkillLocation( mDATA.aAction.aFront, mDATA.aAction.aLocation, mDATA.aAction.aSkillNumber, index01, tPartyLoc))
                        {
                            GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[170], tDrawSort, pFrame, &tPartyLoc[0], &tA[0], 0);
                        }
                    }
                }
            }
            else
            {
                tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[29]);
                if (tFrame > 0)
                {
                    pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                    tL[0] = mDATA.aAction.aLocation[0];
                    tL[1] = mDATA.aAction.aLocation[1];
                    tL[2] = mDATA.aAction.aLocation[2];
                    tA[0] = 0.0;
                    tA[1] = mDATA.aAction.aFront;
                    tA[2] = 0.0;
                    GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[29], tDrawSort, pFrame, tL, tA, 0);
                    for (index01 = 0; index01 < 4; ++index01)
                    {
                        if (mPLAY.GetPartySkillLocation( mDATA.aAction.aFront, mDATA.aAction.aLocation, mDATA.aAction.aSkillNumber, index01, tPartyLoc))
                        {
                            GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[29], tDrawSort, pFrame, tPartyLoc, tA, 0);
                        }
                    }
                }
            }
        }
    }
}

void AVATAR_OBJECT::DrawShadow( int mIndex, float dTime)
{
    /*int v3; 
    int v4; 
    int v6; 
    int v7; 
    ITEM_INFO* v8; 
    ITEM_INFO* v9; 
    ITEM_INFO* v10;
    ITEM_INFO* v11;
    GMOTION* tMOTION; 

    if (!mCheckValidState || !mDATA.aVisibleState || !mUTIL.CheckPossibleDrawMeWithCamera(mDATA.aAction.aLocation, 20.0f) || mUTIL.GetLengthXYZ(mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation) > 300.0f)
    {
        return;
    }
    if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
    {
        v6 = -1;
        v4 = mDATA.aAnimalNumber;
        if (v4 > 1301)
        {
            if (v4 <= 1926)
            {
                if (v4 >= 1917)
                {
                    v6 = 32;
                }
                else
                {
                    switch (v4)
                    {
                    case 1302:
                        v6 = 1;
                        break;
                    case 1303:
                        v6 = 2;
                        break;
                    case 1304:
                        goto LABEL_40;
                    case 1305:
                        goto LABEL_41;
                    case 1306:
                        goto LABEL_42;
                    case 1307:
                        goto LABEL_43;
                    case 1308:
                    LABEL_44:
                        v6 = 7;
                        break;
                    case 1309:
                    LABEL_45:
                        v6 = 8;
                        break;
                    case 1313:
                        v6 = 9;
                        break;
                    case 1314:
                        goto LABEL_47;
                    case 1315:
                    LABEL_48:
                        v6 = 11;
                        break;
                    case 1316:
                        goto LABEL_49;
                    case 1317:
                        v6 = 13;
                        break;
                    case 1318:
                        goto LABEL_51;
                    case 1319:
                    LABEL_52:
                        v6 = 15;
                        break;
                    case 1320:
                        v6 = 16;
                        break;
                    case 1321:
                        goto LABEL_54;
                    case 1322:
                        goto LABEL_55;
                    case 1323:
                        v6 = 19;
                        break;
                    case 1324:
                        goto LABEL_57;
                    case 1325:
                    LABEL_58:
                        v6 = 21;
                        break;
                    case 1326:
                        v6 = 22;
                        break;
                    case 1327:
                        goto LABEL_60;
                    case 1328:
                    LABEL_61:
                        v6 = 24;
                        break;
                    case 1329:
                        v6 = 25;
                        break;
                    case 1330:
                        v6 = 26;
                        break;
                    case 1331:
                        v6 = 27;
                        break;
                    default:
                        goto LABEL_75;
                    }
                }
                goto LABEL_75;
            }
            if (v4 > 17044)
            {
                switch (v4)
                {
                case 17045:
                LABEL_41:
                    v6 = 4;
                    break;
                case 17046:
                LABEL_42:
                    v6 = 5;
                    break;
                case 17047:
                LABEL_47:
                    v6 = 10;
                    break;
                case 17048:
                LABEL_51:
                    v6 = 14;
                    break;
                case 17049:
                LABEL_54:
                    v6 = 17;
                    break;
                case 17050:
                LABEL_57:
                    v6 = 20;
                    break;
                case 17051:
                LABEL_60:
                    v6 = 23;
                    break;
                case 17058:
                LABEL_55:
                    v6 = 18;
                    break;
                case 17059:
                    v6 = 25;
                    break;
                case 17060:
                    v6 = 26;
                    break;
                case 17061:
                    v6 = 27;
                    break;
                default:
                    goto LABEL_75;
                }
                goto LABEL_75;
            }
            if (v4 == 17044)
                goto LABEL_40;
            if (v4 <= 2317)
            {
                if (v4 == 2317)
                {
                    v6 = 31;
                }
                else if (v4 > 2285)
                {
                    if (v4 == 2316)
                        v6 = 30;
                }
                else if (v4 >= 2276)
                {
                    v6 = 29;
                }
                else if (v4 >= 2266)
                {
                    v6 = 28;
                }
                else if (v4 <= 1936)
                {
                    v6 = 33;
                }
                goto LABEL_75;
            }
            if (v4 <= 2441)
            {
                if (v4 >= 2432)
                {
                    v6 = 27;
                }
                else if (v4 >= 2422)
                {
                    v6 = 25;
                }
                goto LABEL_75;
            }
            if (v4 != 7011)
                goto LABEL_75;
        }
        else if (v4 != 1301)
        {
            if (v4 > 814)
            {
                switch (v4)
                {
                case 815:
                    goto LABEL_58;
                case 816:
                    goto LABEL_61;
                case 817:
                    goto LABEL_45;
                case 818:
                    goto LABEL_52;
                case 819:
                    goto LABEL_44;
                case 820:
                    goto LABEL_48;
                case 821:
                    goto LABEL_55;
                default:
                    goto LABEL_75;
                }
                goto LABEL_75;
            }
            if (v4 == 814)
            {
            LABEL_43:
                v6 = 6;
                goto LABEL_75;
            }
            if (v4 < 510)
                goto LABEL_75;
            if (v4 <= 511)
            {
            LABEL_49:
                v6 = 12;
                goto LABEL_75;
            }
            if (v4 != 559)
            {
            LABEL_75:
                if (v6 != -1)
                {
                    switch (mDATA.aAction.aSort)
                    {
                    case 0:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 1:
                        GSOBJECT::DisplaySObjectShadow(
                            mGDATA.mMOUNT[v6],
                            mDATA.aAction.aFrame,
                            mDATA.aAction.aLocation,
                            mDATA.aAction.aFront,
                            20.0,
                            &mGDATA.mZONE,
                            mGDATA.mMOUNT_MOTION[v6],
                            mIndex == 0);
                        break;
                    case 2:
                    case 32:
                        GSOBJECT::DisplaySObjectShadow(
                            mGDATA.mMOUNT[v6],
                            mDATA.aAction.aFrame,
                            mDATA.aAction.aLocation,
                            mDATA.aAction.aFront,
                            20.0,
                            &mGDATA.mZONE,
                            &mGDATA.mMOUNT_MOTION[v6][1],
                            mIndex == 0);
                        break;
                    case 5:
                    case 6:
                    case 7:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 81:
                    case 82:
                    case 83:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 9:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 10:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 11:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 12:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 13:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 30:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 31:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 38:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 39:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 40:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 41:
                    case 66:
                    case 67:
                    case 68:
                    case 75:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 60:
                    case 61:
                    case 62:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 63:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 64:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            goto LABEL_112;
                        break;
                    case 65:
                        if (GMOTION::GetTotalFrameNum(&mGDATA.mMOUNT_MOTION[v6][2], mIndex == 0) >= 1)
                            LABEL_112 :
                            GSOBJECT::DisplaySObjectShadow(
                                mGDATA.mMOUNT[v6],
                                mDATA.aAction.aFrame,
                                mDATA.aAction.aLocation,
                                mDATA.aAction.aFront,
                                20.0,
                                &mGDATA.mZONE,
                                &mGDATA.mMOUNT_MOTION[v6][2],
                                mIndex == 0);
                        break;
                    default:
                        goto LABEL_113;
                    }
                }
                goto LABEL_113;
            }
        LABEL_40:
            v6 = 3;
            goto LABEL_75;
        }
        v6 = 0;
        goto LABEL_75;
    }
LABEL_113:
    v7 = -1;
    if (mDATA.aFashionNumber > 0)
    {
        v3 = mDATA.aFashionNumber;
        if (v3 > 1803)
        {
            if (v3 > 17145)
            {
                if (v3 > 18036)
                {
                    switch (v3)
                    {
                    case 18037:
                    case 18038:
                    case 18039:
                    LABEL_154:
                        v7 = 13;
                        break;
                    case 18040:
                    case 18041:
                    case 18042:
                        v7 = 18;
                        break;
                    default:
                        break;
                    }
                }
                else if (v3 >= 18034)
                {
                LABEL_146:
                    v7 = 5;
                }
                else if (v3 > 18030)
                {
                LABEL_152:
                    v7 = 11;
                }
                else if (v3 >= 18028)
                {
                LABEL_144:
                    v7 = 3;
                }
                else if (v3 >= 17701 && v3 <= 17703)
                {
                LABEL_153:
                    v7 = 12;
                }
            }
            else if (v3 >= 17143)
            {
            LABEL_148:
                v7 = 7;
            }
            else if (v3 > 7704)
            {
                if (v3 >= 17140)
                {
                LABEL_143:
                    v7 = 2;
                }
                else if (v3 <= 7707)
                {
                LABEL_159:
                    v7 = 19;
                }
            }
            else if (v3 >= 7702)
            {
            LABEL_162:
                v7 = 20;
            }
            else if (v3 > 2148)
            {
                if (v3 >= 7003 && v3 <= 7005)
                    LABEL_157:
                v7 = 15;
            }
            else if (v3 >= 2146)
            {
                v7 = 21;
            }
            else if (v3 >= 1891 && v3 <= 1893)
            {
                v7 = 23;
            }
        }
        else if (v3 >= 1801)
        {
            v7 = 22;
        }
        else
        {
            switch (v3)
            {
            case 301:
            case 302:
            case 303:
            case 346:
            case 347:
            case 348:
            case 388:
            case 389:
            case 390:
                v7 = 0;
                break;
            case 304:
            case 305:
            case 306:
            case 349:
            case 350:
            case 351:
            case 391:
            case 392:
            case 393:
                v7 = 1;
                break;
            case 307:
            case 308:
            case 309:
                goto LABEL_143;
            case 310:
            case 311:
            case 312:
            case 352:
            case 353:
            case 354:
                goto LABEL_144;
            case 313:
            case 314:
            case 315:
                v7 = 4;
                break;
            case 316:
            case 317:
            case 318:
            case 355:
            case 356:
            case 357:
                goto LABEL_146;
            case 319:
            case 320:
            case 321:
            case 358:
            case 359:
            case 360:
                v7 = 6;
                break;
            case 322:
            case 323:
            case 324:
            case 361:
            case 362:
            case 363:
                goto LABEL_148;
            case 325:
            case 326:
            case 327:
                v7 = 8;
                break;
            case 328:
            case 329:
            case 330:
                v7 = 9;
                break;
            case 331:
            case 332:
            case 333:
                v7 = 10;
                break;
            case 334:
            case 335:
            case 336:
            case 364:
            case 365:
            case 366:
                goto LABEL_152;
            case 337:
            case 338:
            case 339:
            case 367:
            case 368:
            case 369:
                goto LABEL_153;
            case 340:
            case 341:
            case 342:
            case 370:
            case 371:
            case 372:
                goto LABEL_154;
            case 343:
            case 344:
            case 345:
            case 373:
            case 374:
            case 375:
                v7 = 14;
                break;
            case 376:
            case 377:
            case 378:
                goto LABEL_157;
            case 379:
            case 380:
            case 381:
                v7 = 16;
                break;
            case 382:
            case 383:
            case 384:
                v7 = 17;
                break;
            case 385:
            case 386:
            case 387:
                v7 = 18;
                break;
            case 394:
            case 395:
            case 396:
                goto LABEL_159;
            case 397:
            case 398:
            case 399:
                goto LABEL_162;
            default:
                break;
            }
        }
    }
    v8 = mITEM.Search(mDATA.aEquipForView[1][0]);
    v9 = mITEM.Search(mDATA.aEquipForView[2][0]);
    v10 = mITEM.Search(mDATA.aEquipForView[5][0]);
    v11 = mITEM.Search(mDATA.aEquipForView[7][0]);
    mITEM.Search(mDATA.aEquipForView[8][0]);
    if (mDATA.aAnimalAbsorbState)
        tMOTION = mGDATA.ReturnCharacterMotion(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0);
    else
        tMOTION = mGDATA.ReturnCharacterMotion(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber);
    if (mGAMEOPTION.tWarMode <= 0)
    {
        if (mDATA.aTribe == 3)
        {
            if (!v9)
            {
                goto LABEL_208;
            }
            if (mDATA.aGender == 1)
            {
                if (v9->iDataNumber3D != 37 && v9->iDataNumber3D != 39 && v7 == -1)
                {
                    GSOBJECT::DisplaySObjectShadow(
                        mGDATA.mHEADBAND_NANGIN[mDATA.aPreviousTribe][mDATA.aGender],
                        mDATA.aAction.aFrame,
                        mDATA.aAction.aLocation,
                        mDATA.aAction.aFront,
                        20.0,
                        &mGDATA.mZONE,
                        tMOTION,
                        mIndex == 0);
                }
                goto LABEL_209;
            }
            if (v7 == -1)
            {
            LABEL_208:
                GSOBJECT::DisplaySObjectShadow(
                mGDATA.mHEADBAND_NANGIN[mDATA.aPreviousTribe][mDATA.aGender],
                mDATA.aAction.aFrame,
                mDATA.aAction.aLocation,
                mDATA.aAction.aFront,
                20.0,
                &mGDATA.mZONE,
                tMOTION,
                mIndex == 0); 
            }
        }
    LABEL_209:
        if (mDATA.aSpecialState != 1)
        {
            if (v9 && mDATA.aGender == 1)
            {
                if (v9->iDataNumber3D != 37 && v9->iDataNumber3D != 39)
                {
                    GSOBJECT::DisplaySObjectShadow(
                        &mGDATA.mCHARHAIR[mDATA.aPreviousTribe][mDATA.aGender][mDATA.aHeadType],
                        mDATA.aAction.aFrame,
                        mDATA.aAction.aLocation,
                        mDATA.aAction.aFront,
                        20.0,
                        &mGDATA.mZONE,
                        tMOTION,
                        mIndex == 0);
                }
            }
            else
            {
                GSOBJECT::DisplaySObjectShadow(
                    &mGDATA.mCHARHAIR[mDATA.aPreviousTribe][mDATA.aGender][mDATA.aHeadType],
                    mDATA.aAction.aFrame,
                    mDATA.aAction.aLocation,
                    mDATA.aAction.aFront,
                    20.0,
                    &mGDATA.mZONE,
                    tMOTION,
                    mIndex == 0);
            }
        }
        GSOBJECT::DisplaySObjectShadow(
            &mGDATA.mCHARFACE[mDATA.aPreviousTribe][mDATA.aGender][mDATA.aFaceType],
            mDATA.aAction.aFrame,
            mDATA.aAction.aLocation,
            mDATA.aAction.aFront,
            20.0,
            &mGDATA.mZONE,
            tMOTION,
            mIndex == 0);
        if (v7 < 0)
        {
            if (v9)
            {
                if (mDATA.aTribe == 3 && GSOBJECT::Load( &mGDATA.mBODY_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][v9->iDataNumber3D], mIndex == 0))
                {
                    GSOBJECT::DisplaySObjectShadow(
                        &mGDATA.mBODY_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][v9->iDataNumber3D],
                        mDATA.aAction.aFrame,
                        mDATA.aAction.aLocation,
                        mDATA.aAction.aFront,
                        20.0,
                        &mGDATA.mZONE,
                        tMOTION,
                        mIndex == 0);
                }
                else
                {
                    GSOBJECT::DisplaySObjectShadow(
                        &mGDATA.mBODY[mDATA.aPreviousTribe][mDATA.aGender][v9->iDataNumber3D],
                        mDATA.aAction.aFrame,
                        mDATA.aAction.aLocation,
                        mDATA.aAction.aFront,
                        20.0,
                        &mGDATA.mZONE,
                        tMOTION,
                        mIndex == 0);
                }
            }
            else
            {
                GSOBJECT::DisplaySObjectShadow(
                    mGDATA.mBODY[mDATA.aPreviousTribe][mDATA.aGender],
                    mDATA.aAction.aFrame,
                    mDATA.aAction.aLocation,
                    mDATA.aAction.aFront,
                    20.0,
                    &mGDATA.mZONE,
                    tMOTION,
                    mIndex == 0);
            }
            if (v10)
            {
                if (mDATA.aTribe == 3 && GSOBJECT::Load( &mGDATA.mFEET_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][v10->iDataNumber3D], mIndex == 0))
                {
                    GSOBJECT::DisplaySObjectShadow(
                        &mGDATA.mFEET_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][v10->iDataNumber3D],
                        mDATA.aAction.aFrame,
                        mDATA.aAction.aLocation,
                        mDATA.aAction.aFront,
                        20.0,
                        &mGDATA.mZONE,
                        tMOTION,
                        mIndex == 0);
                }
                else
                {
                    GSOBJECT::DisplaySObjectShadow(
                        &mGDATA.mFEET[mDATA.aPreviousTribe][mDATA.aGender][v10->iDataNumber3D],
                        mDATA.aAction.aFrame,
                        mDATA.aAction.aLocation,
                        mDATA.aAction.aFront,
                        20.0,
                        &mGDATA.mZONE,
                        tMOTION,
                        mIndex == 0);
                }
            }
            else
            {
                GSOBJECT::DisplaySObjectShadow(
                    mGDATA.mFEET[mDATA.aPreviousTribe][mDATA.aGender],
                    mDATA.aAction.aFrame,
                    mDATA.aAction.aLocation,
                    mDATA.aAction.aFront,
                    20.0,
                    &mGDATA.mZONE,
                    tMOTION,
                    mIndex == 0);
            }
        }
        else if (mDATA.aTribe == 3)
        {
            GSOBJECT::DisplaySObjectShadow(
                &mGDATA.mCOSTUME_NANGIN[mDATA.aPreviousTribe][mDATA.aGender][v7],
                mDATA.aAction.aFrame,
                mDATA.aAction.aLocation,
                mDATA.aAction.aFront,
                20.0,
                &mGDATA.mZONE,
                tMOTION,
                mIndex == 0);
        }
        else
        {
            GSOBJECT::DisplaySObjectShadow(
                &mGDATA.mCOSTUME[mDATA.aPreviousTribe][mDATA.aGender][v7],
                mDATA.aAction.aFrame,
                mDATA.aAction.aLocation,
                mDATA.aAction.aFront,
                20.0,
                &mGDATA.mZONE,
                tMOTION,
                mIndex == 0);
        }
        goto LABEL_233;
    }
    if (mDATA.aTribe != 3)
    {
        switch (mGAMEOPTION.tWarMode)
        {
        case 1:
            GSOBJECT::DisplaySObjectShadow(
                mGDATA.mSOB_001_18[mDATA.aPreviousTribe][mDATA.aGender],
                mDATA.aAction.aFrame,
                mDATA.aAction.aLocation,
                mDATA.aAction.aFront,
                20.0,
                &mGDATA.mZONE,
                tMOTION,
                mIndex == 0);
            break;
        case 2:
            GSOBJECT::DisplaySObjectShadow(
                &mGDATA.mSOB_001_18[mDATA.aPreviousTribe][mDATA.aGender][1],
                mDATA.aAction.aFrame,
                mDATA.aAction.aLocation,
                mDATA.aAction.aFront,
                20.0,
                &mGDATA.mZONE,
                tMOTION,
                mIndex == 0);
            break;
        case 3:
            GSOBJECT::DisplaySObjectShadow(
                &mGDATA.mSOB_001_18[mDATA.aPreviousTribe][mDATA.aGender][2],
                mDATA.aAction.aFrame,
                mDATA.aAction.aLocation,
                mDATA.aAction.aFront,
                20.0,
                &mGDATA.mZONE,
                tMOTION,
                mIndex == 0);
            if (v11)
            {
                switch (v11->iSort)
                {
                case 13:
                case 16:
                case 19:
                    GSOBJECT::DisplaySObjectShadow(
                        &mGDATA.mSOB_001_18[mDATA.aPreviousTribe][mDATA.aGender][3],
                        mDATA.aAction.aFrame,
                        mDATA.aAction.aLocation,
                        mDATA.aAction.aFront,
                        20.0,
                        &mGDATA.mZONE,
                        tMOTION,
                        mIndex == 0);
                    break;
                case 14:
                case 17:
                case 20:
                    GSOBJECT::DisplaySObjectShadow(
                        &mGDATA.mSOB_001_18[mDATA.aPreviousTribe][mDATA.aGender][4],
                        mDATA.aAction.aFrame,
                        mDATA.aAction.aLocation,
                        mDATA.aAction.aFront,
                        20.0,
                        &mGDATA.mZONE,
                        tMOTION,
                        mIndex == 0);
                    break;
                case 15:
                case 18:
                case 21:
                    GSOBJECT::DisplaySObjectShadow(
                        &mGDATA.mSOB_001_18[mDATA.aPreviousTribe][mDATA.aGender][5],
                        mDATA.aAction.aFrame,
                        mDATA.aAction.aLocation,
                        mDATA.aAction.aFront,
                        20.0,
                        &mGDATA.mZONE,
                        tMOTION,
                        mIndex == 0);
                    break;
                default:
                    break;
                }
            }
            if (mDATA.aSpecialState == 1)
            {
                GSOBJECT::DisplaySObjectShadow(
                    mGDATA.mGM_HAT[mDATA.aPreviousTribe][mDATA.aGender],
                    mDATA.aAction.aFrame,
                    mDATA.aAction.aLocation,
                    mDATA.aAction.aFront,
                    20.0,
                    &mGDATA.mZONE,
                    tMOTION,
                    mIndex == 0);
            }
            return;
        default:
            break;
        }
    LABEL_233:
        if (v11)
        {
            switch (v11->iSort)
            {
            case 13:
            case 16:
            case 19:
                GSOBJECT::DisplaySObjectShadow(
                    &mGDATA.mWEAPON_1[mDATA.aPreviousTribe][mDATA.aGender][v11->iDataNumber3D],
                    mDATA.aAction.aFrame,
                    mDATA.aAction.aLocation,
                    mDATA.aAction.aFront,
                    20.0,
                    &mGDATA.mZONE,
                    tMOTION,
                    mIndex == 0);
                break;
            case 14:
            case 17:
            case 20:
                GSOBJECT::DisplaySObjectShadow(
                    &mGDATA.mWEAPON_2[mDATA.aPreviousTribe][mDATA.aGender][v11->iDataNumber3D],
                    mDATA.aAction.aFrame,
                    mDATA.aAction.aLocation,
                    mDATA.aAction.aFront,
                    20.0,
                    &mGDATA.mZONE,
                    tMOTION,
                    mIndex == 0);
                break;
            case 15:
            case 18:
            case 21:
                GSOBJECT::DisplaySObjectShadow(
                    &mGDATA.mWEAPON_3[mDATA.aPreviousTribe][mDATA.aGender][v11->iDataNumber3D],
                    mDATA.aAction.aFrame,
                    mDATA.aAction.aLocation,
                    mDATA.aAction.aFront,
                    20.0,
                    &mGDATA.mZONE,
                    tMOTION,
                    mIndex == 0);
                break;
            default:
                break;
            }
        }
        if (!mGAMEOPTION.tWarMode && v8 && v7 == -1)
        {
            if (v8->iSort == 8)
            {
                GSOBJECT::DisplaySObjectShadow(
                    &mGDATA.mCAPE1[mDATA.aPreviousTribe][mDATA.aGender][v8->iDataNumber3D],
                    mDATA.aAction.aFrame,
                    mDATA.aAction.aLocation,
                    mDATA.aAction.aFront,
                    20.0,
                    &mGDATA.mZONE,
                    tMOTION,
                    mIndex == 0);
            }
            else if (v8->iSort == 29)
            {
                GSOBJECT::DisplaySObjectShadow(
                    &mGDATA.mCAPE2[mDATA.aPreviousTribe][mDATA.aGender][v8->iDataNumber3D],
                    mDATA.aAction.aFrame,
                    mDATA.aAction.aLocation,
                    mDATA.aAction.aFront,
                    20.0,
                    &mGDATA.mZONE,
                    tMOTION,
                    mIndex == 0);
            }
        }
        if (mDATA.aSpecialState == 1 && v8 && v7 == -1)
        {
            if (v8->iSort == 8)
            {
                GSOBJECT::DisplaySObjectShadow(
                    &mGDATA.mCAPE1[mDATA.aPreviousTribe][mDATA.aGender][v8->iDataNumber3D],
                    mDATA.aAction.aFrame,
                    mDATA.aAction.aLocation,
                    mDATA.aAction.aFront,
                    20.0,
                    &mGDATA.mZONE,
                    tMOTION,
                    mIndex == 0);
            }
            else if (v8->iSort == 29)
            {
                GSOBJECT::DisplaySObjectShadow(
                    &mGDATA.mCAPE2[mDATA.aPreviousTribe][mDATA.aGender][v8->iDataNumber3D],
                    mDATA.aAction.aFrame,
                    mDATA.aAction.aLocation,
                    mDATA.aAction.aFront,
                    20.0,
                    &mGDATA.mZONE,
                    tMOTION,
                    mIndex == 0);
            }
        }
        return;
    }
    GSOBJECT::DisplaySObjectShadow(
        mGDATA.mHEADBAND_NANGIN[mDATA.aPreviousTribe][mDATA.aGender],
        mDATA.aAction.aFrame,
        mDATA.aAction.aLocation,
        mDATA.aAction.aFront,
        20.0,
        &mGDATA.mZONE,
        tMOTION,
        mIndex == 0);
    if (mGAMEOPTION.tWarMode == 1)
    {
        GSOBJECT::DisplaySObjectShadow(
            mGDATA.mSOB_001_19[mDATA.aPreviousTribe][mDATA.aGender],
            mDATA.aAction.aFrame,
            mDATA.aAction.aLocation,
            mDATA.aAction.aFront,
            20.0,
            &mGDATA.mZONE,
            tMOTION,
            mIndex == 0);
        goto LABEL_233;
    }
    if (mGAMEOPTION.tWarMode == 2)
    {
        GSOBJECT::DisplaySObjectShadow(
            &mGDATA.mSOB_001_19[mDATA.aPreviousTribe][mDATA.aGender][1],
            mDATA.aAction.aFrame,
            mDATA.aAction.aLocation,
            mDATA.aAction.aFront,
            20.0,
            &mGDATA.mZONE,
            tMOTION,
            mIndex == 0);
        goto LABEL_233;
    }
    if (mGAMEOPTION.tWarMode != 3)
        goto LABEL_233;
    GSOBJECT::DisplaySObjectShadow(
        &mGDATA.mSOB_001_19[mDATA.aPreviousTribe][mDATA.aGender][2],
        mDATA.aAction.aFrame,
        mDATA.aAction.aLocation,
        mDATA.aAction.aFront,
        20.0,
        &mGDATA.mZONE,
        tMOTION,
        mIndex == 0);
    if (v11)
    {
        switch (v11->iSort)
        {
        case 0xD:
        case 0x10:
        case 0x13:
            GSOBJECT::DisplaySObjectShadow(
                &mGDATA.mSOB_001_18[mDATA.aPreviousTribe][mDATA.aGender][3],
                mDATA.aAction.aFrame,
                mDATA.aAction.aLocation,
                mDATA.aAction.aFront,
                20.0,
                &mGDATA.mZONE,
                tMOTION,
                mIndex == 0);
            break;
        case 0xE:
        case 0x11:
        case 0x14:
            GSOBJECT::DisplaySObjectShadow(
                &mGDATA.mSOB_001_18[mDATA.aPreviousTribe][mDATA.aGender][4],
                mDATA.aAction.aFrame,
                mDATA.aAction.aLocation,
                mDATA.aAction.aFront,
                20.0,
                &mGDATA.mZONE,
                tMOTION,
                mIndex == 0);
            break;
        case 0xF:
        case 0x12:
        case 0x15:
            GSOBJECT::DisplaySObjectShadow(
                &mGDATA.mSOB_001_18[mDATA.aPreviousTribe][mDATA.aGender][5],
                mDATA.aAction.aFrame,
                mDATA.aAction.aLocation,
                mDATA.aAction.aFront,
                20.0,
                &mGDATA.mZONE,
                tMOTION,
                mIndex == 0);
            break;
        default:
            break;
        }
    }
    if (mDATA.aSpecialState == 1)
        GSOBJECT::DisplaySObjectShadow(
            mGDATA.mGM_HAT[mDATA.aPreviousTribe][mDATA.aGender],
            mDATA.aAction.aFrame,
            mDATA.aAction.aLocation,
            mDATA.aAction.aFront,
            20.0,
            &mGDATA.mZONE,
            tMOTION,
            mIndex == 0);*/
}

void AVATAR_OBJECT::DrawAvatarName( int tDrawSort, int mIndex, float dTime)
{
    float tCoord[3];
    int sX;
    int sY;
    int tstrlen;
    char mBuffer[1000];
    char mDrawBuffer[1000];
    int tDataIndex;
    int tColor;

    if (!mCheckValidState)
    {
        return;
    }
    if (!mDATA.aVisibleState)
    {
        return;
    }
    if (!mUTIL.CheckPossibleDrawMeWithCamera(mDATA.aAction.aLocation, 20.0f))
    {
        return;
    }

    // Display Char HP/MP Bar
    if (tDrawSort == 1 && !mIndex && mGAMEOPTION.tDisplayStatus == 1)
    {
        tCoord[0] = mDATA.aAction.aLocation[0];
        tCoord[1] = mDATA.aAction.aLocation[1] - 2.0f;
        tCoord[2] = mDATA.aAction.aLocation[2];
        if (mGXD.WorldCoordToScreenCoord(tCoord, &sX, &sY))
        {
            if (mDATA.aLifeValue <= 0)
            {
                tDataIndex = 1375;
            }
            else
            {
                tDataIndex = (mDATA.aLifeValue * 48.0 / mDATA.aMaxLifeValue) + 1376;
                if (tDataIndex > 1424)
                {
                    tDataIndex = 1424;
                }
            }
            GIMAGE2D::Display(&mGDATA.mUI_MAIN[tDataIndex], sX - 44, sY);
            if (mDATA.aManaValue <= 0)
            {
                tDataIndex = 1425;
            }
            else
            {
                tDataIndex = (mDATA.aManaValue * 48.0 / mDATA.aMaxManaValue) + 1426;
                if (tDataIndex > 1474)
                {
                    tDataIndex = 1474;
                }
            }
            GIMAGE2D::Display(&mGDATA.mUI_MAIN[tDataIndex], sX - 44, sY + 9);
        }
    }
    // Set Coords for Name
    if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
    {
        tCoord[0] = mDATA.aAction.aLocation[0];
        tCoord[1] = mDATA.aAction.aLocation[1] + 31.0;
        tCoord[2] = mDATA.aAction.aLocation[2];
    }
    else
    {
        tCoord[0] = mDATA.aAction.aLocation[0];
        tCoord[1] = mDATA.aAction.aLocation[1] + 21.0;
        tCoord[2] = mDATA.aAction.aLocation[2];
    }
    // Draw Infos
    if (mGXD.WorldCoordToScreenCoord(tCoord, &sX, &sY))
    {
        if (mMYINFO.mPresentZoneNumber == 270 || mMYINFO.mPresentZoneNumber == 271 || mMYINFO.mPresentZoneNumber == 272 || mMYINFO.mPresentZoneNumber == 273 || mMYINFO.mPresentZoneNumber == 274)
        {
            if (mDATA.aTitle >= 1)
            {
                sprintf(mBuffer, "%s(%s) [%d]", mDATA.aName, mUTIL.ReturnCharTitleName((mDATA.aTitle * 0.01) + 1, mDATA.aTitle), mDATA.aKillOtherTribe);
            }
            else
            {
                sprintf(mBuffer, "%s [%d]", mDATA.aName, mDATA.aKillOtherTribe);
            }
            if (mDATA.aZone270TypeBattleTeam == 1)
            {
                tColor = 32;
            }
            else
            {
                tColor = 13;
            }
            if (mDATA.aSpecialState == 1)
            {
                tColor = 35;
            }
            sprintf(mBuffer, "%s%s", mUTIL.ReturnRankName(mDATA.aRankPoint), mBuffer);
            mUTIL.DrawFont2D(mBuffer, sX - mUTIL.GetStringLength(mBuffer) / 2, sY, tColor);
            sY -= GIMAGE2D::GetYSize(&mGDATA.mUI_MAIN[32]) + 1;
            if (mDATA.aZone270TypeBattleTeam == 1)
            {
                GIMAGE2D::Display(&mGDATA.mUI_MAIN[32], sX - GIMAGE2D::GetXSize(&mGDATA.mUI_MAIN[32]) / 2, sY);
            }
            else
            {
                GIMAGE2D::Display(&mGDATA.mUI_MAIN[33], sX - GIMAGE2D::GetXSize(&mGDATA.mUI_MAIN[33]) / 2, sY);
            }
            sY -= GIMAGE2D::GetYSize(&mGDATA.mUI_MAIN[2863]) + 1;
            if (mDATA.aEffectValueForView[16] > 0)
            {
                GIMAGE2D::Display(&mGDATA.mUI_MAIN[2863], sX - GIMAGE2D::GetXSize(&mGDATA.mUI_MAIN[2863]) / 2, sY);
            }
        }
        else if (mMYINFO.mPresentZoneNumber == 291)
        {
            sprintf(mBuffer, "%s[%d]", mDATA.aName, mDATA.aKillOtherTribe);
            if (!strcmp(mDATA.aGuildName, mPLAY.mWorldInfo.mHoldingGuild))
            {
                if (!strcmp(mDATA.aPartyName, ""))
                {
                    tColor = 1;
                }
                else if (!strcmp(mDATA.aPartyName, mMYINFO.mAvatarInfo.aPartyName))
                {
                    tColor = 29;
                }
                else
                {
                    tColor = 1;
                }
            }
            else
            {
                tColor = 2;
            }
            if (mDATA.aSpecialState == 1)
            {
                tColor = 35;
            }
            sprintf(mBuffer, "%s%s", mUTIL.ReturnRankName(mDATA.aRankPoint), mBuffer);
            mUTIL.DrawFont2D(mBuffer, sX - mUTIL.GetStringLength(mBuffer) / 2, sY, tColor);
            sY -= 14;

            sprintf(mBuffer, "%s", mDATA.aGuildName);
            mUTIL.DrawFont2D(mBuffer, sX - mUTIL.GetStringLength(mBuffer) / 2, sY, tColor);
            sY -= GIMAGE2D::GetYSize(&mGDATA.mUI_MAIN[2863]) + 1;
            if (mDATA.aEffectValueForView[16] > 0)
            {
                GIMAGE2D::Display(&mGDATA.mUI_MAIN[2863], sX - GIMAGE2D::GetXSize(&mGDATA.mUI_MAIN[2863]) / 2, sY);
            }
        }
        else
        {
            // Start Draw on Non Event PVP Maps (324, 291)
            if (tDrawSort == 1 && mGAMEOPTION.tDisplayInfo != 1)
            {
                return;
            }
            if (mMYINFO.uUserSort < 1 && mUTIL.GetLengthXYZ(mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation) > 300.0f)
            {
                return;
            }

            // Draw if you are normal player
            if (mMYINFO.uUserSort <= 0 && mPLAY.CheckPossibleTribeAttack(mDATA.aTribe, mDATA.aZone270TypeBattleTeam, mDATA.aGuildName))
            {
                strcpy(mBuffer, "");
                if (mMYINFO.mPresentZoneNumber == 324)
                {

                }
                else
                {
                    if (mDATA.aTitle < 1)
                    {
                        sprintf(mBuffer, "%s(%d)", mDATA.aName, mDATA.aKillOtherTribe);
                    }
                    else
                    {
                        sprintf(mBuffer, "%s(%s)(%d)", mDATA.aName, mUTIL.ReturnCharTitleName((mDATA.aTitle * 0.01) + 1, mDATA.aTitle), mDATA.aKillOtherTribe);
                    }
                    tColor = 2;
                }
            }
            else // Draw if you are GM
            {
                // Format Name, Title
                if (mDATA.aDuelState[0] == 1)
                {
                    if (mDATA.aTitle >= 1)
                    {
                        sprintf(mBuffer, "%s(%s) %s", mDATA.aName, mUTIL.ReturnCharTitleName((mDATA.aTitle * 0.01) + 1, mDATA.aTitle), mMESSAGE.Return(72));
                    }
                    else
                    {
                        sprintf(mBuffer, "%s %s", mDATA.aName, mMESSAGE.Return(72));
                    }
                }
                else if (mDATA.aTitle >= 1)
                {
                    sprintf(mBuffer, "%s(%s)", mDATA.aName, mUTIL.ReturnCharTitleName((mDATA.aTitle * 0.01) + 1, mDATA.aTitle));
                }
                else
                {
                    sprintf(mBuffer, "%s", mDATA.aName);
                }
                if (mDATA.aDuelState[0] == 1)
                {
                    if (mDATA.aDuelState[2] == 1)
                    {
                        tColor = 3;
                    }
                    else
                    {
                        tColor = 4;
                    }
                }
                else
                {
                    tColor = 0;
                    if (strcmp(mDATA.aPartyName, "") && !strcmp(mDATA.aPartyName, mMYINFO.mAvatarInfo.aPartyName) && mIndex)
                    {
                        tColor = 29;
                    }
                    if (strcmp(mDATA.aGuildName, "") && !strcmp(mDATA.aGuildName, mMYINFO.mAvatarInfo.aGuildName) && mIndex)
                    {
                        tColor = 9;
                    }
                    if (!tColor)
                    {
                        tColor = 1;
                    }
                }
            }

            // Begin Draw 
            if (mDATA.aAutoHuntState == 1)
            {
                tColor = 5;
            }
            if (mDATA.aSpecialState == 1)
            {
                tColor = 35;
            }
            if (mDATA.aAction.aSort == 12)
            {
                tColor = 44;
            }
            // Draw Name and Rank Name
            sprintf(mDrawBuffer, "%s%s", mUTIL.ReturnRankName(mDATA.aRankPoint), mBuffer);
            mUTIL.DrawFont2D(mDrawBuffer, sX - mUTIL.GetStringLength(mDrawBuffer) / 2, sY, tColor);


            if (mINPUT.mDisplayInfoState == 1)
            {
                sY -= 14;
                // Draw Guild Name
                if (strcmp(mDATA.aGuildName, "") != 0)
                {
                    if (mDATA.aGuildRole == 0)
                    {
                        sprintf(mBuffer, "%s %s", mMESSAGE.Return(73), mDATA.aGuildName);
                    }
                    else if (mDATA.aGuildRole == 1)
                    {
                        sprintf(mBuffer, "%s %s", mMESSAGE.Return(74), mDATA.aGuildName);
                    }
                    else if (mDATA.aGuildRole == 2)
                    {
                        if (!strcmp(mDATA.aCallName, ""))
                        {
                            sprintf(mBuffer, "%s", mDATA.aGuildName);
                        }
                        else
                        {
                            sprintf(mBuffer, "(%s) %s", mDATA.aCallName, mDATA.aGuildName);
                        }
                    }
                    if (mPLAY.CheckPossibleTribeAttack(mDATA.aTribe, mDATA.aZone270TypeBattleTeam, mDATA.aGuildName))
                    {
                        if (mMYINFO.mPresentZoneNumber == 324)
                        {
                            switch (mDATA.aZone270TypeBattleTeam)
                            {
                            case 0: tColor = 5; break;
                            case 1: tColor = 33; break;
                            case 2: tColor = 24; break;
                            case 3: tColor = 44; break;
                            default: break;
                            }
                        }
                        else
                        {
                            switch (mDATA.aTribe)
                            {
                            case 0: tColor = 5; break;
                            case 1: tColor = 33; break;
                            case 2: tColor = 24; break;
                            case 3: tColor = 44; break;
                            default: break;
                            }
                        }
                    }
                    else
                    {
                        tColor = 9;
                    }
                    mUTIL.DrawFont2D(mBuffer, sX - mUTIL.GetStringLength(mBuffer) / 2, sY, tColor);
                    sY -= 14;
                }

                // Draw PShop Name
                if (mDATA.aPShopState == 1)
                {
                    mUTIL.DrawFont2D(mDATA.aPShopName, sX - mUTIL.GetStringLength(mDATA.aPShopName) / 2, sY, 7);
                    sY -= 14;
                }
                // Draw General Chat
                if (mGeneralChatState && !mDATA.aPShopState)
                {
                    mUTIL.DrawFont2D(mGeneralChatContent, sX - mUTIL.GetStringLength(mGeneralChatContent) / 2, sY, mFONTCOLOR.mData[45]);
                    sY -= 17;
                }
                // Draw Effects
                if (mDATA.aEffectValueForView[16] > 0)
                {
                    GIMAGE2D::Display(&mGDATA.mUI_MAIN[2863], sX - GIMAGE2D::GetXSize(&mGDATA.mUI_MAIN[2863]) / 2, sY - GIMAGE2D::GetYSize(&mGDATA.mUI_MAIN[2863]) / 2);
                    sY -= 26;
                }
                if (mDATA.aEffectValueForView[19] > 0)
                {
                    GIMAGE2D::Display(&mGDATA.mUI_MAIN[3335], sX - GIMAGE2D::GetXSize(&mGDATA.mUI_MAIN[3335]) / 2, sY - GIMAGE2D::GetYSize(&mGDATA.mUI_MAIN[3335]) / 2);
                    sY -= 26;
                }
                if (mDATA.aEffectValueForView[20] > 0)
                {
                    GIMAGE2D::Display(&mGDATA.mUI_MAIN[3336], sX - GIMAGE2D::GetXSize(&mGDATA.mUI_MAIN[3336]) / 2, sY - GIMAGE2D::GetYSize(&mGDATA.mUI_MAIN[3336]) / 2);
                    sY -= 26;
                }
                if (mDATA.aEffectValueForView[25] > 0)
                {
                    GIMAGE2D::Display(&mGDATA.mUI_MAIN[3337], sX - GIMAGE2D::GetXSize(&mGDATA.mUI_MAIN[3337]) / 2, sY - GIMAGE2D::GetYSize(&mGDATA.mUI_MAIN[3337]) / 2);
                    sY -= 26;
                }
                if (mDATA.aEffectValueForView[27] > 0)
                {
                    GIMAGE2D::Display(&mGDATA.mUI_MAIN[3338], sX - GIMAGE2D::GetXSize(&mGDATA.mUI_MAIN[3338]) / 2, sY - GIMAGE2D::GetYSize(&mGDATA.mUI_MAIN[3338]) / 2);
                    sY -= 26;
                }
                if (!mIndex && mMYINFO.mAvatarInfo.aActiveBoozeTime > 0)
                {
                    GIMAGE2D::Display(&mGDATA.mUI_MAIN[3953], sX - GIMAGE2D::GetXSize(&mGDATA.mUI_MAIN[3953]) / 2, sY - GIMAGE2D::GetYSize(&mGDATA.mUI_MAIN[3953]) / 2);
                    sY -= 26;
                }
                if (mDATA.aEffectValueForView[28] > 0)
                {
                    GIMAGE2D::Display(&mGDATA.mUI_MAIN[3337], sX - GIMAGE2D::GetXSize(&mGDATA.mUI_MAIN[3337]) / 2, sY - GIMAGE2D::GetYSize(&mGDATA.mUI_MAIN[3337]) / 2);
                    sY -= 26;
                }
                // Draw GM Info For Player
                if (mMYINFO.uUserSort > 0)
                {
                    int tEffectLoc[3];

                    tEffectLoc[0] = mDATA.aAction.aLocation[0];
                    tEffectLoc[1] = mDATA.aAction.aLocation[1];
                    tEffectLoc[2] = mDATA.aAction.aLocation[2];


                    /*        sprintf(mBuffer, "DIETY:[%d] REBIRTH::[%d]", mDATA.aLevel2, mDATA.aRebirth);
                       mUTIL.DrawFont2D(mBuffer, sX - mUTIL.GetStringLength(mBuffer) / 2, sY, 3);
                       sY -= 14;*/

                    sprintf(mBuffer, "X::[%d]   Y::[%d]   Z::[%d]", tEffectLoc[0], tEffectLoc[1], tEffectLoc[2]);//GM coordonate
                    mUTIL.DrawFont2D(mBuffer, sX - mUTIL.GetStringLength(mBuffer) / 2, sY, 3);
                    sY -= 14;


                    /*sprintf(mBuffer, "GOD:[%d] REBIRTH::[%d]", mDATA.aLevel2, mDATA.aRebirth);
                      mUTIL.DrawFont2D(mBuffer, sX - mUTIL.GetStringLength(mBuffer) / 2, sY, 3);
                      sY -= 14;*/

                    sprintf(mBuffer, "LEVEL::[%d] REBIRTH::[%d]", mDATA.aLevel2 + mDATA.aLevel1, mDATA.aRebirth);
                    mUTIL.DrawFont2D(mBuffer, sX - mUTIL.GetStringLength(mBuffer) / 2, sY, 3);
                    sY -= 14;

                    sprintf(mBuffer, "RANK::[%d]", mDATA.aRankPoint);
                    mUTIL.DrawFont2D(mBuffer, sX - mUTIL.GetStringLength(mBuffer) / 2, sY, 3);
                    sY -= 14;

                    sprintf(mBuffer, "CRKDEF::[%d]", mFACTOR.GetCriticalDefense());
                    mUTIL.DrawFont2D(mBuffer, sX - mUTIL.GetStringLength(mBuffer) / 2, sY, 3);
                }
            }

        }

    }
}

BOOL PLAY::CheckPossibleChangeAction()
{
    switch (mAVATAR_OBJECT[0].mDATA.aAction.aSort)
    {
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 14:
    case 15:
    case 31:
    case 32:
    case 40:
    case 64:
        return TRUE;
    default:
        return FALSE;
    }
}
int PLAY::ReturnAlliance(int tTribe)
{
    if (mWorldInfo.mAllianceState[0][0] == tTribe)
    {
        return mWorldInfo.mAllianceState[0][1];
    }
    if (mWorldInfo.mAllianceState[0][1] == tTribe)
    {
        return mWorldInfo.mAllianceState[0][0];
    }
    if (mWorldInfo.mAllianceState[1][0] == tTribe)
    {
        return mWorldInfo.mAllianceState[1][1];
    }
    if (mWorldInfo.mAllianceState[1][1] == tTribe)
    {
        return mWorldInfo.mAllianceState[1][0];
    }
    return -1;
}
int PLAY::ReturnDamageUpForTribeSymbol( int a2 )
{
    int tAlliance = -1;
    int tDmgUp1 = 0;
    int tDmgUp2 = 0;
    int tDmgUp3 = 0;
    int tDmgUp4 = 0;

    tAlliance = mPLAY.ReturnAlliance(0);
    tDmgUp1 = 0;
    if (!mWorldInfo.mTribe1Symbol || mWorldInfo.mTribe1Symbol == tAlliance)
    {
        if (!mWorldInfo.mTribe2Symbol || mWorldInfo.mTribe2Symbol == tAlliance)
        {
            tDmgUp1 = 500;
        }
        if (!mWorldInfo.mTribe3Symbol || mWorldInfo.mTribe3Symbol == tAlliance)
        {
            tDmgUp1 += 500;
        }
        if (!mWorldInfo.mTribe4Symbol || mWorldInfo.mTribe4Symbol == tAlliance)
        {
            tDmgUp1 += 500;
        }
        if (mWorldInfo.mMonsterSymbol)
        {
            if (tAlliance != -1 && mWorldInfo.mMonsterSymbol == tAlliance)
            {
                tDmgUp1 += 500;
            }
        }
        else
        {
            tDmgUp1 += 500;
        }
        if (!tDmgUp1 && mPLAY.ReturnSmallTribeAdvantage(0))
        {
            tDmgUp1 = 500;
        }
    }
    tAlliance = mPLAY.ReturnAlliance(1);
    tDmgUp2 = 0;
    if (mWorldInfo.mTribe2Symbol == 1 || mWorldInfo.mTribe2Symbol == tAlliance)
    {
        if (mWorldInfo.mTribe1Symbol == 1 || mWorldInfo.mTribe1Symbol == tAlliance)
        {
            tDmgUp2 = 500;
        }
        if (mWorldInfo.mTribe3Symbol == 1 || mWorldInfo.mTribe3Symbol == tAlliance)
        {
            tDmgUp2 += 500;
        }
        if (mWorldInfo.mTribe4Symbol == 1 || mWorldInfo.mTribe4Symbol == tAlliance)
        {
            tDmgUp2 += 500;
        }
        if (mWorldInfo.mMonsterSymbol == 1)
        {
            tDmgUp2 += 500;
        }
        else if (tAlliance != -1 && mWorldInfo.mMonsterSymbol == tAlliance)
        {
            tDmgUp2 += 500;
        }
        if (!tDmgUp2 && mPLAY.ReturnSmallTribeAdvantage(1))
        {
            tDmgUp2 = 500;
        }
    }
    tAlliance = mPLAY.ReturnAlliance(2);
    tDmgUp3 = 0;
    if (mWorldInfo.mTribe3Symbol == 2 || mWorldInfo.mTribe3Symbol == tAlliance)
    {
        if (mWorldInfo.mTribe1Symbol == 2 || mWorldInfo.mTribe1Symbol == tAlliance)
        {
            tDmgUp3 = 500;
        }
        if (mWorldInfo.mTribe2Symbol == 2 || mWorldInfo.mTribe2Symbol == tAlliance)
        {
            tDmgUp3 += 500;
        }
        if (mWorldInfo.mTribe4Symbol == 2 || mWorldInfo.mTribe4Symbol == tAlliance)
        {
            tDmgUp3 += 500;
        }
        if (mWorldInfo.mMonsterSymbol == 2)
        {
            tDmgUp3 += 500;
        }
        else if (tAlliance != -1 && mWorldInfo.mMonsterSymbol == tAlliance)
        {
            tDmgUp3 += 500;
        }
        if (!tDmgUp3 && mPLAY.ReturnSmallTribeAdvantage(2))
        {
            tDmgUp3 = 500;
        }
    }
    tAlliance = mPLAY.ReturnAlliance(3);
    tDmgUp4 = 0;
    if (mWorldInfo.mTribe4Symbol == 3 || mWorldInfo.mTribe4Symbol == tAlliance)
    {
        if (mWorldInfo.mTribe1Symbol == 3 || mWorldInfo.mTribe1Symbol == tAlliance)
        {
            tDmgUp4 = 500;
        }
        if (mWorldInfo.mTribe2Symbol == 3 || mWorldInfo.mTribe2Symbol == tAlliance)
        {
            tDmgUp4 += 500;
        }
        if (mWorldInfo.mTribe3Symbol == 3 || mWorldInfo.mTribe3Symbol == tAlliance)
        {
            tDmgUp4 += 500;
        }
        if (mWorldInfo.mMonsterSymbol == 3)
        {
            tDmgUp4 += 500;
        }
        else if (tAlliance != -1 && mWorldInfo.mMonsterSymbol == tAlliance)
        {
            tDmgUp4 += 500;
        }
        if (!tDmgUp4 && mPLAY.ReturnSmallTribeAdvantage(3))
        {
            tDmgUp4 = 500;
        }
    }
    switch (a2)
    {
    case 0:
        return tDmgUp1;
    case 1:
        return tDmgUp2;
    case 2:
        return tDmgUp3;
    case 3:
        return tDmgUp4;
    default:
        return 0;
    }
}

int PLAY::ReturnDamageDownForTribeSymbol(int a2)
{
    int tAlliance = -1;
    int tDmgDown1 = 0;
    int tDmgDown2 = 0;
    int tDmgDown3 = 0;
    int tDmgDown4 = 0;

    tAlliance = mPLAY.ReturnAlliance(0);
    tDmgDown1 = 0;
    if(mWorldInfo.mTribe1Symbol && mWorldInfo.mTribe1Symbol != tAlliance)
    {
        tDmgDown1 = -20;
    }
    tAlliance = mPLAY.ReturnAlliance(1);
    tDmgDown2 = 0;
    if (mWorldInfo.mTribe2Symbol != 1 && mWorldInfo.mTribe2Symbol != tAlliance)
    {
        tDmgDown2 = -20;
    }
    tAlliance = mPLAY.ReturnAlliance(2);
    tDmgDown3 = 0;
    if (mWorldInfo.mTribe3Symbol != 2 && mWorldInfo.mTribe3Symbol != tAlliance)
    {
        tDmgDown3 = -20;
    }
    tAlliance = mPLAY.ReturnAlliance(3);
    tDmgDown4 = 0;
    if (mWorldInfo.mTribe4Symbol != 3 && mWorldInfo.mTribe4Symbol != tAlliance)
    {
        tDmgDown4 = -20;
    }
    switch (a2)
    {
    case 0:
        return tDmgDown1;
    case 1:
        return tDmgDown2;
    case 2:
        return tDmgDown3;
    case 3:
        return tDmgDown4;
    default:
        return 0;
    }
}

int PLAY::ReturnTribeSymbolCount( int tTribe )
{
    int v4; 
    int v5; 

    v5 = mPLAY.ReturnAlliance(tTribe);
    v4 = 0;
    if (mWorldInfo.mTribe1Symbol == tTribe || mWorldInfo.mTribe1Symbol == v5)
    {
        v4 = 1;
    }
    if (mWorldInfo.mTribe2Symbol == tTribe || mWorldInfo.mTribe2Symbol == v5)
    {
        ++v4;
    }
    if (mWorldInfo.mTribe3Symbol == tTribe || mWorldInfo.mTribe3Symbol == v5)
    {
        ++v4;
    }
    if (mWorldInfo.mTribe4Symbol == tTribe || mWorldInfo.mTribe4Symbol == v5)
    {
        ++v4;
    }
    if (mWorldInfo.mMonsterSymbol == tTribe)
    {
        ++v4;
    }
    else if (v5 != -1 && mWorldInfo.mMonsterSymbol == v5)
    {
        ++v4;
    }
    return v4;
}
int PLAY::ReturnTribePointWithAlliance( int tTribe )
{
    int tAlliance;

    tAlliance = mPLAY.ReturnAlliance(tTribe);
    switch (tTribe)
    {
    case 0:
        if (tAlliance == -1)
        {
            return mPLAY.mWorldInfo.mTribePoint[0];
        }
        return mWorldInfo.mTribePoint[tAlliance] + mWorldInfo.mTribePoint[0];

    case 1:
        if (tAlliance == -1)
        {
            return mPLAY.mWorldInfo.mTribePoint[1];
        }
        return mWorldInfo.mTribePoint[tAlliance] + mWorldInfo.mTribePoint[1];

    case 2:
        if (tAlliance == -1)
        {
            return mPLAY.mWorldInfo.mTribePoint[2];
        }
        return mWorldInfo.mTribePoint[tAlliance] + mWorldInfo.mTribePoint[2];

    case 3:
        if (tAlliance == -1)
        {
            return mPLAY.mWorldInfo.mTribePoint[3];
        }
        return mWorldInfo.mTribePoint[tAlliance] + mWorldInfo.mTribePoint[3];

    default:
        return 0;
    }
}

int PLAY::ReturnSmallTribe()
{
    int v2; 
    int i; 

    v2 = 0;
    for (i = 1; i < 4; ++i)
    {
        if (mWorldInfo.mTribePoint[i] < mWorldInfo.mTribePoint[v2])
        {
            v2 = i;
        }
    }
    return v2;
}

BOOL PLAY::ReturnSmallTribeAdvantage( int a2 )
{
    int v3;
    int i;

    v3 = -1;
    for (i = 0; i < 4; ++i)
    {
        if (mWorldInfo.mTribePoint[i] >= 100)
        {
            if (v3 == -1)
            {
                v3 = i;
            }
            else if (mWorldInfo.mTribePoint[i] < mWorldInfo.mTribePoint[v3])
            {
                v3 = i;
            }
        }
    }
    return v3 == a2;
}
BOOL PLAY::CheckPossibleMonsterTarget(int aSort)
{
    return aSort != 12 && aSort != 19;
}
void PLAY::ReturnToTown( int tSort )
{
    float tCoord[3]; 
    int tZoneNumber;

    if (mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort != 12 || tSort)
    {
        tZoneNumber = 0;
        switch (mMYINFO.mAvatarInfo.aTribe)
        {
        case 0:
            tZoneNumber = 1;
            break;
        case 1:
            tZoneNumber = 6;
            break;
        case 2:
            tZoneNumber = 11;
            break;
        case 3:
            tZoneNumber = 140;
            break;
        default:
            break;
        }
        if (tZoneNumber && tZoneNumber != mMYINFO.mPresentZoneNumber)
        {
            if (!mZONEMOVEINFO.ReturnNPCTelepoterCoord2(mMYINFO.mAvatarInfo.aTribe, tZoneNumber, tCoord))
            {
                mZONEMOVEINFO.SetFirstCoord(tZoneNumber, tCoord);
            }
            if (!mMYINFO.mMoveZoneState)
            {
                mMYINFO.mMoveZoneState = 1;
                if (tSort)
                {
                    mMYINFO.mMoveZoneSort = 3;
                    mMYINFO.mMoveZoneValue = 0;
                    mMYINFO.mNextZoneNumber = tZoneNumber;
                    memset(&mMYINFO.mAction, 0, sizeof(mMYINFO.mAction));
                    mMYINFO.mAction.aType = 0;
                    mMYINFO.mAction.aSort = 0;
                }
                else
                {
                    mMYINFO.mMoveZoneSort = 7;
                    mMYINFO.mMoveZoneValue = 0;
                    mMYINFO.mNextZoneNumber = tZoneNumber;
                    memset(&mMYINFO.mAction, 0, sizeof(mMYINFO.mAction));
                    mMYINFO.mAction.aType = 0;
                    mMYINFO.mAction.aSort = 1;
                }
                mMYINFO.mAction.aFrame = 0.0;
                mMYINFO.mAction.aLocation[0] = tCoord[0];
                mMYINFO.mAction.aLocation[1] = tCoord[1];
                mMYINFO.mAction.aLocation[2] = tCoord[2];
                mMYINFO.mAction.aFront = (rand() % 360);
                mMYINFO.mAction.aTargetFront = mMYINFO.mAction.aFront;
                mTRANSFER.T_DEMAND_ZONE_SERVER_INFO_2(mMYINFO.mMoveZoneSort, tZoneNumber);
            }
        }
    }
}
void PLAY::ReturnToTownFromZone194()
{
    float tCoord[3];
    int tZoneNumber; 

    tZoneNumber = 0;
    switch (mMYINFO.mAvatarInfo.aTribe)
    {
    case 0:
        tZoneNumber = 1;
        break;
    case 1:
        tZoneNumber = 6;
        break;
    case 2:
        tZoneNumber = 11;
        break;
    case 3:
        tZoneNumber = 140;
        break;
    default:
        break;
    }
    if (tZoneNumber && tZoneNumber != mMYINFO.mPresentZoneNumber)
    {
        if (!mZONEMOVEINFO.ReturnNPCTelepoterCoord2(mMYINFO.mAvatarInfo.aTribe, tZoneNumber, tCoord))
        {
            mZONEMOVEINFO.SetFirstCoord(tZoneNumber, tCoord);
        }
        if (!mMYINFO.mMoveZoneState)
        {
            mMYINFO.mMoveZoneState = 1;
            mMYINFO.mMoveZoneSort = 7;
            mMYINFO.mMoveZoneValue = 0;
            mMYINFO.mNextZoneNumber = tZoneNumber;
            memset(&mMYINFO.mAction, 0, sizeof(mMYINFO.mAction));
            mMYINFO.mAction.aType = 0;
            mMYINFO.mAction.aSort = 1;
            mMYINFO.mAction.aFrame = 0.0;
            mMYINFO.mAction.aLocation[0] = tCoord[0];
            mMYINFO.mAction.aLocation[1] = tCoord[1];
            mMYINFO.mAction.aLocation[2] = tCoord[2];
            mMYINFO.mAction.aFront = (rand() % 360);
            mMYINFO.mAction.aTargetFront = mMYINFO.mAction.aFront;
            mTRANSFER.T_DEMAND_ZONE_SERVER_INFO_2(mMYINFO.mMoveZoneSort, tZoneNumber);
        }
    }
}

void PLAY::ReturnToZone037()
{
    if (mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort != 12 && mMYINFO.mPresentZoneNumber != 37 && !mMYINFO.mMoveZoneState)
    {
        mMYINFO.mMoveZoneState = 1;
        mMYINFO.mMoveZoneSort = 11;
        mMYINFO.mMoveZoneValue = 0;
        mMYINFO.mNextZoneNumber = 37;
        memset(&mMYINFO.mAction, 0, sizeof(mMYINFO.mAction));
        mMYINFO.mAction.aType = 0;
        mMYINFO.mAction.aSort = 1;
        mMYINFO.mAction.aFrame = 0.0;
        mMYINFO.mAction.aLocation[0] = 6.0;
        mMYINFO.mAction.aLocation[1] = 97.0;
        mMYINFO.mAction.aLocation[2] = -3259.0;
        mMYINFO.mAction.aFront = (rand() % 360);
        mMYINFO.mAction.aTargetFront = mMYINFO.mAction.aFront;
        mTRANSFER.T_DEMAND_ZONE_SERVER_INFO_2(mMYINFO.mMoveZoneSort, 37);
    }
}
void PLAY::ReturnToTownOffAuto( int tSort )
{
    float tCoord[3];
    int tZoneNumber; 

    tZoneNumber = 0;
    if (tSort)
    {
        if (tSort == 1 && mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort != 12)
            return;
    }
    else if (mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 12)
    {
        return;
    }
    switch (mMYINFO.mAvatarInfo.aTribe)
    {
    case 0:
        tZoneNumber = 1;
        break;
    case 1:
        tZoneNumber = 6;
        break;
    case 2:
        tZoneNumber = 11;
        break;
    case 3:
        tZoneNumber = 140;
        break;
    default:
        break;
    }
    if (tZoneNumber)
    {
        if (!mZONEMOVEINFO.ReturnNPCTelepoterCoord2(mMYINFO.mAvatarInfo.aTribe, tZoneNumber, tCoord))
        {
            mZONEMOVEINFO.SetFirstCoord(tZoneNumber, tCoord);
        }
        if (tZoneNumber == mMYINFO.mPresentZoneNumber)
        {
            if (tSort)
            {
                if (tSort == 1)
                {
                    mMYINFO.A000(tCoord, 0, -1, 0, 0, 0, 0);
                    mMYINFO.mAvatarInfo.aAutoHuntState = 0;
                    mTRANSFER.T_AUTO_CONFIG_SEND(0);
                }
            }
            else
            {
                mMYINFO.A002_1(tCoord, 0, -1, 0, 0, 0, 0);
                mMYINFO.mAvatarInfo.aAutoHuntState = 0;
                mTRANSFER.T_AUTO_CONFIG_SEND(0);
            }
        }
        else if (!mMYINFO.mMoveZoneState && !mMYINFO.mNetworkLock && !mMYINFO.mMoveZoneState)
        {
            mMYINFO.mAvatarInfo.aAutoHuntState = 0;
            mTRANSFER.T_AUTO_CONFIG_SEND(0);
            mMYINFO.mMoveZoneState = 1;
            mMYINFO.mMoveZoneSort = 7;
            mMYINFO.mMoveZoneValue = 0;
            mMYINFO.mNextZoneNumber = tZoneNumber;
            memset(&mMYINFO.mAction, 0, sizeof(mMYINFO.mAction));
            mMYINFO.mAction.aType = 0;
            mMYINFO.mAction.aSort = 1;
            mMYINFO.mAction.aFrame = 0.0;
            mMYINFO.mAction.aLocation[0] = tCoord[0];
            mMYINFO.mAction.aLocation[1] = tCoord[1];
            mMYINFO.mAction.aLocation[2] = tCoord[2];
            mMYINFO.mAction.aFront = (rand() % 360);
            mMYINFO.mAction.aTargetFront = mMYINFO.mAction.aFront;
            mTRANSFER.T_DEMAND_ZONE_SERVER_INFO_2(mMYINFO.mMoveZoneSort, tZoneNumber);
        }
    }
}
BOOL PLAY::CheckPossibleAvatarTarget(int aSort)
{
    return aSort != 12;
}
BOOL PLAY::CheckRAttackRange(int tSkillNumber, float tLocation1[3], float tLocation2[3], float tRange)
{
    float v5;

    v5 = mUTIL.GetLengthXYZ(tLocation1, tLocation2);
    return mFACTOR.GetAttackRadius(tSkillNumber) + tRange > v5;
}
int PLAY::CheckPossibleTribeAttack( int tTribe, int tZone270Team, char* tGuildName )
{
    int v5;

    v5 = mZONEMAININFO.ReturnZoneTribeInfo2(mMYINFO.mPresentZoneNumber);
    switch (v5)
    {
    case 0:
        return 0;
    case 1:
        switch (mMYINFO.mPresentZoneNumber)
        {
        case 291:
        case 138:
        case 139:
        case 165:
        case 166:
            if (!strcmp(mMYINFO.mAvatarInfo.aGuildName, tGuildName))
            {
                return 0;
            }
            break;
        case 324:
            if (mPLAY.mAVATAR_OBJECT[0].mDATA.aZone270TypeBattleTeam == tZone270Team)
            {
                return 0;
            }
            break;
        case 270:
        case 271:
        case 272:
        case 273:
        case 274:
            if (mPLAY.mAVATAR_OBJECT[0].mDATA.aZone270TypeBattleTeam == tZone270Team)
            {
                return 0;
            }
            break;
        case 54:
            if (tTribe == mMYINFO.mAvatarInfo.aTribe)
            {
                return 0;
            }
            break;
        default:
            if (tTribe == mMYINFO.mAvatarInfo.aTribe || tTribe == mPLAY.ReturnAlliance(mMYINFO.mAvatarInfo.aTribe))
            {
                return 0;
            }
            break;
        }
        break;

    case 2:
        if (tTribe == mMYINFO.mAvatarInfo.aTribe)
        {
            return 0;
        }
        break;

    default:
        return 0;
    }
    return 1;
}
void PLAY::ProcessForAttackResult(ATTACK_FOR_PROTOCOL* tAttackInfo)
{
    int sX;
    int sY;
    char mBuffer[1000];
    char mTempBuffer[1000];
    int tDamageValue = 0;
    int i, j, k;
    int tIndex = 0;
    int tSndIndex = 0;
    ITEM_INFO* tITEM;
    int tMonsDmg;
    int tMonsRealDmg;

    switch (tAttackInfo->mCase)
    {
    case 1:
    case 2:
        if (tAttackInfo->mAttackResultValue)
        {
            // Attacker
            if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex1 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber1)
            {
                strcpy(mBuffer, mMESSAGE.Return(198));
                tDamageValue = tAttackInfo->mAttackViewDamageValue - tAttackInfo->mAttackElementDamage;
                if (tDamageValue < 0)
                {
                    tDamageValue = 0;
                }
                if (tAttackInfo->mAttackCriticalExist)
                {
                    sprintf(mTempBuffer, "%s(+%d)", mMESSAGE.Return(200), tDamageValue);
                }
                else
                {
                    sprintf(mTempBuffer, "%s(+%d)", mMESSAGE.Return(199), tDamageValue);
                }
                strcat(mBuffer, mTempBuffer);
                if (tAttackInfo->mAttackElementDamage > 0)
                {
                    sprintf(mTempBuffer, " %s(+%d)", mMESSAGE.Return(201), tAttackInfo->mAttackElementDamage);
                    strcat(mBuffer, mTempBuffer);
                }
                mBASICUI.Insert1(mBuffer, 3);
            }
            // Being Attacked
            if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex2 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber2)
            {
                strcpy(mBuffer, mMESSAGE.Return(203));
                tDamageValue = tAttackInfo->mAttackViewDamageValue - tAttackInfo->mAttackElementDamage;
                if (tAttackInfo->mAttackCriticalExist)
                {
                    sprintf(mTempBuffer, "%s(-%d)", mMESSAGE.Return(200), tDamageValue);
                }
                else
                {
                    sprintf(mTempBuffer, "%s(-%d)", mMESSAGE.Return(199), tDamageValue);
                }
                strcat(mBuffer, mTempBuffer);
                if (tAttackInfo->mAttackElementDamage > 0)
                {
                    sprintf(mTempBuffer, " %s(-%d)", mMESSAGE.Return(201), tAttackInfo->mAttackElementDamage);
                    strcat(mBuffer, mTempBuffer);
                }
                // Display Attacker Name
                for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT; i++)
                {
                    if (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState)
                    {
                        continue;
                    }
                    if (mPLAY.mAVATAR_OBJECT[i].mIndex == tAttackInfo->mServerIndex1 && mPLAY.mAVATAR_OBJECT[i].mUniqueNumber == tAttackInfo->mUniqueNumber1)
                    {
                        break;
                    }
                }
                if (i < mPLAY.MAX_AVATAR_OBJECT)
                {
                    sprintf(mTempBuffer, "[%s]", mPLAY.mAVATAR_OBJECT[i].mDATA.aName);
                }
                else
                {
                    sprintf(mTempBuffer, "[]");
                }
                strcat(mBuffer, mTempBuffer);
                //
                mBASICUI.Insert1(mBuffer, 2);
                if (mPLAY.mAVATAR_OBJECT[0].mDATA.aLifeValue - tAttackInfo->mAttackRealDamageValue < 1)
                {
                    mMYINFO.mbIsPVPDie = 1;
                }
                if (mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 1 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 5 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 6 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 7)
                {
                    mMYINFO.A010();
                }
            }

            // Set Blood EFfect For Avatar
            for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || mPLAY.mAVATAR_OBJECT[i].mIndex != tAttackInfo->mServerIndex2 || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != tAttackInfo->mUniqueNumber2); ++i)
                ;
            if (i < mPLAY.MAX_AVATAR_OBJECT)
            {
                if (tAttackInfo->mAttackCriticalExist == 1)
                {
                    for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
                        ;
                    if (j < mPLAY.MAX_EFFECT_OBJECT)
                    {
                        mPLAY.mEFFECT_OBJECT[j].SetCriticalEffectForAvatar( 1, &mPLAY.mAVATAR_OBJECT[i], i == 0);
                    }
                }
                mPLAY.mAVATAR_OBJECT[i].mDATA.aLifeValue -= tAttackInfo->mAttackRealDamageValue;
                memcpy(&mPLAY.mAVATAR_OBJECT[i].tAvatarAttackInfo, tAttackInfo, sizeof(ATTACK_FOR_PROTOCOL));
                for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
                    ;
                if (j < mPLAY.MAX_EFFECT_OBJECT)
                {
                    mPLAY.mEFFECT_OBJECT[j].SetBloodForAvatar( &mPLAY.mAVATAR_OBJECT[i], 1);
                }
            }

            // Set Sound for Hit
            for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || mPLAY.mAVATAR_OBJECT[i].mIndex != tAttackInfo->mServerIndex1 || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != tAttackInfo->mUniqueNumber1); ++i)
                ;
            if (i < mPLAY.MAX_AVATAR_OBJECT)
            {
                tITEM = mITEM.Search(tAttackInfo->mAttackResultValue - 1);
                tIndex = 3;
                if (tITEM)
                {
                    switch (tITEM->iSort)
                    {
                    case 13: tIndex = 0; break;
                    case 14: tIndex = 1; break;
                    case 15: tIndex = 2; break;
                    case 16: tIndex = 0; break;
                    case 17: tIndex = 1; break;
                    case 18: tIndex = 2; break;
                    case 19: tIndex = 0; break;
                    case 20: tIndex = 1; break;
                    case 21: tIndex = 2; break;
                    default: break;
                    }
                }
                tSndIndex = 0;
                if (tAttackInfo->mAttackActionValue1 == 2)
                {
                    if (tAttackInfo->mAttackActionValue2 == 78)
                    {
                        return;
                    }
                    tSndIndex = mPLAY.ReturnSoundIndexFromHit(tAttackInfo->mAttackActionValue2);
                }
                GSOUND::Play(&mGDATA.mSOUND_6[mPLAY.mAVATAR_OBJECT[i].mDATA.aPreviousTribe][mPLAY.mAVATAR_OBJECT[i].mDATA.aGender][tIndex][tSndIndex], mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
                if (tAttackInfo->mAttackCriticalExist == 1)
                {
                    GSOUND::Play(&mGDATA.mSOUND_6[mPLAY.mAVATAR_OBJECT[i].mDATA.aPreviousTribe][mPLAY.mAVATAR_OBJECT[i].mDATA.aGender][tIndex][9], mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
                }
            }
        }
        else
        {
            if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex1 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber1)
            {
                strcpy(mBuffer, mMESSAGE.Return(197));
                mBASICUI.Insert1(mBuffer, 17);
            }
            if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex2 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber2)
            {
                strcpy(mBuffer, mMESSAGE.Return(202));
                mBASICUI.Insert1(mBuffer, 21);
                if (mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 1 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 5 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 6 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 7)
                {
                    mMYINFO.A008();
                }
            }
        }
        return;

    case 3:
        if (!tAttackInfo->mAttackResultValue)
        {
            if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex1 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber1)
            {
                strcpy(mBuffer, mMESSAGE.Return(197));
                mBASICUI.Insert1(mBuffer, 17);
            }
            return;
        }
        if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex1 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber1)
        {
            strcpy(mBuffer, mMESSAGE.Return(198));
            tDamageValue = tAttackInfo->mAttackViewDamageValue - tAttackInfo->mAttackElementDamage;
            if (tDamageValue < 0)
            {
                tDamageValue = 0;
            }
            if (tAttackInfo->mAttackCriticalExist)
            {
                sprintf(mTempBuffer, "%s(+%d)", mMESSAGE.Return(200), tDamageValue);
            }
            else
            {
                sprintf(mTempBuffer, "%s(+%d)", mMESSAGE.Return(199), tDamageValue);
            }
            strcat(mBuffer, mTempBuffer);
            if (tAttackInfo->mAttackElementDamage > 0)
            {
                sprintf(mTempBuffer, " %s(+%d)", mMESSAGE.Return(201), tAttackInfo->mAttackElementDamage);
                strcat(mBuffer, mTempBuffer);
            }
            mBASICUI.Insert1(mBuffer, 3);
        }

        // Set Critical Effect
        for (i = 0; i < mPLAY.MAX_MONSTER_OBJECT && (!mPLAY.mMONSTER_OBJECT[i].mCheckValidState || mPLAY.mMONSTER_OBJECT[i].mServerIndex != tAttackInfo->mServerIndex2 || mPLAY.mMONSTER_OBJECT[i].mUniqueNumber != tAttackInfo->mUniqueNumber2); ++i)
            ;
        if (i < mPLAY.MAX_MONSTER_OBJECT)
        {
            if (tAttackInfo->mAttackCriticalExist == 1)
            {
                for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
                    ;
                if (j < mPLAY.MAX_EFFECT_OBJECT)
                {
                    mPLAY.mEFFECT_OBJECT[j].SetCriticalEffectForMonster( &mPLAY.mMONSTER_OBJECT[i]);
                }
            }
            if (mPLAY.mMONSTER_OBJECT[i].mMONSTER_INFO->mType == 2 && mGAMEOPTION.tMatureMode == 1)
            {
                tMonsDmg = 3 - (int)((float)mPLAY.mMONSTER_OBJECT[i].mMONSTER.mLifeValue * 100.0f / (float)mPLAY.mMONSTER_OBJECT[i].mMONSTER_INFO->mLife) / 30;
                tMonsRealDmg = 3 - (int)((float)(mPLAY.mMONSTER_OBJECT[i].mMONSTER.mLifeValue - tAttackInfo->mAttackRealDamageValue) * 100.0f / (float)mPLAY.mMONSTER_OBJECT[i].mMONSTER_INFO->mLife) / 30;
                if (tMonsDmg < tMonsRealDmg)
                {
                    for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
                        ;
                    if (j < mPLAY.MAX_EFFECT_OBJECT)
                    {
                        mPLAY.mEFFECT_OBJECT[j].SetStripForMonster( &mPLAY.mMONSTER_OBJECT[i]);
                    }
                }
            }
            mPLAY.mMONSTER_OBJECT[i].mMONSTER.mLifeValue -= tAttackInfo->mAttackRealDamageValue;
            memcpy(&mPLAY.mMONSTER_OBJECT[i].mAttackInfo, tAttackInfo, sizeof(ATTACK_FOR_PROTOCOL));
            if (mPLAY.mMONSTER_OBJECT[i].mMONSTER.mLifeValue > 0 && mPLAY.mMONSTER_OBJECT[i].mMONSTER_INFO->mDamageType == 2)
            {
                for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
                    ;
                if (j < mPLAY.MAX_EFFECT_OBJECT)
                {
                    if (tAttackInfo->mAttackActionValue1 == 1)
                    {
                        switch (tAttackInfo->mAttackActionValue2)
                        {
                        case 1:
                            mPLAY.mEFFECT_OBJECT[j].SetBloodForMonster( &mPLAY.mMONSTER_OBJECT[i], 1);
                            break;
                        case 2:
                            mPLAY.mEFFECT_OBJECT[j].SetBloodForMonster( &mPLAY.mMONSTER_OBJECT[i], 2);
                            break;
                        case 3:
                            mPLAY.mEFFECT_OBJECT[j].SetBloodForMonster( &mPLAY.mMONSTER_OBJECT[i], 3);
                            break;
                        }
                    }
                    else if (tAttackInfo->mAttackActionValue1 == 2)
                    {
                        mPLAY.mEFFECT_OBJECT[j].SetBloodForMonster( &mPLAY.mMONSTER_OBJECT[i], 2);
                    }
                }
            }

            // Set Sound for Hit
            for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || mPLAY.mAVATAR_OBJECT[i].mIndex != tAttackInfo->mServerIndex1 || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != tAttackInfo->mUniqueNumber1); ++i)
                ;
            if (i < mPLAY.MAX_AVATAR_OBJECT)
            {
                tITEM = mITEM.Search(tAttackInfo->mAttackResultValue - 1);
                tIndex = 3;
                if (tITEM)
                {
                    switch (tITEM->iSort)
                    {
                    case 13: tIndex = 0; break;
                    case 14: tIndex = 1; break;
                    case 15: tIndex = 2; break;
                    case 16: tIndex = 0; break;
                    case 17: tIndex = 1; break;
                    case 18: tIndex = 2; break;
                    case 19: tIndex = 0; break;
                    case 20: tIndex = 1; break;
                    case 21: tIndex = 2; break;
                    default: break;
                    }
                }
                tSndIndex = 0;
                if (tAttackInfo->mAttackActionValue1 == 2)
                {
                    if (tAttackInfo->mAttackActionValue2 == 78)
                    {
                        return;
                    }
                    tSndIndex = mPLAY.ReturnSoundIndexFromHit(tAttackInfo->mAttackActionValue2);
                }
                GSOUND::Play(&mGDATA.mSOUND_6[mPLAY.mAVATAR_OBJECT[i].mDATA.aPreviousTribe][mPLAY.mAVATAR_OBJECT[i].mDATA.aGender][tIndex][tSndIndex], mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
                if (tAttackInfo->mAttackCriticalExist == 1)
                {
                    GSOUND::Play(&mGDATA.mSOUND_6[mPLAY.mAVATAR_OBJECT[i].mDATA.aPreviousTribe][mPLAY.mAVATAR_OBJECT[i].mDATA.aGender][tIndex][9], mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
                }
            }
        }
        return;

    case 4:
        if (tAttackInfo->mAttackResultValue)
        {
            if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex2 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber2)
            {
                strcpy(mBuffer, mMESSAGE.Return(203));
                tDamageValue = tAttackInfo->mAttackViewDamageValue - tAttackInfo->mAttackElementDamage;
                if (tAttackInfo->mAttackCriticalExist)
                {
                    sprintf(mTempBuffer, "%s(-%d)", mMESSAGE.Return(200), tDamageValue);
                }
                else
                {
                    sprintf(mTempBuffer, "%s(-%d)", mMESSAGE.Return(199), tDamageValue);
                }
                strcat(mBuffer, mTempBuffer);
                if (tAttackInfo->mAttackElementDamage > 0)
                {
                    sprintf(mTempBuffer, " %s(-%d)", mMESSAGE.Return(201), tAttackInfo->mAttackElementDamage);
                    strcat(mBuffer, mTempBuffer);
                }
                mBASICUI.Insert1(mBuffer, 2);
                if (mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 1 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 5 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 6 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 7)
                {
                    mMYINFO.A010();
                }
            }

            for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || mPLAY.mAVATAR_OBJECT[i].mIndex != tAttackInfo->mServerIndex2 || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != tAttackInfo->mUniqueNumber2); ++i)
                ;
            if (i < mPLAY.MAX_AVATAR_OBJECT)
            {
                if (tAttackInfo->mAttackCriticalExist)
                    GSOUND::Play(&mGDATA.mSOUND_5[203], mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
                else
                    GSOUND::Play(&mGDATA.mSOUND_5[29], mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);

                if (tAttackInfo->mAttackCriticalExist == 1)
                {
                    for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
                        ;
                    if (j < mPLAY.MAX_EFFECT_OBJECT)
                        mPLAY.mEFFECT_OBJECT[j].SetCriticalEffectForAvatar( 2, &mPLAY.mAVATAR_OBJECT[i], i == 0);
                }
                mPLAY.mAVATAR_OBJECT[i].mDATA.aLifeValue -= tAttackInfo->mAttackRealDamageValue;
                memcpy(&mPLAY.mAVATAR_OBJECT[i].tAvatarAttackInfo, tAttackInfo, sizeof(ATTACK_FOR_PROTOCOL));
                for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
                    ;
                if (j < mPLAY.MAX_EFFECT_OBJECT)
                    mPLAY.mEFFECT_OBJECT[j].SetBloodForAvatar( &mPLAY.mAVATAR_OBJECT[i], 1);
            }
        }
        else if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex2 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber2)
        {
            strcpy(mBuffer, mMESSAGE.Return(202));
            mBASICUI.Insert1(mBuffer, 21);
            if (mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 1 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 5 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 6 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 7)
            {
                mMYINFO.A008();
            }
        }
        return;

    default:
        return;
    }
}
//void PLAY::ProcessForAttackResult(ATTACK_FOR_PROTOCOL* tAttackInfo)
//{
//    char* v2; 
//    char* v3; 
//    char* v4; 
//    char* v5; 
//    char* v6; 
//    char* v7; 
//    char* v8; 
//    char* v9; 
//    char* v10;
//    char* v11;
//    char* v12;
//    char* v13;
//    char* v14;
//    char* v15;
//    char* v16;
//    char* v17;
//    int v18; 
//    int v19; 
//    int v20; 
//    int v21; 
//    int v22; 
//    int v23; 
//    int v24; 
//    int v25; 
//    int v27; 
//    int v28; 
//    ITEM_INFO* v29; 
//    ITEM_INFO* v30; 
//    int v31; 
//    int v32; 
//    int v33; 
//    int v34; 
//    int v35; 
//    char Destination[1000]; 
//    int v37; 
//    int i; 
//    int v39; 
//    int j; 
//    char Source[1000]; 
//    int v42; 
//
//    switch (tAttackInfo->mCase)
//    {
//    case 1:
//    case 2:
//        if (tAttackInfo->mAttackResultValue)
//        {
//            if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex1 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber1)
//            {
//                v4 = mMESSAGE.Return(198);
//                strcpy(Destination, v4);
//                v28 = tAttackInfo->mAttackViewDamageValue - tAttackInfo->mAttackElementDamage;
//                if (v28 < 0)
//                    v28 = 0;
//                if (tAttackInfo->mAttackCriticalExist)
//                    v5 = mMESSAGE.Return(200);
//                else
//                    v5 = mMESSAGE.Return(199);
//                sprintf(Source, "%s(+%d)", v5, v28);
//                strcat(Destination, Source);
//                if (tAttackInfo->mAttackElementDamage > 0)
//                {
//                    v18 = tAttackInfo->mAttackElementDamage;
//                    v6 = mMESSAGE.Return(201);
//                    sprintf(Source, " %s(+%d)", v6, v18);
//                    strcat(Destination, Source);
//                }
//                mBASICUI.Insert1(Destination, 3);
//            }
//            if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex2 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber2)
//            {
//                v7 = mMESSAGE.Return(203);
//                strcpy(Destination, v7);
//                v19 = tAttackInfo->mAttackViewDamageValue - tAttackInfo->mAttackElementDamage;
//                if (tAttackInfo->mAttackCriticalExist)
//                    v8 = mMESSAGE.Return(200);
//                else
//                    v8 = mMESSAGE.Return(199);
//                sprintf(Source, "%s(-%d)", v8, v19);
//                strcat(Destination, Source);
//                if (tAttackInfo->mAttackElementDamage > 0)
//                {
//                    v20 = tAttackInfo->mAttackElementDamage;
//                    v9 = mMESSAGE.Return(201);
//                    sprintf(Source, " %s(-%d)", v9, v20);
//                    strcat(Destination, Source);
//                }
//                
//                for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT; i++)
//                {
//                    if (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState)
//                    {
//                        continue;
//                    }
//                    if (mPLAY.mAVATAR_OBJECT[i].mIndex == tAttackInfo->mServerIndex1 && mPLAY.mAVATAR_OBJECT[i].mUniqueNumber == tAttackInfo->mUniqueNumber1)
//                    {
//                        break;
//                    }
//                }
//                if (i < mPLAY.MAX_AVATAR_OBJECT)
//                {
//                    sprintf(Source, "[%s]", mPLAY.mAVATAR_OBJECT[i].mDATA.aName);
//                }
//                else
//                {
//                    sprintf(Source, "[]");
//                }
//                strcat(Destination, Source);
//                
//                mBASICUI.Insert1(Destination, 2);
//                if (mPLAY.mAVATAR_OBJECT[0].mDATA.aLifeValue - tAttackInfo->mAttackRealDamageValue < 1)
//                {
//                    mMYINFO.mbIsPVPDie = 1;
//                }
//                if (mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 1 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 5 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 6 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 7)
//                {
//                    mMYINFO.A010();
//                }
//            }
//            for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || mPLAY.mAVATAR_OBJECT[i].mIndex != tAttackInfo->mServerIndex2 || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != tAttackInfo->mUniqueNumber2); ++i)
//            {
//                ;
//            }
//            if (i < mPLAY.MAX_AVATAR_OBJECT)
//            {
//                if (tAttackInfo->mAttackCriticalExist == 1)
//                {
//                    for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
//                    {
//                        ;
//                    }
//                    if (j < mPLAY.MAX_EFFECT_OBJECT)
//                    {
//                        mPLAY.mEFFECT_OBJECT[j].SetCriticalEffectForAvatar( 1, &mPLAY.mAVATAR_OBJECT[i], i == 0);
//                    }
//                }
//                mPLAY.mAVATAR_OBJECT[i].mDATA.aLifeValue -= tAttackInfo->mAttackRealDamageValue;
//                memcpy( &mPLAY.mAVATAR_OBJECT[i].tAvatarAttackInfo, tAttackInfo, sizeof(ATTACK_FOR_PROTOCOL));
//                for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
//                {
//                    ;
//                }
//                if (j < mPLAY.MAX_EFFECT_OBJECT)
//                {
//                    mPLAY.mEFFECT_OBJECT[j].SetBloodForAvatar( &mPLAY.mAVATAR_OBJECT[i], 1);
//                }
//            }
//            for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || mPLAY.mAVATAR_OBJECT[i].mIndex != tAttackInfo->mServerIndex1 || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != tAttackInfo->mUniqueNumber1); ++i)
//            {
//                ;
//            }
//            if (i < mPLAY.MAX_AVATAR_OBJECT)
//            {
//                v39 = mPLAY.mAVATAR_OBJECT[i].mDATA.aPreviousTribe;
//                v31 = mPLAY.mAVATAR_OBJECT[i].mDATA.aGender;
//                v29 = mITEM.Search(tAttackInfo->mAttackResultValue - 1);
//                if (v29)
//                {
//                    v34 = 3;
//                    switch (v29->iSort)
//                    {
//                    case 13:
//                        v34 = 0;
//                        break;
//                    case 14:
//                        v34 = 1;
//                        break;
//                    case 15:
//                        v34 = 2;
//                        break;
//                    case 16:
//                        v34 = 0;
//                        break;
//                    case 17:
//                        v34 = 1;
//                        break;
//                    case 18:
//                        v34 = 2;
//                        break;
//                    case 19:
//                        v34 = 0;
//                        break;
//                    case 20:
//                        v34 = 1;
//                        break;
//                    case 21:
//                        v34 = 2;
//                        break;
//                    default:
//                        break;
//                    }
//                }
//                else
//                {
//                    v34 = 3;
//                }
//                v42 = 0;
//                if (tAttackInfo->mAttackActionValue1 == 2)
//                {
//                    if (tAttackInfo->mAttackActionValue2 == 78)
//                    {
//                        return;
//                    }
//                    v42 = mPLAY.ReturnSoundIndexFromHit(tAttackInfo->mAttackActionValue2);
//                }
//                GSOUND::Play(&mGDATA.mSOUND_6[v39][v31][v34][v42], mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
//                if (tAttackInfo->mAttackCriticalExist == 1)
//                {
//                    GSOUND::Play(&mGDATA.mSOUND_6[v39][v31][v34][9], mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
//                }
//            }
//        }
//        else
//        {
//            if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex1 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber1)
//            {
//                v2 = mMESSAGE.Return(197);
//                strcpy(Destination, v2);
//                mBASICUI.Insert1(Destination, 17);
//            }
//            if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex2 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber2)
//            {
//                v3 = mMESSAGE.Return(202);
//                strcpy(Destination, v3);
//                mBASICUI.Insert1(Destination, 21);
//                if (mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 1 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 5 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 6 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 7)
//                {
//                    mMYINFO.A008();
//                }
//            }
//        }
//        return;
//
//    case 3:
//        if (!tAttackInfo->mAttackResultValue)
//        {
//            if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex1 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber1)
//            {
//                v10 = mMESSAGE.Return(197);
//                strcpy(Destination, v10);
//                mBASICUI.Insert1(Destination, 17);
//            }
//            return;
//        }
//        if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex1 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber1)
//        {
//            v11 = mMESSAGE.Return(198);
//            strcpy(Destination, v11);
//            v27 = tAttackInfo->mAttackViewDamageValue - tAttackInfo->mAttackElementDamage;
//            if (v27 < 0)
//                v27 = 0;
//            if (tAttackInfo->mAttackCriticalExist)
//                v12 = mMESSAGE.Return(200);
//            else
//                v12 = mMESSAGE.Return(199);
//            sprintf(Source, "%s(+%d)", v12, v27);
//            strcat(Destination, Source);
//            if (tAttackInfo->mAttackElementDamage > 0)
//            {
//                v21 = tAttackInfo->mAttackElementDamage;
//                v13 = mMESSAGE.Return(201);
//                sprintf(Source, " %s(+%d)", v13, v21);
//                strcat(Destination, Source);
//            }
//            mBASICUI.Insert1(Destination, 3);
//        }
//        for (i = 0; i < mPLAY.MAX_MONSTER_OBJECT && (!mPLAY.mMONSTER_OBJECT[i].mCheckValidState || mPLAY.mMONSTER_OBJECT[i].tServerIndex != tAttackInfo->mServerIndex2 || mPLAY.mMONSTER_OBJECT[i].tUniqueNumber != tAttackInfo->mUniqueNumber2); ++i)
//        {
//            ;
//        }
//        if (i >= mPLAY.MAX_MONSTER_OBJECT)
//        {
//            goto LABEL_142;
//        }
//        if (tAttackInfo->mAttackCriticalExist == 1)
//        {
//            for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
//            {
//                ;
//            }
//            if (j < mPLAY.MAX_EFFECT_OBJECT)
//            {
//                mPLAY.mEFFECT_OBJECT[j].SetCriticalEffectForMonster( &mPLAY.mMONSTER_OBJECT[i]);
//            }
//        }
//        if (mPLAY.mMONSTER_OBJECT[i].mMONSTER_INFO->mType == 2 && mGAMEOPTION.tMatureMode == 1)
//        {
//            v33 = 3 - (int)((float)mPLAY.mMONSTER_OBJECT[i].mMONSTER.mLifeValue * 100.0f / (float)mPLAY.mMONSTER_OBJECT[i].mMONSTER_INFO->mLife) / 30;
//            v37 = 3 - (int)((float)(mPLAY.mMONSTER_OBJECT[i].mMONSTER.mLifeValue - tAttackInfo->mAttackRealDamageValue) * 100.0f / (float)mPLAY.mMONSTER_OBJECT[i].mMONSTER_INFO->mLife) / 30;
//            if (v33 < v37)
//            {
//                for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
//                {
//                    ;
//                }
//                if (j < mPLAY.MAX_EFFECT_OBJECT)
//                {
//                    mPLAY.mEFFECT_OBJECT[j].SetStripForMonster( &mPLAY.mMONSTER_OBJECT[i]);
//                }
//            }
//        }
//        mPLAY.mMONSTER_OBJECT[i].mMONSTER.mLifeValue -= tAttackInfo->mAttackRealDamageValue;
//        memcpy(&mPLAY.mMONSTER_OBJECT[i].tAttackInfo, tAttackInfo, sizeof(ATTACK_FOR_PROTOCOL));
//        if (mPLAY.mMONSTER_OBJECT[i].mMONSTER.mLifeValue <= 0 || mPLAY.mMONSTER_OBJECT[i].mMONSTER_INFO->mDamageType != 2)
//        {
//            goto LABEL_142;
//        }
//        for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
//        {
//            ;
//        }
//        if (j >= mPLAY.MAX_EFFECT_OBJECT)
//        {
//            goto LABEL_142;
//        }
//        v25 = tAttackInfo->mAttackActionValue1;
//        if (v25 != 1)
//        {
//            if (v25 != 2)
//            {
//                goto LABEL_142;
//            }
//        LABEL_141:
//            mPLAY.mEFFECT_OBJECT[j].SetBloodForMonster( &mPLAY.mMONSTER_OBJECT[i], 2);
//            goto LABEL_142;
//        }
//        v24 = tAttackInfo->mAttackActionValue2;
//        switch (v24)
//        {
//        case 1:
//            mPLAY.mEFFECT_OBJECT[j].SetBloodForMonster( &mPLAY.mMONSTER_OBJECT[i], 1);
//            break;
//        case 2:
//            goto LABEL_141;
//        case 3:
//            mPLAY.mEFFECT_OBJECT[j].SetBloodForMonster( &mPLAY.mMONSTER_OBJECT[i], 3);
//            break;
//        }
//    LABEL_142:
//        for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || mPLAY.mAVATAR_OBJECT[i].mIndex != tAttackInfo->mServerIndex1 || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != tAttackInfo->mUniqueNumber1); ++i)
//        {
//            ;
//        }
//        if (i < mPLAY.MAX_AVATAR_OBJECT)
//        {
//            v39 = mPLAY.mAVATAR_OBJECT[i].mDATA.aPreviousTribe;
//            v32 = mPLAY.mAVATAR_OBJECT[i].mDATA.aGender;
//            v30 = mITEM.Search(tAttackInfo->mAttackResultValue - 1);
//            if (v30)
//            {
//                v35 = 3;
//                switch (v30->iSort)
//                {
//                case 13:
//                    v35 = 0;
//                    break;
//                case 14:
//                    v35 = 1;
//                    break;
//                case 15:
//                    v35 = 2;
//                    break;
//                case 16:
//                    v35 = 0;
//                    break;
//                case 17:
//                    v35 = 1;
//                    break;
//                case 18:
//                    v35 = 2;
//                    break;
//                case 19:
//                    v35 = 0;
//                    break;
//                case 20:
//                    v35 = 1;
//                    break;
//                case 21:
//                    v35 = 2;
//                    break;
//                default:
//                    break;
//                }
//            }
//            else
//            {
//                v35 = 3;
//            }
//            v42 = 0;
//            if (tAttackInfo->mAttackActionValue1 == 2)
//            {
//                if (tAttackInfo->mAttackActionValue2 == 78)
//                {
//                    return;
//                }
//                v42 = mPLAY.ReturnSoundIndexFromHit(tAttackInfo->mAttackActionValue2);
//            }
//            GSOUND::Play( &mGDATA.mSOUND_6[v39][v32][v35][v42], mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
//            if (tAttackInfo->mAttackCriticalExist == 1)
//            {
//                GSOUND::Play( &mGDATA.mSOUND_6[v39][v32][v35][9], mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
//            }
//        }
//        return;
//
//    case 4:
//        if (tAttackInfo->mAttackResultValue)
//        {
//            if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex2 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber2)
//            {
//                v15 = mMESSAGE.Return(203);
//                strcpy(Destination, v15);
//                v22 = tAttackInfo->mAttackViewDamageValue - tAttackInfo->mAttackElementDamage;
//                if (tAttackInfo->mAttackCriticalExist)
//                    v16 = mMESSAGE.Return(200);
//                else
//                    v16 = mMESSAGE.Return(199);
//                sprintf(Source, "%s(-%d)", v16, v22);
//                strcat(Destination, Source);
//                if (tAttackInfo->mAttackElementDamage > 0)
//                {
//                    v23 = tAttackInfo->mAttackElementDamage;
//                    v17 = mMESSAGE.Return(201);
//                    sprintf(Source, " %s(-%d)", v17, v23);
//                    strcat(Destination, Source);
//                }
//                mBASICUI.Insert1(Destination, 2);
//                if (mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 1 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 5 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 6 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 7)
//                {
//                    mMYINFO.A010();
//                }
//            }
//            for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || mPLAY.mAVATAR_OBJECT[i].mIndex != tAttackInfo->mServerIndex2 || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != tAttackInfo->mUniqueNumber2); ++i)
//            {
//                ;
//            }
//            if (i < mPLAY.MAX_AVATAR_OBJECT)
//            {
//                if (tAttackInfo->mAttackCriticalExist)
//                {
//                    GSOUND::Play( &mGDATA.mSOUND_5[203], mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
//                }
//                else
//                {
//                    GSOUND::Play( &mGDATA.mSOUND_5[29], mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
//                }
//                if (tAttackInfo->mAttackCriticalExist == 1)
//                {
//                    for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
//                    {
//                        ;
//                    }
//                    if (j < mPLAY.MAX_EFFECT_OBJECT)
//                    {
//                        mPLAY.mEFFECT_OBJECT[j].SetCriticalEffectForAvatar( 2, &mPLAY.mAVATAR_OBJECT[i], i == 0);
//                    }
//                }
//                mPLAY.mAVATAR_OBJECT[i].mDATA.aLifeValue -= tAttackInfo->mAttackRealDamageValue;
//                memcpy(&mPLAY.mAVATAR_OBJECT[i].tAvatarAttackInfo, tAttackInfo, sizeof(ATTACK_FOR_PROTOCOL));
//                for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
//                {
//                    ;
//                }
//                if (j < mPLAY.MAX_EFFECT_OBJECT)
//                {
//                    mPLAY.mEFFECT_OBJECT[j].SetBloodForAvatar( &mPLAY.mAVATAR_OBJECT[i], 1);
//                }
//            }
//        }
//        else if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo->mServerIndex2 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo->mUniqueNumber2)
//        {
//            v14 = mMESSAGE.Return(202);
//            strcpy(Destination, v14);
//            mBASICUI.Insert1(Destination, 21);
//            if (mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 1 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 5 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 6 || mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aSort == 7)
//            {
//                mMYINFO.A008();
//            }
//        }
//        return;
//
//    default:
//        return;
//    }
//}

int PLAY::CheckMAttackFrame(MONSTER_INFO* self, float aFrame)
{
    int i; 

    for (i = 0; i < self->mTotalHitNum; ++i)
    {
        if (aFrame >= (float)(self->mHitFrame[i] - 1) && aFrame <= (float)(self->mHitFrame[i] + 1))
        {
            return 1;
        }
    }
    return 0;
}
int PLAY::CheckMSkillFrame(MONSTER_INFO* self, float aFrame)
{
    int i;

    for (i = 0; i < self->mTotalSkillHitNum; ++i)
    {
        if (aFrame >= (self->mSkillHitFrame[i] - 1) && aFrame <= (self->mSkillHitFrame[i] + 1))
        {
            return 1;
        }
    }
    return 0;
}
int PLAY::CheckGAttackFrame( int tPreviousTribe, int tWeaponClass, int aSort, float aFrame, int* tSkillNumber, int tAnimalNumber )
{
    int v9;
    int i;
    int v8;
    int j;

    if (tAnimalNumber)
    {
        v9 = 0;
        if (aSort)
        {
            if (aSort == 1)
            {
                v9 = 2;
            }
            else if (aSort == 2)
            {
                v9 = 3;
            }
        }
        else
        {
            v9 = 1;
        }
        for (i = 0; i < v9; ++i)
        {
            if (aFrame >= (mPLAY.mAnimalGAttackFrame[tPreviousTribe][tWeaponClass][aSort][i] - 1) && aFrame <= (mPLAY.mAnimalGAttackFrame[tPreviousTribe][tWeaponClass][aSort][i] + 1))
            {
                *tSkillNumber = mPLAY.mAnimalGAttackSkillNum[tPreviousTribe][tWeaponClass][aSort][i];
                return 1;
            }
        }
    }
    else
    {
        v8 = 0;
        if (aSort)
        {
            if (aSort == 1)
            {
                v8 = 2;
            }
            else if (aSort == 2)
            {
                v8 = 3;
            }
        }
        else
        {
            v8 = 1;
        }
        for (j = 0; j < v8; ++j)
        {
            if (aFrame >= (mPLAY.mNoAnimalGAttackFrame[tPreviousTribe][tWeaponClass][aSort][j] - 1) && aFrame <= (mPLAY.mNoAnimalGAttackFrame[tPreviousTribe][tWeaponClass][aSort][j] + 1))
            {
                *tSkillNumber = mPLAY.mNoAnimalGAttackSkillNum[tPreviousTribe][tWeaponClass][aSort][j];
                return 1;
            }
        }
    }
    return 0;
}
int PLAY::CheckSAttackFrame(int tSkillNumber, float aFrame, int tWeaponSort)
{
    int v4;
    int i;
    int tAttackFrame[3]; 

    v4 = 0;
    switch (tSkillNumber)
    {
    case 4:
        v4 = 1;
        tAttackFrame[0] = 17;
        break;
    case 5:
        v4 = 1;
        tAttackFrame[0] = 15;
        break;
    case 8:
        v4 = 1;
        tAttackFrame[0] = 9;
        break;
    case 9:
        v4 = 3;
        tAttackFrame[0] = 14;
        tAttackFrame[1] = 21;
        tAttackFrame[2] = 31;
        break;
    case 10:
        v4 = 1;
        tAttackFrame[0] = 21;
        break;
    case 12:
        v4 = 1;
        tAttackFrame[0] = 10;
        break;
    case 13:
        v4 = 3;
        tAttackFrame[0] = 12;
        tAttackFrame[1] = 20;
        tAttackFrame[2] = 34;
        break;
    case 14:
        v4 = 1;
        tAttackFrame[0] = 21;
        break;
    case 16:
        v4 = 1;
        tAttackFrame[0] = 10;
        break;
    case 17:
        v4 = 3;
        tAttackFrame[0] = 13;
        tAttackFrame[1] = 17;
        tAttackFrame[2] = 29;
        break;
    case 18:
        v4 = 1;
        tAttackFrame[0] = 17;
        break;
    case 23:
        v4 = 1;
        tAttackFrame[0] = 17;
        break;
    case 24:
        v4 = 1;
        tAttackFrame[0] = 15;
        break;
    case 27:
        v4 = 1;
        tAttackFrame[0] = 10;
        break;
    case 28:
        v4 = 3;
        tAttackFrame[0] = 14;
        tAttackFrame[1] = 24;
        tAttackFrame[2] = 30;
        break;
    case 29:
        v4 = 1;
        tAttackFrame[0] = 21;
        break;
    case 31:
        v4 = 1;
        tAttackFrame[0] = 9;
        break;
    case 32:
        v4 = 3;
        tAttackFrame[0] = 6;
        tAttackFrame[1] = 13;
        tAttackFrame[2] = 26;
        break;
    case 33:
        v4 = 1;
        tAttackFrame[0] = 21;
        break;
    case 35:
        v4 = 1;
        tAttackFrame[0] = 10;
        break;
    case 36:
        v4 = 3;
        tAttackFrame[0] = 8;
        tAttackFrame[1] = 18;
        tAttackFrame[2] = 24;
        break;
    case 37:
        v4 = 1;
        tAttackFrame[0] = 17;
        break;
    case 42:
        v4 = 1;
        tAttackFrame[0] = 17;
        break;
    case 43:
        v4 = 1;
        tAttackFrame[0] = 15;
        break;
    case 46:
        v4 = 1;
        tAttackFrame[0] = 9;
        break;
    case 47:
        v4 = 3;
        tAttackFrame[0] = 13;
        tAttackFrame[1] = 19;
        tAttackFrame[2] = 33;
        break;
    case 48:
        v4 = 1;
        tAttackFrame[0] = 21;
        break;
    case 50:
        v4 = 1;
        tAttackFrame[0] = 10;
        break;
    case 51:
        v4 = 3;
        tAttackFrame[0] = 12;
        tAttackFrame[1] = 22;
        tAttackFrame[2] = 34;
        break;
    case 52:
        v4 = 1;
        tAttackFrame[0] = 21;
        break;
    case 54:
        v4 = 1;
        tAttackFrame[0] = 10;
        break;
    case 55:
        v4 = 3;
        tAttackFrame[0] = 12;
        tAttackFrame[1] = 19;
        tAttackFrame[2] = 25;
        break;
    case 56:
        v4 = 1;
        tAttackFrame[0] = 17;
        break;
    case 58:
        v4 = 1;
        tAttackFrame[0] = 8;
        break;
    case 59:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 10;
            tAttackFrame[1] = 22;
            tAttackFrame[2] = 30;
        }
        else
        {
            tAttackFrame[0] = 8;
            tAttackFrame[1] = 19;
            tAttackFrame[2] = 34;
        }
        break;
    case 60:
        v4 = 1;
        tAttackFrame[0] = 10;
        break;
    case 61:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 13;
            tAttackFrame[1] = 23;
            tAttackFrame[2] = 30;
        }
        else
        {
            tAttackFrame[0] = 11;
            tAttackFrame[1] = 25;
            tAttackFrame[2] = 41;
        }
        break;
    case 62:
        v4 = 1;
        tAttackFrame[0] = 12;
        break;
    case 63:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 9;
            tAttackFrame[1] = 18;
            tAttackFrame[2] = 27;
        }
        else
        {
            tAttackFrame[0] = 6;
            tAttackFrame[1] = 14;
            tAttackFrame[2] = 25;
        }
        break;
    case 64:
        v4 = 1;
        tAttackFrame[0] = 10;
        break;
    case 65:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 17;
            tAttackFrame[1] = 25;
            tAttackFrame[2] = 31;
        }
        else
        {
            tAttackFrame[0] = 13;
            tAttackFrame[1] = 25;
            tAttackFrame[2] = 43;
        }
        break;
    case 66:
        v4 = 1;
        tAttackFrame[0] = 8;
        break;
    case 67:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 9;
            tAttackFrame[1] = 17;
            tAttackFrame[2] = 32;
        }
        else
        {
            tAttackFrame[0] = 9;
            tAttackFrame[1] = 21;
            tAttackFrame[2] = 36;
        }
        break;
    case 68:
        v4 = 1;
        tAttackFrame[0] = 12;
        break;
    case 69:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 3;
            tAttackFrame[1] = 7;
            tAttackFrame[2] = 29;
        }
        else
        {
            tAttackFrame[0] = 7;
            tAttackFrame[1] = 15;
            tAttackFrame[2] = 31;
        }
        break;
    case 70:
        v4 = 1;
        tAttackFrame[0] = 8;
        break;
    case 71:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 13;
            tAttackFrame[1] = 22;
            tAttackFrame[2] = 32;
        }
        else
        {
            tAttackFrame[0] = 10;
            tAttackFrame[1] = 22;
            tAttackFrame[2] = 33;
        }
        break;
    case 72:
        v4 = 1;
        tAttackFrame[0] = 10;
        break;
    case 73:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 15;
            tAttackFrame[1] = 21;
            tAttackFrame[2] = 36;
        }
        else
        {
            tAttackFrame[0] = 11;
            tAttackFrame[1] = 29;
            tAttackFrame[2] = 43;
        }
        break;
    case 74:
        v4 = 1;
        tAttackFrame[0] = 12;
        break;
    case 75:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 7;
            tAttackFrame[1] = 17;
            tAttackFrame[2] = 26;
        }
        else
        {
            tAttackFrame[0] = 3;
            tAttackFrame[1] = 21;
            tAttackFrame[2] = 31;
        }
        break;
    case 85:
        v4 = 1;
        tAttackFrame[0] = 14;
        break;
    case 86:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 7;
            tAttackFrame[1] = 23;
            tAttackFrame[2] = 47;
        }
        else
        {
            tAttackFrame[0] = 10;
            tAttackFrame[1] = 24;
            tAttackFrame[2] = 40;
        }
        break;
    case 87:
        v4 = 1;
        tAttackFrame[0] = 17;
        break;
    case 88:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 23;
            tAttackFrame[1] = 30;
            tAttackFrame[2] = 46;
        }
        else
        {
            tAttackFrame[0] = 13;
            tAttackFrame[1] = 29;
            tAttackFrame[2] = 46;
        }
        break;
    case 89:
        v4 = 1;
        tAttackFrame[0] = 17;
        break;
    case 90:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 12;
            tAttackFrame[1] = 23;
            tAttackFrame[2] = 41;
        }
        else
        {
            tAttackFrame[0] = 10;
            tAttackFrame[1] = 21;
            tAttackFrame[2] = 43;
        }
        break;
    case 91:
        v4 = 1;
        tAttackFrame[0] = 17;
        break;
    case 92:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 9;
            tAttackFrame[1] = 23;
            tAttackFrame[2] = 44;
        }
        else
        {
            tAttackFrame[0] = 13;
            tAttackFrame[1] = 34;
            tAttackFrame[2] = 57;
        }
        break;
    case 93:
        v4 = 1;
        tAttackFrame[0] = 14;
        break;
    case 94:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 10;
            tAttackFrame[1] = 31;
            tAttackFrame[2] = 42;
        }
        else
        {
            tAttackFrame[0] = 13;
            tAttackFrame[1] = 28;
            tAttackFrame[2] = 46;
        }
        break;
    case 95:
        v4 = 1;
        tAttackFrame[0] = 17;
        break;
    case 96:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 13;
            tAttackFrame[1] = 27;
            tAttackFrame[2] = 40;
        }
        else
        {
            tAttackFrame[0] = 12;
            tAttackFrame[1] = 20;
            tAttackFrame[2] = 41;
        }
        break;
    case 97:
        v4 = 1;
        tAttackFrame[0] = 14;
        break;
    case 98:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 13;
            tAttackFrame[1] = 30;
            tAttackFrame[2] = 42;
        }
        else
        {
            tAttackFrame[0] = 18;
            tAttackFrame[1] = 31;
            tAttackFrame[2] = 47;
        }
        break;
    case 99:
        v4 = 1;
        tAttackFrame[0] = 17;
        break;
    case 100:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 11;
            tAttackFrame[1] = 22;
            tAttackFrame[2] = 50;
        }
        else
        {
            tAttackFrame[0] = 18;
            tAttackFrame[1] = 32;
            tAttackFrame[2] = 45;
        }
        break;
    case 101:
        v4 = 1;
        tAttackFrame[0] = 17;
        break;
    case 102:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 14;
            tAttackFrame[1] = 30;
            tAttackFrame[2] = 42;
        }
        else
        {
            tAttackFrame[0] = 20;
            tAttackFrame[1] = 33;
            tAttackFrame[2] = 43;
        }
        break;
    case 112:
        v4 = 1;
        tAttackFrame[0] = 28;
        break;
    case 113:
        v4 = 1;
        tAttackFrame[0] = 29;
        break;
    case 114:
        v4 = 1;
        tAttackFrame[0] = 24;
        break;
    case 115:
        v4 = 1;
        tAttackFrame[0] = 29;
        break;
    case 116:
        v4 = 1;
        tAttackFrame[0] = 28;
        break;
    case 117:
        v4 = 1;
        tAttackFrame[0] = 24;
        break;
    case 118:
        v4 = 1;
        tAttackFrame[0] = 28;
        break;
    case 119:
        v4 = 1;
        tAttackFrame[0] = 29;
        break;
    case 120:
        v4 = 1;
        tAttackFrame[0] = 24;
        break;
    case 121:
        v4 = 1;
        tAttackFrame[0] = 14;
        break;
    case 122:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 5;
            tAttackFrame[1] = 24;
            tAttackFrame[2] = 37;
        }
        else
        {
            tAttackFrame[0] = 8;
            tAttackFrame[1] = 20;
            tAttackFrame[2] = 31;
        }
        break;
    case 123:
        v4 = 1;
        tAttackFrame[0] = 15;
        break;
    case 124:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 20;
            tAttackFrame[1] = 27;
            tAttackFrame[2] = 38;
        }
        else
        {
            tAttackFrame[0] = 8;
            tAttackFrame[1] = 20;
            tAttackFrame[2] = 34;
        }
        break;
    case 125:
        v4 = 1;
        tAttackFrame[0] = 12;
        break;
    case 126:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 15;
            tAttackFrame[1] = 23;
            tAttackFrame[2] = 31;
        }
        else
        {
            tAttackFrame[0] = 9;
            tAttackFrame[1] = 18;
            tAttackFrame[2] = 29;
        }
        break;
    case 127:
        v4 = 1;
        tAttackFrame[0] = 15;
        break;
    case 128:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 8;
            tAttackFrame[1] = 16;
            tAttackFrame[2] = 39;
        }
        else
        {
            tAttackFrame[0] = 12;
            tAttackFrame[1] = 25;
            tAttackFrame[2] = 41;
        }
        break;
    case 129:
        v4 = 1;
        tAttackFrame[0] = 14;
        break;
    case 130:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 8;
            tAttackFrame[1] = 17;
            tAttackFrame[2] = 35;
        }
        else
        {
            tAttackFrame[0] = 9;
            tAttackFrame[1] = 26;
            tAttackFrame[2] = 36;
        }
        break;
    case 131:
        v4 = 1;
        tAttackFrame[0] = 12;
        break;
    case 132:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 17;
            tAttackFrame[1] = 24;
            tAttackFrame[2] = 30;
        }
        else
        {
            tAttackFrame[0] = 6;
            tAttackFrame[1] = 18;
            tAttackFrame[2] = 31;
        }
        break;
    case 133:
        v4 = 1;
        tAttackFrame[0] = 14;
        break;
    case 134:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 5;
            tAttackFrame[1] = 19;
            tAttackFrame[2] = 36;
        }
        else
        {
            tAttackFrame[0] = 8;
            tAttackFrame[1] = 20;
            tAttackFrame[2] = 34;
        }
        break;
    case 135:
        v4 = 1;
        tAttackFrame[0] = 15;
        break;
    case 136:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 6;
            tAttackFrame[1] = 24;
            tAttackFrame[2] = 41;
        }
        else
        {
            tAttackFrame[0] = 12;
            tAttackFrame[1] = 26;
            tAttackFrame[2] = 40;
        }
        break;
    case 137:
        v4 = 1;
        tAttackFrame[0] = 12;
        break;
    case 138:
        v4 = 3;
        if (mMYINFO.mAvatarInfo.aAnimalIndex < 10
            || mMYINFO.mAvatarInfo.aAnimalIndex > 19
            || mMYINFO.mAvatarInfo.aAbsorbState)
        {
            tAttackFrame[0] = 12;
            tAttackFrame[1] = 19;
            tAttackFrame[2] = 30;
        }
        else
        {
            tAttackFrame[0] = 9;
            tAttackFrame[1] = 20;
            tAttackFrame[2] = 33;
        }
        break;
    case 140:
    case 144:
    case 148:
        switch (tWeaponSort)
        {
        case 1:
            v4 = 1;
            tAttackFrame[0] = 21;
            break;
        case 2:
            v4 = 1;
            tAttackFrame[0] = 21;
            break;
        case 3:
            v4 = 1;
            tAttackFrame[0] = 17;
            break;
        }
        break;
    case 141:
    case 145:
    case 149:
        switch (tWeaponSort)
        {
        case 1:
            v4 = 1;
            tAttackFrame[0] = 28;
            break;
        case 2:
            v4 = 1;
            tAttackFrame[0] = 29;
            break;
        case 3:
            v4 = 1;
            tAttackFrame[0] = 24;
            break;
        }
        break;
    default:
        break;
    }
    for (i = 0; i < v4; ++i)
    {
        if (aFrame >= (tAttackFrame[i] - 1) && aFrame <= (tAttackFrame[i] + 1))
            return 1;
    }
    return 0;
}
BOOL PLAY::GetPartySkillLocation(float aFront, float aLocation[3], int tSkillIndex, int index, float tLocation[3])
{
    int index01;
    D3DXMATRIX pOut;
    D3DXMATRIX pM1;
    D3DXMATRIX pM;
    D3DXMATRIX v7;
    float tAttackRadius;
    float v11;
    float v6;

    switch (tSkillIndex)
    {
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
        tAttackRadius = (float)mFACTOR.GetAttackRadius(tSkillIndex);
        switch (index)
        {
        case 0:
            v11 = aFront + 0.0f;
            break;
        case 1:
            v11 = aFront + 90.0f;
            break;
        case 2:
            v11 = aFront + 180.0f;
            break;
        case 3:
            v11 = aFront + 270.0f;
            break;
        }
        if (v11 > 360.0f)
            v11 = v11 - 360.0f;
        D3DXMatrixTranslation(&pOut, aLocation[0], 0.0f, aLocation[2]);
        v6 = v11 * 0.01745329238474369;
        D3DXMatrixRotationY(&pM1, v6);
        D3DXMatrixMultiply(&v7, &pM1, &pOut);
        CopyMemory(&pM, &v7, sizeof(D3DXMATRIX));
        tLocation[0] = 0.0f;
        tLocation[1] = 0.0f;
        tLocation[2] = tAttackRadius;
        D3DXVec3TransformCoord((D3DXVECTOR3*)tLocation, (D3DXVECTOR3*)tLocation, &pM);
        return mGDATA.mZONE.mWORLD2.GetYCoord(tLocation[0], tLocation[2], &tLocation[1], 0, 0.0f, 0, 1) != 0;

    default:
        return 0;
    }


}
int PLAY::ReturnCharacterFrameNum(char* tFileName)
{
    if (!strcmp(tFileName, "C001001001.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C001001002.MOTION"))
        return 119;
    if (!strcmp(tFileName, "C001001003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C001001004.MOTION"))
        return 21;
    if (!strcmp(tFileName, "C001001011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C001001012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C001001013.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C001001014.MOTION"))
        return 15;
    if (!strcmp(tFileName, "C001001015.MOTION"))
        return 79;
    if (!strcmp(tFileName, "C001001016.MOTION"))
        return 58;
    if (!strcmp(tFileName, "C001001017.MOTION"))
        return 78;
    if (!strcmp(tFileName, "C001001018.MOTION"))
        return 91;
    if (!strcmp(tFileName, "C001001019.MOTION"))
        return 71;
    if (!strcmp(tFileName, "C001001020.MOTION"))
        return 56;
    if (!strcmp(tFileName, "C001001021.MOTION"))
        return 61;
    if (!strcmp(tFileName, "C001001022.MOTION"))
        return 65;
    if (!strcmp(tFileName, "C001001023.MOTION"))
        return 54;
    if (!strcmp(tFileName, "C001001024.MOTION"))
        return 65;
    if (!strcmp(tFileName, "C001001031.MOTION"))
        return 20;
    if (!strcmp(tFileName, "C001001032.MOTION"))
        return 71;
    if (!strcmp(tFileName, "C001001033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C001001034.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C001001035.MOTION"))
        return 11;
    if (!strcmp(tFileName, "C001001036.MOTION"))
        return 18;
    if (!strcmp(tFileName, "C001001037.MOTION"))
        return 11;
    if (!strcmp(tFileName, "C001001038.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C001001039.MOTION"))
        return 37;
    if (!strcmp(tFileName, "C001001040.MOTION"))
        return 37;
    if (!strcmp(tFileName, "C001001041.MOTION"))
        return 33;
    if (!strcmp(tFileName, "C001001042.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C001001064.MOTION"))
        return 19;
    if (!strcmp(tFileName, "C001001065.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C001001066.MOTION"))
        return 31;
    if (!strcmp(tFileName, "C001001067.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C001001068.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C001001069.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C001001076.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C001001077.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C001001078.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C001002002.MOTION"))
        return 79;
    if (!strcmp(tFileName, "C001002003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C001002005.MOTION"))
        return 21;
    if (!strcmp(tFileName, "C001002006.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C001002007.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C001002008.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C001002010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C001002033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C001003002.MOTION"))
        return 119;
    if (!strcmp(tFileName, "C001003003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C001003004.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C001003011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C001003012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C001003033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C001004002.MOTION"))
        return 79;
    if (!strcmp(tFileName, "C001004003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C001004005.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C001004006.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C001004007.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C001004008.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C001004010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C001004033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C001004043.MOTION"))
        return 20;
    if (!strcmp(tFileName, "C001004044.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C001004045.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C001004046.MOTION"))
        return 20;
    if (!strcmp(tFileName, "C001004047.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C001004048.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C001004061.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C001004070.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C001004071.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C001004082.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C001005002.MOTION"))
        return 119;
    if (!strcmp(tFileName, "C001005003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C001005004.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C001005011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C001005012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C001005033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C001006002.MOTION"))
        return 79;
    if (!strcmp(tFileName, "C001006003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C001006005.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C001006006.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C001006007.MOTION"))
        return 54;
    if (!strcmp(tFileName, "C001006008.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C001006010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C001006033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C001006049.MOTION"))
        return 22;
    if (!strcmp(tFileName, "C001006050.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C001006051.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C001006052.MOTION"))
        return 22;
    if (!strcmp(tFileName, "C001006053.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C001006054.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C001006062.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C001006072.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C001006073.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C001006083.MOTION"))
        return 44;
    if (!strcmp(tFileName, "C001007002.MOTION"))
        return 119;
    if (!strcmp(tFileName, "C001007003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C001007004.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C001007011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C001007012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C001007033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C001008002.MOTION"))
        return 79;
    if (!strcmp(tFileName, "C001008003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C001008005.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C001008006.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C001008007.MOTION"))
        return 46;
    if (!strcmp(tFileName, "C001008008.MOTION"))
        return 69;
    if (!strcmp(tFileName, "C001008010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C001008033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C001008055.MOTION"))
        return 18;
    if (!strcmp(tFileName, "C001008056.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C001008057.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C001008058.MOTION"))
        return 18;
    if (!strcmp(tFileName, "C001008059.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C001008060.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C001008063.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C001008074.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C001008075.MOTION"))
        return 54;
    if (!strcmp(tFileName, "C001008084.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C002001001.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C002001002.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C002001003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C002001004.MOTION"))
        return 30;
    if (!strcmp(tFileName, "C002001011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C002001012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C002001013.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C002001014.MOTION"))
        return 15;
    if (!strcmp(tFileName, "C002001015.MOTION"))
        return 59;
    if (!strcmp(tFileName, "C002001016.MOTION"))
        return 58;
    if (!strcmp(tFileName, "C002001017.MOTION"))
        return 78;
    if (!strcmp(tFileName, "C002001018.MOTION"))
        return 91;
    if (!strcmp(tFileName, "C002001019.MOTION"))
        return 71;
    if (!strcmp(tFileName, "C002001020.MOTION"))
        return 56;
    if (!strcmp(tFileName, "C002001021.MOTION"))
        return 61;
    if (!strcmp(tFileName, "C002001022.MOTION"))
        return 47;
    if (!strcmp(tFileName, "C002001023.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C002001024.MOTION"))
        return 56;
    if (!strcmp(tFileName, "C002001031.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C002001032.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C002001033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C002001034.MOTION"))
        return 8;
    if (!strcmp(tFileName, "C002001035.MOTION"))
        return 11;
    if (!strcmp(tFileName, "C002001036.MOTION"))
        return 15;
    if (!strcmp(tFileName, "C002001037.MOTION"))
        return 11;
    if (!strcmp(tFileName, "C002001038.MOTION"))
        return 8;
    if (!strcmp(tFileName, "C002001039.MOTION"))
        return 37;
    if (!strcmp(tFileName, "C002001040.MOTION"))
        return 37;
    if (!strcmp(tFileName, "C002001041.MOTION"))
        return 33;
    if (!strcmp(tFileName, "C002001042.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C002001064.MOTION"))
        return 19;
    if (!strcmp(tFileName, "C002001065.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C002001066.MOTION"))
        return 31;
    if (!strcmp(tFileName, "C002001067.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C002001068.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C002001069.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C002001076.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C002001077.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C002001078.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C002002002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C002002003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C002002005.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C002002006.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C002002007.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C002002008.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C002002010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C002002033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C002003002.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C002003003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C002003004.MOTION"))
        return 49;
    if (!strcmp(tFileName, "C002003011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C002003012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C002003033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C002004002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C002004003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C002004005.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C002004006.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C002004007.MOTION"))
        return 54;
    if (!strcmp(tFileName, "C002004008.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C002004010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C002004033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C002004043.MOTION"))
        return 22;
    if (!strcmp(tFileName, "C002004044.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C002004045.MOTION"))
        return 31;
    if (!strcmp(tFileName, "C002004046.MOTION"))
        return 22;
    if (!strcmp(tFileName, "C002004047.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C002004048.MOTION"))
        return 31;
    if (!strcmp(tFileName, "C002004061.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C002004070.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C002004071.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C002004082.MOTION"))
        return 44;
    if (!strcmp(tFileName, "C002005002.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C002005003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C002005004.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C002005011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C002005012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C002005033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C002006002.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C002006003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C002006005.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C002006006.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C002006007.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C002006008.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C002006010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C002006033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C002006049.MOTION"))
        return 20;
    if (!strcmp(tFileName, "C002006050.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C002006051.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C002006052.MOTION"))
        return 20;
    if (!strcmp(tFileName, "C002006053.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C002006054.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C002006062.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C002006072.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C002006073.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C002006083.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C002007002.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C002007003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C002007004.MOTION"))
        return 65;
    if (!strcmp(tFileName, "C002007011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C002007012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C002007033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C002008002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C002008003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C002008005.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C002008006.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C002008007.MOTION"))
        return 46;
    if (!strcmp(tFileName, "C002008008.MOTION"))
        return 69;
    if (!strcmp(tFileName, "C002008010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C002008033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C002008055.MOTION"))
        return 18;
    if (!strcmp(tFileName, "C002008056.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C002008057.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C002008058.MOTION"))
        return 18;
    if (!strcmp(tFileName, "C002008059.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C002008060.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C002008063.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C002008074.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C002008075.MOTION"))
        return 54;
    if (!strcmp(tFileName, "C002008084.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C003001001.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C003001002.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C003001003.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C003001004.MOTION"))
        return 30;
    if (!strcmp(tFileName, "C003001011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C003001012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C003001013.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C003001014.MOTION"))
        return 15;
    if (!strcmp(tFileName, "C003001015.MOTION"))
        return 59;
    if (!strcmp(tFileName, "C003001016.MOTION"))
        return 58;
    if (!strcmp(tFileName, "C003001017.MOTION"))
        return 78;
    if (!strcmp(tFileName, "C003001018.MOTION"))
        return 91;
    if (!strcmp(tFileName, "C003001019.MOTION"))
        return 71;
    if (!strcmp(tFileName, "C003001020.MOTION"))
        return 56;
    if (!strcmp(tFileName, "C003001021.MOTION"))
        return 61;
    if (!strcmp(tFileName, "C003001022.MOTION"))
        return 56;
    if (!strcmp(tFileName, "C003001023.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C003001024.MOTION"))
        return 56;
    if (!strcmp(tFileName, "C003001031.MOTION"))
        return 16;
    if (!strcmp(tFileName, "C003001032.MOTION"))
        return 105;
    if (!strcmp(tFileName, "C003001033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C003001034.MOTION"))
        return 10;
    if (!strcmp(tFileName, "C003001035.MOTION"))
        return 11;
    if (!strcmp(tFileName, "C003001036.MOTION"))
        return 21;
    if (!strcmp(tFileName, "C003001037.MOTION"))
        return 11;
    if (!strcmp(tFileName, "C003001038.MOTION"))
        return 10;
    if (!strcmp(tFileName, "C003001039.MOTION"))
        return 37;
    if (!strcmp(tFileName, "C003001040.MOTION"))
        return 37;
    if (!strcmp(tFileName, "C003001041.MOTION"))
        return 33;
    if (!strcmp(tFileName, "C003001042.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C003001064.MOTION"))
        return 19;
    if (!strcmp(tFileName, "C003001065.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C003001066.MOTION"))
        return 31;
    if (!strcmp(tFileName, "C003001067.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C003001068.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C003001069.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C003001076.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C003001077.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C003001078.MOTION"))
        return 96;
    if (!strcmp(tFileName, "C003002002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C003002003.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C003002005.MOTION"))
        return 30;
    if (!strcmp(tFileName, "C003002006.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C003002007.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C003002008.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C003002010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C003002033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C003003002.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C003003003.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C003003004.MOTION"))
        return 37;
    if (!strcmp(tFileName, "C003003011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C003003012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C003003033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C003004002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C003004003.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C003004005.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C003004006.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C003004007.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C003004008.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C003004010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C003004033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C003004043.MOTION"))
        return 20;
    if (!strcmp(tFileName, "C003004044.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C003004045.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C003004046.MOTION"))
        return 20;
    if (!strcmp(tFileName, "C003004047.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C003004048.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C003004061.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C003004070.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C003004071.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C003004082.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C003005002.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C003005003.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C003005004.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C003005011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C003005012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C003005033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C003006002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C003006003.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C003006005.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C003006006.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C003006007.MOTION"))
        return 54;
    if (!strcmp(tFileName, "C003006008.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C003006010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C003006033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C003006049.MOTION"))
        return 22;
    if (!strcmp(tFileName, "C003006050.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C003006051.MOTION"))
        return 31;
    if (!strcmp(tFileName, "C003006052.MOTION"))
        return 22;
    if (!strcmp(tFileName, "C003006053.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C003006054.MOTION"))
        return 31;
    if (!strcmp(tFileName, "C003006062.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C003006072.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C003006073.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C003006083.MOTION"))
        return 44;
    if (!strcmp(tFileName, "C003007002.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C003007003.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C003007004.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C003007011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C003007012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C003007033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C003008002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C003008003.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C003008005.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C003008006.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C003008007.MOTION"))
        return 46;
    if (!strcmp(tFileName, "C003008008.MOTION"))
        return 69;
    if (!strcmp(tFileName, "C003008010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C003008033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C003008055.MOTION"))
        return 18;
    if (!strcmp(tFileName, "C003008056.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C003008057.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C003008058.MOTION"))
        return 18;
    if (!strcmp(tFileName, "C003008059.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C003008060.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C003008063.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C003008074.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C003008075.MOTION"))
        return 54;
    if (!strcmp(tFileName, "C003008084.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C004001001.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C004001002.MOTION"))
        return 119;
    if (!strcmp(tFileName, "C004001003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C004001004.MOTION"))
        return 21;
    if (!strcmp(tFileName, "C004001011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C004001012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C004001013.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C004001014.MOTION"))
        return 15;
    if (!strcmp(tFileName, "C004001015.MOTION"))
        return 79;
    if (!strcmp(tFileName, "C004001016.MOTION"))
        return 58;
    if (!strcmp(tFileName, "C004001017.MOTION"))
        return 78;
    if (!strcmp(tFileName, "C004001018.MOTION"))
        return 91;
    if (!strcmp(tFileName, "C004001019.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C004001020.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C004001021.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C004001022.MOTION"))
        return 65;
    if (!strcmp(tFileName, "C004001023.MOTION"))
        return 54;
    if (!strcmp(tFileName, "C004001024.MOTION"))
        return 65;
    if (!strcmp(tFileName, "C004001031.MOTION"))
        return 20;
    if (!strcmp(tFileName, "C004001032.MOTION"))
        return 71;
    if (!strcmp(tFileName, "C004001033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C004001034.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C004001035.MOTION"))
        return 11;
    if (!strcmp(tFileName, "C004001036.MOTION"))
        return 18;
    if (!strcmp(tFileName, "C004001037.MOTION"))
        return 11;
    if (!strcmp(tFileName, "C004001038.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C004001039.MOTION"))
        return 37;
    if (!strcmp(tFileName, "C004001040.MOTION"))
        return 37;
    if (!strcmp(tFileName, "C004001041.MOTION"))
        return 33;
    if (!strcmp(tFileName, "C004001042.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C004001064.MOTION"))
        return 19;
    if (!strcmp(tFileName, "C004001065.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C004001066.MOTION"))
        return 31;
    if (!strcmp(tFileName, "C004001067.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C004001068.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C004001069.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C004001076.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C004001077.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C004001078.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C004002002.MOTION"))
        return 79;
    if (!strcmp(tFileName, "C004002003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C004002005.MOTION"))
        return 21;
    if (!strcmp(tFileName, "C004002006.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C004002007.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C004002008.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C004002010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C004002033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C004003002.MOTION"))
        return 119;
    if (!strcmp(tFileName, "C004003003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C004003004.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C004003011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C004003012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C004003033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C004004002.MOTION"))
        return 79;
    if (!strcmp(tFileName, "C004004003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C004004005.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C004004006.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C004004007.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C004004008.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C004004010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C004004033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C004004043.MOTION"))
        return 20;
    if (!strcmp(tFileName, "C004004044.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C004004045.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C004004046.MOTION"))
        return 20;
    if (!strcmp(tFileName, "C004004047.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C004004048.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C004004061.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C004004070.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C004004071.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C004004082.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C004005002.MOTION"))
        return 119;
    if (!strcmp(tFileName, "C004005003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C004005004.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C004005011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C004005012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C004005033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C004006002.MOTION"))
        return 79;
    if (!strcmp(tFileName, "C004006003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C004006005.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C004006006.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C004006007.MOTION"))
        return 54;
    if (!strcmp(tFileName, "C004006008.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C004006010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C004006033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C004006049.MOTION"))
        return 22;
    if (!strcmp(tFileName, "C004006050.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C004006051.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C004006052.MOTION"))
        return 22;
    if (!strcmp(tFileName, "C004006053.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C004006054.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C004006062.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C004006072.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C004006073.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C004006083.MOTION"))
        return 44;
    if (!strcmp(tFileName, "C004007002.MOTION"))
        return 119;
    if (!strcmp(tFileName, "C004007003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C004007004.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C004007011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C004007012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C004007033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C004008002.MOTION"))
        return 79;
    if (!strcmp(tFileName, "C004008003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C004008005.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C004008006.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C004008007.MOTION"))
        return 46;
    if (!strcmp(tFileName, "C004008008.MOTION"))
        return 69;
    if (!strcmp(tFileName, "C004008010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C004008033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C004008055.MOTION"))
        return 18;
    if (!strcmp(tFileName, "C004008056.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C004008057.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C004008058.MOTION"))
        return 18;
    if (!strcmp(tFileName, "C004008059.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C004008060.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C004008063.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C004008074.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C004008075.MOTION"))
        return 54;
    if (!strcmp(tFileName, "C004008084.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C005001001.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C005001002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C005001003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C005001004.MOTION"))
        return 30;
    if (!strcmp(tFileName, "C005001011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C005001012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C005001013.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C005001014.MOTION"))
        return 15;
    if (!strcmp(tFileName, "C005001015.MOTION"))
        return 59;
    if (!strcmp(tFileName, "C005001016.MOTION"))
        return 58;
    if (!strcmp(tFileName, "C005001017.MOTION"))
        return 78;
    if (!strcmp(tFileName, "C005001018.MOTION"))
        return 91;
    if (!strcmp(tFileName, "C005001019.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C005001020.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C005001021.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C005001022.MOTION"))
        return 47;
    if (!strcmp(tFileName, "C005001023.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C005001024.MOTION"))
        return 56;
    if (!strcmp(tFileName, "C005001031.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C005001032.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C005001033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C005001034.MOTION"))
        return 8;
    if (!strcmp(tFileName, "C005001035.MOTION"))
        return 11;
    if (!strcmp(tFileName, "C005001036.MOTION"))
        return 15;
    if (!strcmp(tFileName, "C005001037.MOTION"))
        return 11;
    if (!strcmp(tFileName, "C005001038.MOTION"))
        return 8;
    if (!strcmp(tFileName, "C005001039.MOTION"))
        return 37;
    if (!strcmp(tFileName, "C005001040.MOTION"))
        return 37;
    if (!strcmp(tFileName, "C005001041.MOTION"))
        return 33;
    if (!strcmp(tFileName, "C005001042.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C005001064.MOTION"))
        return 19;
    if (!strcmp(tFileName, "C005001065.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C005001066.MOTION"))
        return 31;
    if (!strcmp(tFileName, "C005001067.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C005001068.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C005001069.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C005001076.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C005001077.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C005001078.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C005002002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C005002003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C005002005.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C005002006.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C005002007.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C005002008.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C005002010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C005002033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C005003002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C005003003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C005003004.MOTION"))
        return 49;
    if (!strcmp(tFileName, "C005003011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C005003012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C005003033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C005004002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C005004003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C005004005.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C005004006.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C005004007.MOTION"))
        return 54;
    if (!strcmp(tFileName, "C005004008.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C005004010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C005004033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C005004043.MOTION"))
        return 22;
    if (!strcmp(tFileName, "C005004044.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C005004045.MOTION"))
        return 31;
    if (!strcmp(tFileName, "C005004046.MOTION"))
        return 22;
    if (!strcmp(tFileName, "C005004047.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C005004048.MOTION"))
        return 31;
    if (!strcmp(tFileName, "C005004061.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C005004070.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C005004071.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C005004082.MOTION"))
        return 44;
    if (!strcmp(tFileName, "C005005002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C005005003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C005005004.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C005005011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C005005012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C005005033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C005006002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C005006003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C005006005.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C005006006.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C005006007.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C005006008.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C005006010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C005006033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C005006049.MOTION"))
        return 20;
    if (!strcmp(tFileName, "C005006050.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C005006051.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C005006052.MOTION"))
        return 20;
    if (!strcmp(tFileName, "C005006053.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C005006054.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C005006062.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C005006072.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C005006073.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C005006083.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C005007002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C005007003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C005007004.MOTION"))
        return 65;
    if (!strcmp(tFileName, "C005007011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C005007012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C005007033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C005008002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C005008003.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C005008005.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C005008006.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C005008007.MOTION"))
        return 46;
    if (!strcmp(tFileName, "C005008008.MOTION"))
        return 69;
    if (!strcmp(tFileName, "C005008010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C005008033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C005008055.MOTION"))
        return 18;
    if (!strcmp(tFileName, "C005008056.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C005008057.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C005008058.MOTION"))
        return 18;
    if (!strcmp(tFileName, "C005008059.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C005008060.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C005008063.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C005008074.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C005008075.MOTION"))
        return 54;
    if (!strcmp(tFileName, "C005008084.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C006001001.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C006001002.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C006001003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C006001004.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C006001011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C006001012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C006001013.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C006001014.MOTION"))
        return 15;
    if (!strcmp(tFileName, "C006001015.MOTION"))
        return 59;
    if (!strcmp(tFileName, "C006001016.MOTION"))
        return 58;
    if (!strcmp(tFileName, "C006001017.MOTION"))
        return 78;
    if (!strcmp(tFileName, "C006001018.MOTION"))
        return 91;
    if (!strcmp(tFileName, "C006001019.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C006001020.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C006001021.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C006001022.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C006001023.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C006001024.MOTION"))
        return 56;
    if (!strcmp(tFileName, "C006001031.MOTION"))
        return 16;
    if (!strcmp(tFileName, "C006001032.MOTION"))
        return 105;
    if (!strcmp(tFileName, "C006001033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C006001034.MOTION"))
        return 10;
    if (!strcmp(tFileName, "C006001035.MOTION"))
        return 11;
    if (!strcmp(tFileName, "C006001036.MOTION"))
        return 21;
    if (!strcmp(tFileName, "C006001037.MOTION"))
        return 11;
    if (!strcmp(tFileName, "C006001038.MOTION"))
        return 10;
    if (!strcmp(tFileName, "C006001039.MOTION"))
        return 37;
    if (!strcmp(tFileName, "C006001040.MOTION"))
        return 37;
    if (!strcmp(tFileName, "C006001041.MOTION"))
        return 33;
    if (!strcmp(tFileName, "C006001042.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C006001064.MOTION"))
        return 19;
    if (!strcmp(tFileName, "C006001065.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C006001066.MOTION"))
        return 31;
    if (!strcmp(tFileName, "C006001067.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C006001068.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C006001069.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C006001076.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C006001077.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C006001078.MOTION"))
        return 96;
    if (!strcmp(tFileName, "C006002002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C006002003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C006002005.MOTION"))
        return 30;
    if (!strcmp(tFileName, "C006002006.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C006002007.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C006002008.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C006002010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C006002033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C006003002.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C006003003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C006003004.MOTION"))
        return 37;
    if (!strcmp(tFileName, "C006003011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C006003012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C006003033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C006004002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C006004003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C006004005.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C006004006.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C006004007.MOTION"))
        return 50;
    if (!strcmp(tFileName, "C006004008.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C006004010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C006004033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C006004043.MOTION"))
        return 20;
    if (!strcmp(tFileName, "C006004044.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C006004045.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C006004046.MOTION"))
        return 20;
    if (!strcmp(tFileName, "C006004047.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C006004048.MOTION"))
        return 29;
    if (!strcmp(tFileName, "C006004061.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C006004070.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C006004071.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C006004082.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C006005002.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C006005003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C006005004.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C006005011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C006005012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C006005033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C006006002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C006006003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C006006005.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C006006006.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C006006007.MOTION"))
        return 54;
    if (!strcmp(tFileName, "C006006008.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C006006010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C006006033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C006006049.MOTION"))
        return 22;
    if (!strcmp(tFileName, "C006006050.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C006006051.MOTION"))
        return 31;
    if (!strcmp(tFileName, "C006006052.MOTION"))
        return 22;
    if (!strcmp(tFileName, "C006006053.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C006006054.MOTION"))
        return 31;
    if (!strcmp(tFileName, "C006006062.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C006006072.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C006006073.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C006006083.MOTION"))
        return 44;
    if (!strcmp(tFileName, "C006007002.MOTION"))
        return 60;
    if (!strcmp(tFileName, "C006007003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C006007004.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C006007011.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C006007012.MOTION"))
        return 12;
    if (!strcmp(tFileName, "C006007033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C006008002.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C006008003.MOTION"))
        return 26;
    if (!strcmp(tFileName, "C006008005.MOTION"))
        return 35;
    if (!strcmp(tFileName, "C006008006.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C006008007.MOTION"))
        return 46;
    if (!strcmp(tFileName, "C006008008.MOTION"))
        return 69;
    if (!strcmp(tFileName, "C006008010.MOTION"))
        return 5;
    if (!strcmp(tFileName, "C006008033.MOTION"))
        return 9;
    if (!strcmp(tFileName, "C006008055.MOTION"))
        return 18;
    if (!strcmp(tFileName, "C006008056.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C006008057.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C006008058.MOTION"))
        return 18;
    if (!strcmp(tFileName, "C006008059.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C006008060.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C006008063.MOTION"))
        return 55;
    if (!strcmp(tFileName, "C006008074.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C006008075.MOTION"))
        return 54;
    if (!strcmp(tFileName, "C006008084.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C001001085.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C001004086.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C001004087.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C001006088.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C001006089.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C001008090.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C001008091.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C002001085.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C002004086.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C002004087.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C002006088.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C002006089.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C002008090.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C002008091.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C003001085.MOTION"))
        return 96;
    if (!strcmp(tFileName, "C003004086.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C003004087.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C003006088.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C003006089.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C003008090.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C003008091.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C004001085.MOTION"))
        return 75;
    if (!strcmp(tFileName, "C004004086.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C004004087.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C004006088.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C004006089.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C004008090.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C004008091.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C005001085.MOTION"))
        return 81;
    if (!strcmp(tFileName, "C005004086.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C005004087.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C005006088.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C005006089.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C005008090.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C005008091.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C006001085.MOTION"))
        return 96;
    if (!strcmp(tFileName, "C006004086.MOTION"))
        return 25;
    if (!strcmp(tFileName, "C006004087.MOTION"))
        return 45;
    if (!strcmp(tFileName, "C006006088.MOTION"))
        return 27;
    if (!strcmp(tFileName, "C006006089.MOTION"))
        return 51;
    if (!strcmp(tFileName, "C006008090.MOTION"))
        return 23;
    if (!strcmp(tFileName, "C006008091.MOTION"))
        return 39;
    if (!strcmp(tFileName, "C001001101.MOTION"))
        return 120;
    if (!strcmp(tFileName, "C001001102.MOTION"))
        return 17;
    if (!strcmp(tFileName, "C001001103.MOTION"))
        return 91;
    if (!strcmp(tFileName, "C001001104.MOTION"))
        return 19;
    if (!strcmp(tFileName, "C001001105.MOTION"))
        return 61;
    if (!strcmp(tFileName, "C001001106.MOTION"))
        return 17;
    if (!strcmp(tFileName, "C002001101.MOTION"))
        return 120;
    if (!strcmp(tFileName, "C002001102.MOTION"))
        return 17;
    if (!strcmp(tFileName, "C002001103.MOTION"))
        return 91;
    if (!strcmp(tFileName, "C002001104.MOTION"))
        return 19;
    if (!strcmp(tFileName, "C002001105.MOTION"))
        return 61;
    if (!strcmp(tFileName, "C002001106.MOTION"))
        return 17;
    if (!strcmp(tFileName, "C003001101.MOTION"))
        return 120;
    if (!strcmp(tFileName, "C003001102.MOTION"))
        return 17;
    if (!strcmp(tFileName, "C003001103.MOTION"))
        return 91;
    if (!strcmp(tFileName, "C003001104.MOTION"))
        return 19;
    if (!strcmp(tFileName, "C003001105.MOTION"))
        return 61;
    if (!strcmp(tFileName, "C003001106.MOTION"))
        return 17;
    if (!strcmp(tFileName, "C004001101.MOTION"))
        return 120;
    if (!strcmp(tFileName, "C004001102.MOTION"))
        return 17;
    if (!strcmp(tFileName, "C004001103.MOTION"))
        return 91;
    if (!strcmp(tFileName, "C004001104.MOTION"))
        return 19;
    if (!strcmp(tFileName, "C004001105.MOTION"))
        return 61;
    if (!strcmp(tFileName, "C004001106.MOTION"))
        return 17;
    if (!strcmp(tFileName, "C005001101.MOTION"))
        return 120;
    if (!strcmp(tFileName, "C005001102.MOTION"))
        return 17;
    if (!strcmp(tFileName, "C005001103.MOTION"))
        return 91;
    if (!strcmp(tFileName, "C005001104.MOTION"))
        return 19;
    if (!strcmp(tFileName, "C005001105.MOTION"))
        return 61;
    if (!strcmp(tFileName, "C005001106.MOTION"))
        return 17;
    if (!strcmp(tFileName, "C006001101.MOTION"))
        return 120;
    if (!strcmp(tFileName, "C006001102.MOTION"))
        return 17;
    if (!strcmp(tFileName, "C006001103.MOTION"))
        return 91;
    if (!strcmp(tFileName, "C006001104.MOTION"))
        return 19;
    if (!strcmp(tFileName, "C006001105.MOTION"))
        return 61;
    if (!strcmp(tFileName, "C006001106.MOTION"))
        return 17;
    if (!strcmp(tFileName, "C001001092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C001003092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C001005092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C001007092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C002001092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C002003092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C002005092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C002007092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C003001092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C003003092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C003005092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C003007092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C004001092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C004003092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C004005092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C004007092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C005001092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C005003092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C005005092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C005007092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C006001092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C006003092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C006005092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C006007092.MOTION"))
        return 70;
    if (!strcmp(tFileName, "C001001093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C001003093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C001005093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C001007093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C002001093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C002003093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C002005093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C002007093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C003001093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C003003093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C003005093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C003007093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C004001093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C004003093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C004005093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C004007093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C005001093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C005003093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C005005093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C005007093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C006001093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C006003093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C006005093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C006007093.MOTION"))
        return 80;
    if (!strcmp(tFileName, "C001001094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C001003094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C001005094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C001007094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C002001094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C002003094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C002005094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C002007094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C003001094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C003003094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C003005094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C003007094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C004001094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C004003094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C004005094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C004007094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C005001094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C005003094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C005005094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C005007094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C006001094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C006003094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C006005094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C006007094.MOTION"))
        return 66;
    if (!strcmp(tFileName, "C001001095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C001003095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C001005095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C001007095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C002001095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C002003095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C002005095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C002007095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C003001095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C003003095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C003005095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C003007095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C004001095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C004003095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C004005095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C004007095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C005001095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C005003095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C005005095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C005007095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C006001095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C006003095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C006005095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C006007095.MOTION"))
        return 42;
    if (!strcmp(tFileName, "C001001096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C001003096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C001005096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C001007096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C002001096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C002003096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C002005096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C002007096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C003001096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C003003096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C003005096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C003007096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C004001096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C004003096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C004005096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C004007096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C005001096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C005003096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C005005096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C005007096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C006001096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C006003096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C006005096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C006007096.MOTION"))
        return 53;
    if (!strcmp(tFileName, "C001002011.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C002002011.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C003002011.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C004002011.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C005002011.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C006002011.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C007002011.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C008002011.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C009002011.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C010002011.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C011002011.MOTION"))
        return 40;
    if (!strcmp(tFileName, "C012002011.MOTION"))
        return 40;
    return 0;
}
int PLAY::ReturnMonsterFrameNum(char* tFileName)
{
    if (!strcmp(tFileName, "M001001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M001001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M001001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M001001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M001001006.MOTION")) return 37;
    if (!strcmp(tFileName, "M001001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M001001013.MOTION")) return 43;
    if (!strcmp(tFileName, "M001001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M002001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M002001002.MOTION")) return 51;
    if (!strcmp(tFileName, "M002001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M002001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M002001006.MOTION")) return 33;
    if (!strcmp(tFileName, "M002001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M002001013.MOTION")) return 39;
    if (!strcmp(tFileName, "M002001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M003001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M003001002.MOTION")) return 31;
    if (!strcmp(tFileName, "M003001004.MOTION")) return 25;
    if (!strcmp(tFileName, "M003001005.MOTION")) return 17;
    if (!strcmp(tFileName, "M003001006.MOTION")) return 21;
    if (!strcmp(tFileName, "M003001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M003001013.MOTION")) return 37;
    if (!strcmp(tFileName, "M003001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M004001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M004001002.MOTION")) return 40;
    if (!strcmp(tFileName, "M004001004.MOTION")) return 37;
    if (!strcmp(tFileName, "M004001005.MOTION")) return 17;
    if (!strcmp(tFileName, "M004001006.MOTION")) return 21;
    if (!strcmp(tFileName, "M004001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M004001013.MOTION")) return 37;
    if (!strcmp(tFileName, "M004001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M005001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M005001002.MOTION")) return 89;
    if (!strcmp(tFileName, "M005001004.MOTION")) return 85;
    if (!strcmp(tFileName, "M005001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M005001006.MOTION")) return 25;
    if (!strcmp(tFileName, "M005001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M005001013.MOTION")) return 37;
    if (!strcmp(tFileName, "M005001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M006001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M006001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M006001004.MOTION")) return 65;
    if (!strcmp(tFileName, "M006001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M006001006.MOTION")) return 27;
    if (!strcmp(tFileName, "M006001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M006001013.MOTION")) return 33;
    if (!strcmp(tFileName, "M006001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M007001001.MOTION")) return 49;
    if (!strcmp(tFileName, "M007001002.MOTION")) return 49;
    if (!strcmp(tFileName, "M007001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M007001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M007001006.MOTION")) return 28;
    if (!strcmp(tFileName, "M007001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M007001013.MOTION")) return 55;
    if (!strcmp(tFileName, "M007001020.MOTION")) return 49;
    if (!strcmp(tFileName, "M008001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M008001002.MOTION")) return 33;
    if (!strcmp(tFileName, "M008001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M008001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M008001006.MOTION")) return 29;
    if (!strcmp(tFileName, "M008001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M008001013.MOTION")) return 41;
    if (!strcmp(tFileName, "M008001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M009001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M009001002.MOTION")) return 41;
    if (!strcmp(tFileName, "M009001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M009001005.MOTION")) return 19;
    if (!strcmp(tFileName, "M009001006.MOTION")) return 29;
    if (!strcmp(tFileName, "M009001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M009001013.MOTION")) return 35;
    if (!strcmp(tFileName, "M009001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M010001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M010001002.MOTION")) return 56;
    if (!strcmp(tFileName, "M010001004.MOTION")) return 73;
    if (!strcmp(tFileName, "M010001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M010001006.MOTION")) return 25;
    if (!strcmp(tFileName, "M010001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M010001013.MOTION")) return 33;
    if (!strcmp(tFileName, "M010001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M011001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M011001002.MOTION")) return 56;
    if (!strcmp(tFileName, "M011001004.MOTION")) return 73;
    if (!strcmp(tFileName, "M011001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M011001006.MOTION")) return 29;
    if (!strcmp(tFileName, "M011001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M011001013.MOTION")) return 56;
    if (!strcmp(tFileName, "M011001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M012001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M012001002.MOTION")) return 75;
    if (!strcmp(tFileName, "M012001004.MOTION")) return 46;
    if (!strcmp(tFileName, "M012001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M012001006.MOTION")) return 30;
    if (!strcmp(tFileName, "M012001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M012001013.MOTION")) return 41;
    if (!strcmp(tFileName, "M012001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M013001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M013001002.MOTION")) return 91;
    if (!strcmp(tFileName, "M013001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M013001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M013001006.MOTION")) return 45;
    if (!strcmp(tFileName, "M013001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M013001013.MOTION")) return 60;
    if (!strcmp(tFileName, "M013001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M014001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M014001002.MOTION")) return 136;
    if (!strcmp(tFileName, "M014001004.MOTION")) return 65;
    if (!strcmp(tFileName, "M014001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M014001006.MOTION")) return 34;
    if (!strcmp(tFileName, "M014001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M014001013.MOTION")) return 52;
    if (!strcmp(tFileName, "M014001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M015001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M015001002.MOTION")) return 71;
    if (!strcmp(tFileName, "M015001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M015001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M015001006.MOTION")) return 45;
    if (!strcmp(tFileName, "M015001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M015001013.MOTION")) return 84;
    if (!strcmp(tFileName, "M015001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M016001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M016001002.MOTION")) return 81;
    if (!strcmp(tFileName, "M016001004.MOTION")) return 65;
    if (!strcmp(tFileName, "M016001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M016001006.MOTION")) return 32;
    if (!strcmp(tFileName, "M016001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M016001013.MOTION")) return 51;
    if (!strcmp(tFileName, "M016001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M017001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M017001002.MOTION")) return 71;
    if (!strcmp(tFileName, "M017001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M017001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M017001006.MOTION")) return 29;
    if (!strcmp(tFileName, "M017001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M017001013.MOTION")) return 37;
    if (!strcmp(tFileName, "M017001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M018001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M018001002.MOTION")) return 91;
    if (!strcmp(tFileName, "M018001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M018001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M018001006.MOTION")) return 50;
    if (!strcmp(tFileName, "M018001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M018001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M018001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M019001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M019001002.MOTION")) return 40;
    if (!strcmp(tFileName, "M019001004.MOTION")) return 37;
    if (!strcmp(tFileName, "M019001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M019001006.MOTION")) return 30;
    if (!strcmp(tFileName, "M019001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M019001013.MOTION")) return 46;
    if (!strcmp(tFileName, "M019001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M020001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M020001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M020001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M020001005.MOTION")) return 28;
    if (!strcmp(tFileName, "M020001006.MOTION")) return 37;
    if (!strcmp(tFileName, "M020001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M020001013.MOTION")) return 37;
    if (!strcmp(tFileName, "M020001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M021001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M021001002.MOTION")) return 71;
    if (!strcmp(tFileName, "M021001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M021001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M021001006.MOTION")) return 29;
    if (!strcmp(tFileName, "M021001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M021001013.MOTION")) return 37;
    if (!strcmp(tFileName, "M021001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M022001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M022001002.MOTION")) return 56;
    if (!strcmp(tFileName, "M022001004.MOTION")) return 61;
    if (!strcmp(tFileName, "M022001005.MOTION")) return 27;
    if (!strcmp(tFileName, "M022001006.MOTION")) return 35;
    if (!strcmp(tFileName, "M022001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M022001013.MOTION")) return 47;
    if (!strcmp(tFileName, "M022001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M023001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M023001002.MOTION")) return 63;
    if (!strcmp(tFileName, "M023001004.MOTION")) return 37;
    if (!strcmp(tFileName, "M023001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M023001006.MOTION")) return 35;
    if (!strcmp(tFileName, "M023001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M023001013.MOTION")) return 53;
    if (!strcmp(tFileName, "M023001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M024001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M024001002.MOTION")) return 88;
    if (!strcmp(tFileName, "M024001004.MOTION")) return 37;
    if (!strcmp(tFileName, "M024001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M024001006.MOTION")) return 31;
    if (!strcmp(tFileName, "M024001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M024001013.MOTION")) return 46;
    if (!strcmp(tFileName, "M024001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M025001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M025001002.MOTION")) return 40;
    if (!strcmp(tFileName, "M025001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M025001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M025001006.MOTION")) return 31;
    if (!strcmp(tFileName, "M025001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M025001013.MOTION")) return 37;
    if (!strcmp(tFileName, "M025001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M026001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M026001002.MOTION")) return 72;
    if (!strcmp(tFileName, "M026001004.MOTION")) return 36;
    if (!strcmp(tFileName, "M026001005.MOTION")) return 22;
    if (!strcmp(tFileName, "M026001006.MOTION")) return 33;
    if (!strcmp(tFileName, "M026001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M026001013.MOTION")) return 84;
    if (!strcmp(tFileName, "M026001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M027001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M027001002.MOTION")) return 44;
    if (!strcmp(tFileName, "M027001004.MOTION")) return 36;
    if (!strcmp(tFileName, "M027001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M027001006.MOTION")) return 36;
    if (!strcmp(tFileName, "M027001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M027001013.MOTION")) return 48;
    if (!strcmp(tFileName, "M027001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M028001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M028001002.MOTION")) return 51;
    if (!strcmp(tFileName, "M028001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M028001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M028001006.MOTION")) return 33;
    if (!strcmp(tFileName, "M028001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M028001013.MOTION")) return 39;
    if (!strcmp(tFileName, "M028001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M029001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M029001002.MOTION")) return 73;
    if (!strcmp(tFileName, "M029001004.MOTION")) return 37;
    if (!strcmp(tFileName, "M029001005.MOTION")) return 23;
    if (!strcmp(tFileName, "M029001006.MOTION")) return 31;
    if (!strcmp(tFileName, "M029001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M029001013.MOTION")) return 84;
    if (!strcmp(tFileName, "M029001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M030001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M030001002.MOTION")) return 40;
    if (!strcmp(tFileName, "M030001004.MOTION")) return 37;
    if (!strcmp(tFileName, "M030001005.MOTION")) return 23;
    if (!strcmp(tFileName, "M030001006.MOTION")) return 30;
    if (!strcmp(tFileName, "M030001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M030001013.MOTION")) return 36;
    if (!strcmp(tFileName, "M030001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M031001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M031001002.MOTION")) return 65;
    if (!strcmp(tFileName, "M031001004.MOTION")) return 37;
    if (!strcmp(tFileName, "M031001005.MOTION")) return 23;
    if (!strcmp(tFileName, "M031001006.MOTION")) return 33;
    if (!strcmp(tFileName, "M031001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M031001013.MOTION")) return 36;
    if (!strcmp(tFileName, "M031001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M032001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M032001002.MOTION")) return 88;
    if (!strcmp(tFileName, "M032001004.MOTION")) return 37;
    if (!strcmp(tFileName, "M032001005.MOTION")) return 23;
    if (!strcmp(tFileName, "M032001006.MOTION")) return 30;
    if (!strcmp(tFileName, "M032001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M032001013.MOTION")) return 36;
    if (!strcmp(tFileName, "M032001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M033001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M033001002.MOTION")) return 98;
    if (!strcmp(tFileName, "M033001004.MOTION")) return 36;
    if (!strcmp(tFileName, "M033001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M033001006.MOTION")) return 34;
    if (!strcmp(tFileName, "M033001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M033001013.MOTION")) return 38;
    if (!strcmp(tFileName, "M033001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M034001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M034001002.MOTION")) return 96;
    if (!strcmp(tFileName, "M034001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M034001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M034001006.MOTION")) return 32;
    if (!strcmp(tFileName, "M034001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M034001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M034001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M035001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M035001002.MOTION")) return 79;
    if (!strcmp(tFileName, "M035001004.MOTION")) return 51;
    if (!strcmp(tFileName, "M035001005.MOTION")) return 30;
    if (!strcmp(tFileName, "M035001006.MOTION")) return 30;
    if (!strcmp(tFileName, "M035001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M035001013.MOTION")) return 36;
    if (!strcmp(tFileName, "M035001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M036001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M036001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M036001004.MOTION")) return 40;
    if (!strcmp(tFileName, "M036001005.MOTION")) return 20;
    if (!strcmp(tFileName, "M036001006.MOTION")) return 33;
    if (!strcmp(tFileName, "M036001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M036001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M036001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M037001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M037001002.MOTION")) return 96;
    if (!strcmp(tFileName, "M037001004.MOTION")) return 50;
    if (!strcmp(tFileName, "M037001005.MOTION")) return 20;
    if (!strcmp(tFileName, "M037001006.MOTION")) return 33;
    if (!strcmp(tFileName, "M037001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M037001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M037001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M038001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M038001002.MOTION")) return 55;
    if (!strcmp(tFileName, "M038001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M038001005.MOTION")) return 24;
    if (!strcmp(tFileName, "M038001006.MOTION")) return 32;
    if (!strcmp(tFileName, "M038001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M038001013.MOTION")) return 39;
    if (!strcmp(tFileName, "M038001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M039001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M039001002.MOTION")) return 70;
    if (!strcmp(tFileName, "M039001004.MOTION")) return 39;
    if (!strcmp(tFileName, "M039001005.MOTION")) return 30;
    if (!strcmp(tFileName, "M039001006.MOTION")) return 30;
    if (!strcmp(tFileName, "M039001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M039001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M039001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M040001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M040001002.MOTION")) return 90;
    if (!strcmp(tFileName, "M040001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M040001005.MOTION")) return 17;
    if (!strcmp(tFileName, "M040001006.MOTION")) return 30;
    if (!strcmp(tFileName, "M040001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M040001013.MOTION")) return 31;
    if (!strcmp(tFileName, "M040001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M041001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M041001002.MOTION")) return 69;
    if (!strcmp(tFileName, "M041001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M041001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M041001006.MOTION")) return 30;
    if (!strcmp(tFileName, "M041001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M041001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M041001020.MOTION")) return 81;
    if (!strcmp(tFileName, "M042001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M042001002.MOTION")) return 91;
    if (!strcmp(tFileName, "M042001004.MOTION")) return 40;
    if (!strcmp(tFileName, "M042001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M042001006.MOTION")) return 32;
    if (!strcmp(tFileName, "M042001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M042001013.MOTION")) return 43;
    if (!strcmp(tFileName, "M042001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M043001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M043001002.MOTION")) return 100;
    if (!strcmp(tFileName, "M043001004.MOTION")) return 60;
    if (!strcmp(tFileName, "M043001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M043001006.MOTION")) return 35;
    if (!strcmp(tFileName, "M043001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M043001013.MOTION")) return 53;
    if (!strcmp(tFileName, "M043001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M044001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M044001002.MOTION")) return 70;
    if (!strcmp(tFileName, "M044001004.MOTION")) return 40;
    if (!strcmp(tFileName, "M044001005.MOTION")) return 26;
    if (!strcmp(tFileName, "M044001006.MOTION")) return 35;
    if (!strcmp(tFileName, "M044001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M044001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M044001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M045001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M045001002.MOTION")) return 100;
    if (!strcmp(tFileName, "M045001004.MOTION")) return 60;
    if (!strcmp(tFileName, "M045001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M045001006.MOTION")) return 35;
    if (!strcmp(tFileName, "M045001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M045001013.MOTION")) return 53;
    if (!strcmp(tFileName, "M045001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M046001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M046001002.MOTION")) return 55;
    if (!strcmp(tFileName, "M046001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M046001005.MOTION")) return 24;
    if (!strcmp(tFileName, "M046001006.MOTION")) return 30;
    if (!strcmp(tFileName, "M046001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M046001013.MOTION")) return 39;
    if (!strcmp(tFileName, "M046001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M047001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M047001002.MOTION")) return 81;
    if (!strcmp(tFileName, "M047001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M047001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M047001006.MOTION")) return 31;
    if (!strcmp(tFileName, "M047001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M047001013.MOTION")) return 43;
    if (!strcmp(tFileName, "M047001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M048001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M048001002.MOTION")) return 71;
    if (!strcmp(tFileName, "M048001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M048001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M048001006.MOTION")) return 45;
    if (!strcmp(tFileName, "M048001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M048001013.MOTION")) return 84;
    if (!strcmp(tFileName, "M048001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M049001001.MOTION")) return 60;
    if (!strcmp(tFileName, "M049001002.MOTION")) return 51;
    if (!strcmp(tFileName, "M049001004.MOTION")) return 40;
    if (!strcmp(tFileName, "M049001005.MOTION")) return 15;
    if (!strcmp(tFileName, "M049001006.MOTION")) return 30;
    if (!strcmp(tFileName, "M049001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M049001013.MOTION")) return 18;
    if (!strcmp(tFileName, "M049001020.MOTION")) return 60;
    if (!strcmp(tFileName, "M050001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M050001002.MOTION")) return 88;
    if (!strcmp(tFileName, "M050001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M050001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M050001006.MOTION")) return 35;
    if (!strcmp(tFileName, "M050001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M050001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M050001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M051001001.MOTION")) return 90;
    if (!strcmp(tFileName, "M051001002.MOTION")) return 90;
    if (!strcmp(tFileName, "M051001004.MOTION")) return 45;
    if (!strcmp(tFileName, "M051001005.MOTION")) return 22;
    if (!strcmp(tFileName, "M051001006.MOTION")) return 60;
    if (!strcmp(tFileName, "M051001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M051001013.MOTION")) return 70;
    if (!strcmp(tFileName, "M051001020.MOTION")) return 90;
    if (!strcmp(tFileName, "M052001001.MOTION")) return 90;
    if (!strcmp(tFileName, "M052001002.MOTION")) return 90;
    if (!strcmp(tFileName, "M052001004.MOTION")) return 45;
    if (!strcmp(tFileName, "M052001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M052001006.MOTION")) return 60;
    if (!strcmp(tFileName, "M052001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M052001013.MOTION")) return 85;
    if (!strcmp(tFileName, "M052001020.MOTION")) return 90;
    if (!strcmp(tFileName, "M053001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M053001002.MOTION")) return 64;
    if (!strcmp(tFileName, "M053001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M053001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M053001006.MOTION")) return 29;
    if (!strcmp(tFileName, "M053001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M053001013.MOTION")) return 30;
    if (!strcmp(tFileName, "M053001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M054001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M054001002.MOTION")) return 40;
    if (!strcmp(tFileName, "M054001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M054001005.MOTION")) return 16;
    if (!strcmp(tFileName, "M054001006.MOTION")) return 34;
    if (!strcmp(tFileName, "M054001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M054001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M054001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M055001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M055001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M055001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M055001005.MOTION")) return 17;
    if (!strcmp(tFileName, "M055001006.MOTION")) return 30;
    if (!strcmp(tFileName, "M055001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M055001013.MOTION")) return 36;
    if (!strcmp(tFileName, "M055001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M056001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M056001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M056001004.MOTION")) return 39;
    if (!strcmp(tFileName, "M056001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M056001006.MOTION")) return 43;
    if (!strcmp(tFileName, "M056001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M056001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M056001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M057001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M057001002.MOTION")) return 46;
    if (!strcmp(tFileName, "M057001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M057001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M057001006.MOTION")) return 27;
    if (!strcmp(tFileName, "M057001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M057001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M057001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M058001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M058001002.MOTION")) return 70;
    if (!strcmp(tFileName, "M058001004.MOTION")) return 40;
    if (!strcmp(tFileName, "M058001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M058001006.MOTION")) return 35;
    if (!strcmp(tFileName, "M058001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M058001013.MOTION")) return 46;
    if (!strcmp(tFileName, "M058001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M059001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M059001002.MOTION")) return 81;
    if (!strcmp(tFileName, "M059001004.MOTION")) return 35;
    if (!strcmp(tFileName, "M059001005.MOTION")) return 27;
    if (!strcmp(tFileName, "M059001006.MOTION")) return 51;
    if (!strcmp(tFileName, "M059001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M059001013.MOTION")) return 57;
    if (!strcmp(tFileName, "M059001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M060001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M060001002.MOTION")) return 40;
    if (!strcmp(tFileName, "M060001004.MOTION")) return 30;
    if (!strcmp(tFileName, "M060001005.MOTION")) return 20;
    if (!strcmp(tFileName, "M060001006.MOTION")) return 35;
    if (!strcmp(tFileName, "M060001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M060001013.MOTION")) return 33;
    if (!strcmp(tFileName, "M060001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M061001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M061001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M061001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M061001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M061001006.MOTION")) return 50;
    if (!strcmp(tFileName, "M061001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M061001013.MOTION")) return 52;
    if (!strcmp(tFileName, "M061001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M062001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M062001002.MOTION")) return 80;
    if (!strcmp(tFileName, "M062001004.MOTION")) return 50;
    if (!strcmp(tFileName, "M062001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M062001006.MOTION")) return 36;
    if (!strcmp(tFileName, "M062001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M062001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M062001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M063001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M063001002.MOTION")) return 46;
    if (!strcmp(tFileName, "M063001004.MOTION")) return 26;
    if (!strcmp(tFileName, "M063001005.MOTION")) return 16;
    if (!strcmp(tFileName, "M063001006.MOTION")) return 28;
    if (!strcmp(tFileName, "M063001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M063001013.MOTION")) return 34;
    if (!strcmp(tFileName, "M063001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M064001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M064001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M064001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M064001005.MOTION")) return 24;
    if (!strcmp(tFileName, "M064001006.MOTION")) return 38;
    if (!strcmp(tFileName, "M064001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M064001013.MOTION")) return 39;
    if (!strcmp(tFileName, "M064001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M065001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M065001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M065001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M065001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M065001006.MOTION")) return 42;
    if (!strcmp(tFileName, "M065001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M065001013.MOTION")) return 47;
    if (!strcmp(tFileName, "M065001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M066001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M066001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M066001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M066001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M066001006.MOTION")) return 41;
    if (!strcmp(tFileName, "M066001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M066001013.MOTION")) return 45;
    if (!strcmp(tFileName, "M066001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M067001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M067001002.MOTION")) return 80;
    if (!strcmp(tFileName, "M067001004.MOTION")) return 36;
    if (!strcmp(tFileName, "M067001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M067001006.MOTION")) return 29;
    if (!strcmp(tFileName, "M067001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M067001013.MOTION")) return 37;
    if (!strcmp(tFileName, "M067001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M068001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M068001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M068001004.MOTION")) return 36;
    if (!strcmp(tFileName, "M068001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M068001006.MOTION")) return 53;
    if (!strcmp(tFileName, "M068001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M068001013.MOTION")) return 63;
    if (!strcmp(tFileName, "M068001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M069001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M069001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M069001004.MOTION")) return 37;
    if (!strcmp(tFileName, "M069001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M069001006.MOTION")) return 42;
    if (!strcmp(tFileName, "M069001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M069001013.MOTION")) return 75;
    if (!strcmp(tFileName, "M069001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M071001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M071001002.MOTION")) return 70;
    if (!strcmp(tFileName, "M071001004.MOTION")) return 30;
    if (!strcmp(tFileName, "M071001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M071001006.MOTION")) return 27;
    if (!strcmp(tFileName, "M071001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M071001013.MOTION")) return 46;
    if (!strcmp(tFileName, "M071001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M072001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M072001002.MOTION")) return 40;
    if (!strcmp(tFileName, "M072001004.MOTION")) return 37;
    if (!strcmp(tFileName, "M072001005.MOTION")) return 24;
    if (!strcmp(tFileName, "M072001006.MOTION")) return 32;
    if (!strcmp(tFileName, "M072001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M072001013.MOTION")) return 39;
    if (!strcmp(tFileName, "M072001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M073001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M073001002.MOTION")) return 73;
    if (!strcmp(tFileName, "M073001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M073001005.MOTION")) return 20;
    if (!strcmp(tFileName, "M073001006.MOTION")) return 35;
    if (!strcmp(tFileName, "M073001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M073001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M073001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M074001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M074001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M074001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M074001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M074001006.MOTION")) return 35;
    if (!strcmp(tFileName, "M074001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M074001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M074001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M075001001.MOTION")) return 60;
    if (!strcmp(tFileName, "M075001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M075001004.MOTION")) return 24;
    if (!strcmp(tFileName, "M075001005.MOTION")) return 18;
    if (!strcmp(tFileName, "M075001006.MOTION")) return 23;
    if (!strcmp(tFileName, "M075001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M075001013.MOTION")) return 29;
    if (!strcmp(tFileName, "M075001020.MOTION")) return 60;
    if (!strcmp(tFileName, "M076001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M076001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M076001004.MOTION")) return 40;
    if (!strcmp(tFileName, "M076001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M076001006.MOTION")) return 35;
    if (!strcmp(tFileName, "M076001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M076001013.MOTION")) return 30;
    if (!strcmp(tFileName, "M076001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M077001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M077001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M077001004.MOTION")) return 37;
    if (!strcmp(tFileName, "M077001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M077001006.MOTION")) return 68;
    if (!strcmp(tFileName, "M077001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M077001013.MOTION")) return 53;
    if (!strcmp(tFileName, "M077001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M079001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M079001002.MOTION")) return 54;
    if (!strcmp(tFileName, "M079001004.MOTION")) return 46;
    if (!strcmp(tFileName, "M079001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M079001006.MOTION")) return 48;
    if (!strcmp(tFileName, "M079001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M079001013.MOTION")) return 61;
    if (!strcmp(tFileName, "M079001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M080001001.MOTION")) return 60;
    if (!strcmp(tFileName, "M080001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M080001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M080001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M080001006.MOTION")) return 29;
    if (!strcmp(tFileName, "M080001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M080001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M080001020.MOTION")) return 60;
    if (!strcmp(tFileName, "M081001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M081001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M081001004.MOTION")) return 46;
    if (!strcmp(tFileName, "M081001005.MOTION")) return 19;
    if (!strcmp(tFileName, "M081001006.MOTION")) return 25;
    if (!strcmp(tFileName, "M081001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M081001013.MOTION")) return 39;
    if (!strcmp(tFileName, "M081001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M082001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M082001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M082001004.MOTION")) return 36;
    if (!strcmp(tFileName, "M082001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M082001006.MOTION")) return 48;
    if (!strcmp(tFileName, "M082001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M082001013.MOTION")) return 87;
    if (!strcmp(tFileName, "M082001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M083001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M083001002.MOTION")) return 51;
    if (!strcmp(tFileName, "M083001004.MOTION")) return 51;
    if (!strcmp(tFileName, "M083001005.MOTION")) return 35;
    if (!strcmp(tFileName, "M083001006.MOTION")) return 55;
    if (!strcmp(tFileName, "M083001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M083001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M083001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M084001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M084001002.MOTION")) return 81;
    if (!strcmp(tFileName, "M084001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M084001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M084001006.MOTION")) return 70;
    if (!strcmp(tFileName, "M084001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M084001013.MOTION")) return 55;
    if (!strcmp(tFileName, "M084001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M085001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M085001002.MOTION")) return 41;
    if (!strcmp(tFileName, "M085001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M085001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M085001006.MOTION")) return 33;
    if (!strcmp(tFileName, "M085001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M085001013.MOTION")) return 45;
    if (!strcmp(tFileName, "M085001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M086001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M086001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M086001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M086001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M086001006.MOTION")) return 53;
    if (!strcmp(tFileName, "M086001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M086001013.MOTION")) return 52;
    if (!strcmp(tFileName, "M086001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M087001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M087001002.MOTION")) return 120;
    if (!strcmp(tFileName, "M087001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M087001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M087001006.MOTION")) return 44;
    if (!strcmp(tFileName, "M087001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M087001013.MOTION")) return 60;
    if (!strcmp(tFileName, "M087001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M088001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M088001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M088001004.MOTION")) return 46;
    if (!strcmp(tFileName, "M088001005.MOTION")) return 40;
    if (!strcmp(tFileName, "M088001006.MOTION")) return 42;
    if (!strcmp(tFileName, "M088001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M088001013.MOTION")) return 51;
    if (!strcmp(tFileName, "M088001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M089001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M089001002.MOTION")) return 81;
    if (!strcmp(tFileName, "M089001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M089001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M089001006.MOTION")) return 60;
    if (!strcmp(tFileName, "M089001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M089001013.MOTION")) return 45;
    if (!strcmp(tFileName, "M089001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M090001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M090001002.MOTION")) return 71;
    if (!strcmp(tFileName, "M090001004.MOTION")) return 45;
    if (!strcmp(tFileName, "M090001005.MOTION")) return 27;
    if (!strcmp(tFileName, "M090001006.MOTION")) return 65;
    if (!strcmp(tFileName, "M090001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M090001013.MOTION")) return 54;
    if (!strcmp(tFileName, "M090001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M091001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M091001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M091001004.MOTION")) return 46;
    if (!strcmp(tFileName, "M091001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M091001006.MOTION")) return 85;
    if (!strcmp(tFileName, "M091001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M091001013.MOTION")) return 65;
    if (!strcmp(tFileName, "M091001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M092001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M092001002.MOTION")) return 90;
    if (!strcmp(tFileName, "M092001004.MOTION")) return 45;
    if (!strcmp(tFileName, "M092001005.MOTION")) return 27;
    if (!strcmp(tFileName, "M092001006.MOTION")) return 79;
    if (!strcmp(tFileName, "M092001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M092001013.MOTION")) return 57;
    if (!strcmp(tFileName, "M092001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M093001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M093001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M093001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M093001005.MOTION")) return 31;
    if (!strcmp(tFileName, "M093001006.MOTION")) return 45;
    if (!strcmp(tFileName, "M093001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M093001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M093001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M094001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M094001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M094001004.MOTION")) return 51;
    if (!strcmp(tFileName, "M094001005.MOTION")) return 26;
    if (!strcmp(tFileName, "M094001006.MOTION")) return 51;
    if (!strcmp(tFileName, "M094001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M094001013.MOTION")) return 48;
    if (!strcmp(tFileName, "M094001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M096001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M096001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M096001004.MOTION")) return 46;
    if (!strcmp(tFileName, "M096001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M096001006.MOTION")) return 41;
    if (!strcmp(tFileName, "M096001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M096001013.MOTION")) return 99;
    if (!strcmp(tFileName, "M096001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M097001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M097001002.MOTION")) return 81;
    if (!strcmp(tFileName, "M097001004.MOTION")) return 51;
    if (!strcmp(tFileName, "M097001005.MOTION")) return 41;
    if (!strcmp(tFileName, "M097001006.MOTION")) return 65;
    if (!strcmp(tFileName, "M097001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M097001013.MOTION")) return 48;
    if (!strcmp(tFileName, "M097001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M098001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M098001002.MOTION")) return 81;
    if (!strcmp(tFileName, "M098001004.MOTION")) return 45;
    if (!strcmp(tFileName, "M098001005.MOTION")) return 35;
    if (!strcmp(tFileName, "M098001006.MOTION")) return 60;
    if (!strcmp(tFileName, "M098001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M098001013.MOTION")) return 70;
    if (!strcmp(tFileName, "M098001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M099001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M099001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M099001004.MOTION")) return 45;
    if (!strcmp(tFileName, "M099001005.MOTION")) return 30;
    if (!strcmp(tFileName, "M099001006.MOTION")) return 60;
    if (!strcmp(tFileName, "M099001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M099001013.MOTION")) return 70;
    if (!strcmp(tFileName, "M099001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M100001001.MOTION")) return 90;
    if (!strcmp(tFileName, "M100001002.MOTION")) return 80;
    if (!strcmp(tFileName, "M100001004.MOTION")) return 51;
    if (!strcmp(tFileName, "M100001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M100001006.MOTION")) return 90;
    if (!strcmp(tFileName, "M100001008.MOTION")) return 70;
    if (!strcmp(tFileName, "M100001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M100001013.MOTION")) return 60;
    if (!strcmp(tFileName, "M100001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M101001001.MOTION")) return 90;
    if (!strcmp(tFileName, "M101001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M101001004.MOTION")) return 45;
    if (!strcmp(tFileName, "M101001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M101001006.MOTION")) return 70;
    if (!strcmp(tFileName, "M101001008.MOTION")) return 81;
    if (!strcmp(tFileName, "M101001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M101001013.MOTION")) return 45;
    if (!strcmp(tFileName, "M101001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M102001001.MOTION")) return 90;
    if (!strcmp(tFileName, "M102001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M102001004.MOTION")) return 51;
    if (!strcmp(tFileName, "M102001005.MOTION")) return 31;
    if (!strcmp(tFileName, "M102001006.MOTION")) return 90;
    if (!strcmp(tFileName, "M102001008.MOTION")) return 75;
    if (!strcmp(tFileName, "M102001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M102001013.MOTION")) return 75;
    if (!strcmp(tFileName, "M102001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M103001001.MOTION")) return 90;
    if (!strcmp(tFileName, "M103001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M103001004.MOTION")) return 45;
    if (!strcmp(tFileName, "M103001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M103001006.MOTION")) return 70;
    if (!strcmp(tFileName, "M103001008.MOTION")) return 65;
    if (!strcmp(tFileName, "M103001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M103001013.MOTION")) return 57;
    if (!strcmp(tFileName, "M103001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M104001001.MOTION")) return 90;
    if (!strcmp(tFileName, "M104001002.MOTION")) return 86;
    if (!strcmp(tFileName, "M104001004.MOTION")) return 58;
    if (!strcmp(tFileName, "M104001005.MOTION")) return 41;
    if (!strcmp(tFileName, "M104001006.MOTION")) return 100;
    if (!strcmp(tFileName, "M104001008.MOTION")) return 73;
    if (!strcmp(tFileName, "M104001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M104001013.MOTION")) return 79;
    if (!strcmp(tFileName, "M104001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M105001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M105001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M105001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M105001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M105001006.MOTION")) return 47;
    if (!strcmp(tFileName, "M105001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M105001013.MOTION")) return 60;
    if (!strcmp(tFileName, "M105001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M109001001.MOTION")) return 2;
    if (!strcmp(tFileName, "M109001002.MOTION")) return 2;
    if (!strcmp(tFileName, "M109001004.MOTION")) return 2;
    if (!strcmp(tFileName, "M109001005.MOTION")) return 2;
    if (!strcmp(tFileName, "M109001006.MOTION")) return 2;
    if (!strcmp(tFileName, "M109001009.MOTION")) return 2;
    if (!strcmp(tFileName, "M109001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M109001020.MOTION")) return 2;
    if (!strcmp(tFileName, "M110001001.MOTION")) return 2;
    if (!strcmp(tFileName, "M110001002.MOTION")) return 2;
    if (!strcmp(tFileName, "M110001004.MOTION")) return 2;
    if (!strcmp(tFileName, "M110001005.MOTION")) return 2;
    if (!strcmp(tFileName, "M110001006.MOTION")) return 2;
    if (!strcmp(tFileName, "M110001009.MOTION")) return 2;
    if (!strcmp(tFileName, "M110001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M110001020.MOTION")) return 2;
    if (!strcmp(tFileName, "M111001001.MOTION")) return 2;
    if (!strcmp(tFileName, "M111001002.MOTION")) return 2;
    if (!strcmp(tFileName, "M111001004.MOTION")) return 2;
    if (!strcmp(tFileName, "M111001005.MOTION")) return 2;
    if (!strcmp(tFileName, "M111001006.MOTION")) return 2;
    if (!strcmp(tFileName, "M111001009.MOTION")) return 2;
    if (!strcmp(tFileName, "M111001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M111001020.MOTION")) return 2;
    if (!strcmp(tFileName, "M112001001.MOTION")) return 2;
    if (!strcmp(tFileName, "M112001002.MOTION")) return 2;
    if (!strcmp(tFileName, "M112001004.MOTION")) return 2;
    if (!strcmp(tFileName, "M112001005.MOTION")) return 2;
    if (!strcmp(tFileName, "M112001006.MOTION")) return 2;
    if (!strcmp(tFileName, "M112001009.MOTION")) return 2;
    if (!strcmp(tFileName, "M112001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M112001020.MOTION")) return 2;
    if (!strcmp(tFileName, "M113001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M113001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M113001004.MOTION")) return 49;
    if (!strcmp(tFileName, "M113001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M113001006.MOTION")) return 41;
    if (!strcmp(tFileName, "M113001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M113001013.MOTION")) return 41;
    if (!strcmp(tFileName, "M113001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M115001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M115001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M115001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M115001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M115001006.MOTION")) return 15;
    if (!strcmp(tFileName, "M115001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M115001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M115001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M116001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M116001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M116001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M116001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M116001006.MOTION")) return 15;
    if (!strcmp(tFileName, "M116001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M116001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M116001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M117001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M117001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M117001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M117001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M117001006.MOTION")) return 15;
    if (!strcmp(tFileName, "M117001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M117001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M117001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M118001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M118001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M118001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M118001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M118001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M118001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M118001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M118001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M119001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M119001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M119001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M119001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M119001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M119001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M119001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M119001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M120001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M120001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M120001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M120001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M120001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M120001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M120001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M120001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M121001001.MOTION")) return 2;
    if (!strcmp(tFileName, "M121001002.MOTION")) return 2;
    if (!strcmp(tFileName, "M121001004.MOTION")) return 2;
    if (!strcmp(tFileName, "M121001005.MOTION")) return 2;
    if (!strcmp(tFileName, "M121001006.MOTION")) return 2;
    if (!strcmp(tFileName, "M121001009.MOTION")) return 2;
    if (!strcmp(tFileName, "M121001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M121001020.MOTION")) return 2;
    if (!strcmp(tFileName, "M122001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M122001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M122001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M122001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M122001006.MOTION")) return 15;
    if (!strcmp(tFileName, "M122001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M122001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M122001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M123001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M123001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M123001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M123001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M123001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M123001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M123001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M123001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M124001001.MOTION")) return 2;
    if (!strcmp(tFileName, "M124001002.MOTION")) return 2;
    if (!strcmp(tFileName, "M124001004.MOTION")) return 2;
    if (!strcmp(tFileName, "M124001005.MOTION")) return 2;
    if (!strcmp(tFileName, "M124001006.MOTION")) return 2;
    if (!strcmp(tFileName, "M124001009.MOTION")) return 2;
    if (!strcmp(tFileName, "M124001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M124001020.MOTION")) return 2;
    if (!strcmp(tFileName, "M125001001.MOTION")) return 2;
    if (!strcmp(tFileName, "M125001002.MOTION")) return 2;
    if (!strcmp(tFileName, "M125001004.MOTION")) return 2;
    if (!strcmp(tFileName, "M125001005.MOTION")) return 2;
    if (!strcmp(tFileName, "M125001006.MOTION")) return 2;
    if (!strcmp(tFileName, "M125001009.MOTION")) return 2;
    if (!strcmp(tFileName, "M125001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M125001020.MOTION")) return 2;
    if (!strcmp(tFileName, "M126001001.MOTION")) return 2;
    if (!strcmp(tFileName, "M126001002.MOTION")) return 2;
    if (!strcmp(tFileName, "M126001004.MOTION")) return 2;
    if (!strcmp(tFileName, "M126001005.MOTION")) return 2;
    if (!strcmp(tFileName, "M126001006.MOTION")) return 2;
    if (!strcmp(tFileName, "M126001009.MOTION")) return 2;
    if (!strcmp(tFileName, "M126001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M126001020.MOTION")) return 2;
    if (!strcmp(tFileName, "M127001001.MOTION")) return 2;
    if (!strcmp(tFileName, "M127001002.MOTION")) return 2;
    if (!strcmp(tFileName, "M127001004.MOTION")) return 2;
    if (!strcmp(tFileName, "M127001005.MOTION")) return 2;
    if (!strcmp(tFileName, "M127001006.MOTION")) return 2;
    if (!strcmp(tFileName, "M127001009.MOTION")) return 2;
    if (!strcmp(tFileName, "M127001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M127001020.MOTION")) return 2;
    if (!strcmp(tFileName, "M128001001.MOTION")) return 2;
    if (!strcmp(tFileName, "M128001002.MOTION")) return 2;
    if (!strcmp(tFileName, "M128001004.MOTION")) return 2;
    if (!strcmp(tFileName, "M128001005.MOTION")) return 2;
    if (!strcmp(tFileName, "M128001006.MOTION")) return 2;
    if (!strcmp(tFileName, "M128001009.MOTION")) return 2;
    if (!strcmp(tFileName, "M128001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M128001020.MOTION")) return 2;
    if (!strcmp(tFileName, "M129001001.MOTION")) return 2;
    if (!strcmp(tFileName, "M129001002.MOTION")) return 2;
    if (!strcmp(tFileName, "M129001004.MOTION")) return 2;
    if (!strcmp(tFileName, "M129001005.MOTION")) return 2;
    if (!strcmp(tFileName, "M129001006.MOTION")) return 2;
    if (!strcmp(tFileName, "M129001009.MOTION")) return 2;
    if (!strcmp(tFileName, "M129001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M129001020.MOTION")) return 2;
    if (!strcmp(tFileName, "M130001001.MOTION")) return 2;
    if (!strcmp(tFileName, "M130001002.MOTION")) return 2;
    if (!strcmp(tFileName, "M130001004.MOTION")) return 2;
    if (!strcmp(tFileName, "M130001005.MOTION")) return 2;
    if (!strcmp(tFileName, "M130001006.MOTION")) return 2;
    if (!strcmp(tFileName, "M130001009.MOTION")) return 2;
    if (!strcmp(tFileName, "M130001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M130001020.MOTION")) return 2;
    if (!strcmp(tFileName, "M131001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M131001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M131001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M131001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M131001006.MOTION")) return 15;
    if (!strcmp(tFileName, "M131001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M131001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M131001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M132001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M132001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M132001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M132001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M132001006.MOTION")) return 15;
    if (!strcmp(tFileName, "M132001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M132001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M132001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M133001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M133001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M133001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M133001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M133001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M133001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M133001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M133001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M134001001.MOTION")) return 2;
    if (!strcmp(tFileName, "M134001002.MOTION")) return 2;
    if (!strcmp(tFileName, "M134001004.MOTION")) return 2;
    if (!strcmp(tFileName, "M134001005.MOTION")) return 2;
    if (!strcmp(tFileName, "M134001006.MOTION")) return 2;
    if (!strcmp(tFileName, "M134001009.MOTION")) return 2;
    if (!strcmp(tFileName, "M134001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M134001020.MOTION")) return 2;
    if (!strcmp(tFileName, "M151001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M151001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M151001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M151001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M151001006.MOTION")) return 55;
    if (!strcmp(tFileName, "M151001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M151001013.MOTION")) return 61;
    if (!strcmp(tFileName, "M151001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M152001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M152001002.MOTION")) return 79;
    if (!strcmp(tFileName, "M152001004.MOTION")) return 26;
    if (!strcmp(tFileName, "M152001005.MOTION")) return 26;
    if (!strcmp(tFileName, "M152001006.MOTION")) return 20;
    if (!strcmp(tFileName, "M152001009.MOTION")) return 5;
    if (!strcmp(tFileName, "M152001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M152001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M153001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M153001002.MOTION")) return 80;
    if (!strcmp(tFileName, "M153001004.MOTION")) return 25;
    if (!strcmp(tFileName, "M153001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M153001006.MOTION")) return 20;
    if (!strcmp(tFileName, "M153001009.MOTION")) return 5;
    if (!strcmp(tFileName, "M153001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M153001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M154001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M154001002.MOTION")) return 81;
    if (!strcmp(tFileName, "M154001004.MOTION")) return 29;
    if (!strcmp(tFileName, "M154001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M154001006.MOTION")) return 20;
    if (!strcmp(tFileName, "M154001009.MOTION")) return 5;
    if (!strcmp(tFileName, "M154001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M154001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M155001001.MOTION")) return 51;
    if (!strcmp(tFileName, "M155001002.MOTION")) return 51;
    if (!strcmp(tFileName, "M155001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M155001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M155001006.MOTION")) return 37;
    if (!strcmp(tFileName, "M155001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M155001013.MOTION")) return 37;
    if (!strcmp(tFileName, "M155001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M156001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M156001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M156001004.MOTION")) return 46;
    if (!strcmp(tFileName, "M156001005.MOTION")) return 19;
    if (!strcmp(tFileName, "M156001006.MOTION")) return 39;
    if (!strcmp(tFileName, "M156001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M156001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M156001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M157001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M157001002.MOTION")) return 80;
    if (!strcmp(tFileName, "M157001004.MOTION")) return 25;
    if (!strcmp(tFileName, "M157001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M157001006.MOTION")) return 45;
    if (!strcmp(tFileName, "M157001009.MOTION")) return 5;
    if (!strcmp(tFileName, "M157001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M157001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M158001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M158001002.MOTION")) return 80;
    if (!strcmp(tFileName, "M158001004.MOTION")) return 25;
    if (!strcmp(tFileName, "M158001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M158001006.MOTION")) return 45;
    if (!strcmp(tFileName, "M158001009.MOTION")) return 5;
    if (!strcmp(tFileName, "M158001013.MOTION")) return 61;
    if (!strcmp(tFileName, "M158001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M159001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M159001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M159001004.MOTION")) return 40;
    if (!strcmp(tFileName, "M159001005.MOTION")) return 20;
    if (!strcmp(tFileName, "M159001006.MOTION")) return 33;
    if (!strcmp(tFileName, "M159001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M159001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M159001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M160001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M160001002.MOTION")) return 55;
    if (!strcmp(tFileName, "M160001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M160001005.MOTION")) return 24;
    if (!strcmp(tFileName, "M160001006.MOTION")) return 32;
    if (!strcmp(tFileName, "M160001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M160001013.MOTION")) return 39;
    if (!strcmp(tFileName, "M160001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M161001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M161001002.MOTION")) return 81;
    if (!strcmp(tFileName, "M161001004.MOTION")) return 29;
    if (!strcmp(tFileName, "M161001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M161001006.MOTION")) return 22;
    if (!strcmp(tFileName, "M161001009.MOTION")) return 5;
    if (!strcmp(tFileName, "M161001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M161001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M162001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M162001002.MOTION")) return 56;
    if (!strcmp(tFileName, "M162001004.MOTION")) return 38;
    if (!strcmp(tFileName, "M162001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M162001006.MOTION")) return 29;
    if (!strcmp(tFileName, "M162001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M162001013.MOTION")) return 56;
    if (!strcmp(tFileName, "M162001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M163001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M163001002.MOTION")) return 51;
    if (!strcmp(tFileName, "M163001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M163001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M163001006.MOTION")) return 33;
    if (!strcmp(tFileName, "M163001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M163001013.MOTION")) return 39;
    if (!strcmp(tFileName, "M163001020.MOTION")) return 51;
    if (!strcmp(tFileName, "M164001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M164001002.MOTION")) return 96;
    if (!strcmp(tFileName, "M164001004.MOTION")) return 50;
    if (!strcmp(tFileName, "M164001005.MOTION")) return 20;
    if (!strcmp(tFileName, "M164001006.MOTION")) return 33;
    if (!strcmp(tFileName, "M164001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M164001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M164001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M165001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M165001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M165001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M165001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M165001006.MOTION")) return 41;
    if (!strcmp(tFileName, "M165001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M165001013.MOTION")) return 45;
    if (!strcmp(tFileName, "M165001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M166001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M166001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M166001004.MOTION")) return 35;
    if (!strcmp(tFileName, "M166001005.MOTION")) return 24;
    if (!strcmp(tFileName, "M166001006.MOTION")) return 40;
    if (!strcmp(tFileName, "M166001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M166001013.MOTION")) return 45;
    if (!strcmp(tFileName, "M166001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M167001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M167001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M167001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M167001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M167001006.MOTION")) return 50;
    if (!strcmp(tFileName, "M167001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M167001013.MOTION")) return 25;
    if (!strcmp(tFileName, "M167001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M168001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M168001002.MOTION")) return 80;
    if (!strcmp(tFileName, "M168001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M168001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M168001006.MOTION")) return 36;
    if (!strcmp(tFileName, "M168001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M168001013.MOTION")) return 41;
    if (!strcmp(tFileName, "M168001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M169001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M169001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M169001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M169001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M169001006.MOTION")) return 38;
    if (!strcmp(tFileName, "M169001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M169001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M169001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M170001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M170001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M170001004.MOTION")) return 45;
    if (!strcmp(tFileName, "M170001005.MOTION")) return 31;
    if (!strcmp(tFileName, "M170001006.MOTION")) return 55;
    if (!strcmp(tFileName, "M170001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M170001013.MOTION")) return 77;
    if (!strcmp(tFileName, "M170001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M171001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M171001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M171001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M171001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M171001006.MOTION")) return 41;
    if (!strcmp(tFileName, "M171001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M171001013.MOTION")) return 65;
    if (!strcmp(tFileName, "M171001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M172001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M172001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M172001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M172001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M172001006.MOTION")) return 66;
    if (!strcmp(tFileName, "M172001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M172001013.MOTION")) return 54;
    if (!strcmp(tFileName, "M172001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M173001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M173001002.MOTION")) return 70;
    if (!strcmp(tFileName, "M173001004.MOTION")) return 29;
    if (!strcmp(tFileName, "M173001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M173001006.MOTION")) return 35;
    if (!strcmp(tFileName, "M173001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M173001013.MOTION")) return 27;
    if (!strcmp(tFileName, "M173001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M174001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M174001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M174001004.MOTION")) return 45;
    if (!strcmp(tFileName, "M174001005.MOTION")) return 31;
    if (!strcmp(tFileName, "M174001006.MOTION")) return 45;
    if (!strcmp(tFileName, "M174001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M174001013.MOTION")) return 27;
    if (!strcmp(tFileName, "M174001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M175001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M175001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M175001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M175001005.MOTION")) return 26;
    if (!strcmp(tFileName, "M175001006.MOTION")) return 46;
    if (!strcmp(tFileName, "M175001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M175001013.MOTION")) return 45;
    if (!strcmp(tFileName, "M175001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M176001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M176001002.MOTION")) return 81;
    if (!strcmp(tFileName, "M176001004.MOTION")) return 61;
    if (!strcmp(tFileName, "M176001005.MOTION")) return 41;
    if (!strcmp(tFileName, "M176001006.MOTION")) return 60;
    if (!strcmp(tFileName, "M176001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M176001013.MOTION")) return 60;
    if (!strcmp(tFileName, "M176001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M177001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M177001002.MOTION")) return 67;
    if (!strcmp(tFileName, "M177001004.MOTION")) return 55;
    if (!strcmp(tFileName, "M177001005.MOTION")) return 44;
    if (!strcmp(tFileName, "M177001006.MOTION")) return 47;
    if (!strcmp(tFileName, "M177001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M177001013.MOTION")) return 35;
    if (!strcmp(tFileName, "M177001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M178001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M178001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M178001004.MOTION")) return 51;
    if (!strcmp(tFileName, "M178001005.MOTION")) return 31;
    if (!strcmp(tFileName, "M178001006.MOTION")) return 61;
    if (!strcmp(tFileName, "M178001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M178001013.MOTION")) return 65;
    if (!strcmp(tFileName, "M178001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M179001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M179001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M179001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M179001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M179001006.MOTION")) return 31;
    if (!strcmp(tFileName, "M179001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M179001013.MOTION")) return 43;
    if (!strcmp(tFileName, "M179001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M180001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M180001002.MOTION")) return 51;
    if (!strcmp(tFileName, "M180001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M180001005.MOTION")) return 41;
    if (!strcmp(tFileName, "M180001006.MOTION")) return 40;
    if (!strcmp(tFileName, "M180001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M180001013.MOTION")) return 41;
    if (!strcmp(tFileName, "M180001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M181001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M181001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M181001004.MOTION")) return 51;
    if (!strcmp(tFileName, "M181001005.MOTION")) return 26;
    if (!strcmp(tFileName, "M181001006.MOTION")) return 55;
    if (!strcmp(tFileName, "M181001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M181001013.MOTION")) return 45;
    if (!strcmp(tFileName, "M181001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M182001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M182001002.MOTION")) return 86;
    if (!strcmp(tFileName, "M182001004.MOTION")) return 45;
    if (!strcmp(tFileName, "M182001005.MOTION")) return 35;
    if (!strcmp(tFileName, "M182001006.MOTION")) return 70;
    if (!strcmp(tFileName, "M182001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M182001013.MOTION")) return 110;
    if (!strcmp(tFileName, "M182001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M183001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M183001002.MOTION")) return 78;
    if (!strcmp(tFileName, "M183001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M183001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M183001006.MOTION")) return 85;
    if (!strcmp(tFileName, "M183001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M183001013.MOTION")) return 100;
    if (!strcmp(tFileName, "M183001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M184001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M184001002.MOTION")) return 79;
    if (!strcmp(tFileName, "M184001004.MOTION")) return 26;
    if (!strcmp(tFileName, "M184001005.MOTION")) return 26;
    if (!strcmp(tFileName, "M184001006.MOTION")) return 18;
    if (!strcmp(tFileName, "M184001009.MOTION")) return 5;
    if (!strcmp(tFileName, "M184001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M184001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M185001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M185001002.MOTION")) return 81;
    if (!strcmp(tFileName, "M185001004.MOTION")) return 25;
    if (!strcmp(tFileName, "M185001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M185001006.MOTION")) return 18;
    if (!strcmp(tFileName, "M185001009.MOTION")) return 5;
    if (!strcmp(tFileName, "M185001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M185001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M186001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M186001002.MOTION")) return 81;
    if (!strcmp(tFileName, "M186001004.MOTION")) return 29;
    if (!strcmp(tFileName, "M186001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M186001006.MOTION")) return 18;
    if (!strcmp(tFileName, "M186001009.MOTION")) return 5;
    if (!strcmp(tFileName, "M186001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M186001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M187001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M187001002.MOTION")) return 79;
    if (!strcmp(tFileName, "M187001004.MOTION")) return 26;
    if (!strcmp(tFileName, "M187001005.MOTION")) return 26;
    if (!strcmp(tFileName, "M187001006.MOTION")) return 18;
    if (!strcmp(tFileName, "M187001009.MOTION")) return 5;
    if (!strcmp(tFileName, "M187001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M187001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M188001001.MOTION")) return 90;
    if (!strcmp(tFileName, "M188001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M188001004.MOTION")) return 45;
    if (!strcmp(tFileName, "M188001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M188001006.MOTION")) return 70;
    if (!strcmp(tFileName, "M188001008.MOTION")) return 81;
    if (!strcmp(tFileName, "M188001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M188001013.MOTION")) return 45;
    if (!strcmp(tFileName, "M188001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M189001001.MOTION")) return 90;
    if (!strcmp(tFileName, "M189001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M189001004.MOTION")) return 51;
    if (!strcmp(tFileName, "M189001005.MOTION")) return 31;
    if (!strcmp(tFileName, "M189001006.MOTION")) return 90;
    if (!strcmp(tFileName, "M189001008.MOTION")) return 75;
    if (!strcmp(tFileName, "M189001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M189001013.MOTION")) return 75;
    if (!strcmp(tFileName, "M189001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M190001001.MOTION")) return 90;
    if (!strcmp(tFileName, "M190001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M190001004.MOTION")) return 45;
    if (!strcmp(tFileName, "M190001005.MOTION")) return 29;
    if (!strcmp(tFileName, "M190001006.MOTION")) return 70;
    if (!strcmp(tFileName, "M190001008.MOTION")) return 65;
    if (!strcmp(tFileName, "M190001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M190001013.MOTION")) return 57;
    if (!strcmp(tFileName, "M190001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M191001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M191001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M191001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M191001005.MOTION")) return 23;
    if (!strcmp(tFileName, "M191001006.MOTION")) return 52;
    if (!strcmp(tFileName, "M191001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M191001013.MOTION")) return 48;
    if (!strcmp(tFileName, "M191001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M192001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M192001002.MOTION")) return 136;
    if (!strcmp(tFileName, "M192001004.MOTION")) return 65;
    if (!strcmp(tFileName, "M192001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M192001006.MOTION")) return 34;
    if (!strcmp(tFileName, "M192001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M192001013.MOTION")) return 52;
    if (!strcmp(tFileName, "M192001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M194001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M194001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M194001004.MOTION")) return 32;
    if (!strcmp(tFileName, "M194001005.MOTION")) return 22;
    if (!strcmp(tFileName, "M194001006.MOTION")) return 41;
    if (!strcmp(tFileName, "M194001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M194001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M194001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M195001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M195001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M195001004.MOTION")) return 32;
    if (!strcmp(tFileName, "M195001005.MOTION")) return 22;
    if (!strcmp(tFileName, "M195001006.MOTION")) return 38;
    if (!strcmp(tFileName, "M195001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M195001013.MOTION")) return 78;
    if (!strcmp(tFileName, "M195001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M196001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M196001002.MOTION")) return 75;
    if (!strcmp(tFileName, "M196001004.MOTION")) return 60;
    if (!strcmp(tFileName, "M196001005.MOTION")) return 28;
    if (!strcmp(tFileName, "M196001006.MOTION")) return 76;
    if (!strcmp(tFileName, "M196001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M196001013.MOTION")) return 72;
    if (!strcmp(tFileName, "M196001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M197001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M197001002.MOTION")) return 78;
    if (!strcmp(tFileName, "M197001004.MOTION")) return 32;
    if (!strcmp(tFileName, "M197001005.MOTION")) return 22;
    if (!strcmp(tFileName, "M197001006.MOTION")) return 46;
    if (!strcmp(tFileName, "M197001009.MOTION")) return 15;
    if (!strcmp(tFileName, "M197001013.MOTION")) return 49;
    if (!strcmp(tFileName, "M197001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M198001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M198001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M198001004.MOTION")) return 32;
    if (!strcmp(tFileName, "M198001005.MOTION")) return 22;
    if (!strcmp(tFileName, "M198001006.MOTION")) return 50;
    if (!strcmp(tFileName, "M198001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M198001013.MOTION")) return 78;
    if (!strcmp(tFileName, "M198001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M199001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M199001002.MOTION")) return 78;
    if (!strcmp(tFileName, "M199001004.MOTION")) return 32;
    if (!strcmp(tFileName, "M199001005.MOTION")) return 22;
    if (!strcmp(tFileName, "M199001006.MOTION")) return 42;
    if (!strcmp(tFileName, "M199001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M199001013.MOTION")) return 49;
    if (!strcmp(tFileName, "M199001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M200001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M200001002.MOTION")) return 75;
    if (!strcmp(tFileName, "M200001004.MOTION")) return 60;
    if (!strcmp(tFileName, "M200001005.MOTION")) return 28;
    if (!strcmp(tFileName, "M200001006.MOTION")) return 76;
    if (!strcmp(tFileName, "M200001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M200001013.MOTION")) return 72;
    if (!strcmp(tFileName, "M200001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M201001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M201001002.MOTION")) return 44;
    if (!strcmp(tFileName, "M201001004.MOTION")) return 32;
    if (!strcmp(tFileName, "M201001005.MOTION")) return 22;
    if (!strcmp(tFileName, "M201001006.MOTION")) return 37;
    if (!strcmp(tFileName, "M201001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M201001013.MOTION")) return 78;
    if (!strcmp(tFileName, "M201001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M202001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M202001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M202001004.MOTION")) return 30;
    if (!strcmp(tFileName, "M202001005.MOTION")) return 15;
    if (!strcmp(tFileName, "M202001006.MOTION")) return 60;
    if (!strcmp(tFileName, "M202001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M202001013.MOTION")) return 70;
    if (!strcmp(tFileName, "M202001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M203001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M203001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M203001004.MOTION")) return 50;
    if (!strcmp(tFileName, "M203001005.MOTION")) return 26;
    if (!strcmp(tFileName, "M203001006.MOTION")) return 84;
    if (!strcmp(tFileName, "M203001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M203001013.MOTION")) return 70;
    if (!strcmp(tFileName, "M203001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M204001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M204001002.MOTION")) return 121;
    if (!strcmp(tFileName, "M204001004.MOTION")) return 80;
    if (!strcmp(tFileName, "M204001005.MOTION")) return 41;
    if (!strcmp(tFileName, "M204001006.MOTION")) return 76;
    if (!strcmp(tFileName, "M204001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M204001013.MOTION")) return 86;
    if (!strcmp(tFileName, "M204001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M205001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M205001002.MOTION")) return 99;
    if (!strcmp(tFileName, "M205001004.MOTION")) return 89;
    if (!strcmp(tFileName, "M205001005.MOTION")) return 69;
    if (!strcmp(tFileName, "M205001006.MOTION")) return 82;
    if (!strcmp(tFileName, "M205001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M205001013.MOTION")) return 111;
    if (!strcmp(tFileName, "M205001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M206001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M206001002.MOTION")) return 81;
    if (!strcmp(tFileName, "M206001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M206001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M206001006.MOTION")) return 70;
    if (!strcmp(tFileName, "M206001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M206001013.MOTION")) return 55;
    if (!strcmp(tFileName, "M206001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M207001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M207001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M207001004.MOTION")) return 30;
    if (!strcmp(tFileName, "M207001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M207001006.MOTION")) return 30;
    if (!strcmp(tFileName, "M207001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M207001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M207001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M208001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M208001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M208001004.MOTION")) return 40;
    if (!strcmp(tFileName, "M208001005.MOTION")) return 24;
    if (!strcmp(tFileName, "M208001006.MOTION")) return 35;
    if (!strcmp(tFileName, "M208001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M208001013.MOTION")) return 62;
    if (!strcmp(tFileName, "M208001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M209001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M209001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M209001004.MOTION")) return 30;
    if (!strcmp(tFileName, "M209001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M209001006.MOTION")) return 38;
    if (!strcmp(tFileName, "M209001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M209001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M209001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M210001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M210001002.MOTION")) return 49;
    if (!strcmp(tFileName, "M210001004.MOTION")) return 36;
    if (!strcmp(tFileName, "M210001005.MOTION")) return 20;
    if (!strcmp(tFileName, "M210001006.MOTION")) return 45;
    if (!strcmp(tFileName, "M210001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M210001013.MOTION")) return 61;
    if (!strcmp(tFileName, "M210001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M211001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M211001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M211001004.MOTION")) return 49;
    if (!strcmp(tFileName, "M211001005.MOTION")) return 33;
    if (!strcmp(tFileName, "M211001006.MOTION")) return 62;
    if (!strcmp(tFileName, "M211001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M211001013.MOTION")) return 56;
    if (!strcmp(tFileName, "M211001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M212001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M212001002.MOTION")) return 70;
    if (!strcmp(tFileName, "M212001004.MOTION")) return 43;
    if (!strcmp(tFileName, "M212001005.MOTION")) return 23;
    if (!strcmp(tFileName, "M212001006.MOTION")) return 70;
    if (!strcmp(tFileName, "M212001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M212001013.MOTION")) return 87;
    if (!strcmp(tFileName, "M212001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M213001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M213001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M213001004.MOTION")) return 24;
    if (!strcmp(tFileName, "M213001005.MOTION")) return 31;
    if (!strcmp(tFileName, "M213001006.MOTION")) return 32;
    if (!strcmp(tFileName, "M213001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M213001013.MOTION")) return 29;
    if (!strcmp(tFileName, "M213001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M214001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M214001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M214001004.MOTION")) return 42;
    if (!strcmp(tFileName, "M214001005.MOTION")) return 30;
    if (!strcmp(tFileName, "M214001006.MOTION")) return 35;
    if (!strcmp(tFileName, "M214001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M214001013.MOTION")) return 66;
    if (!strcmp(tFileName, "M214001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M215001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M215001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M215001004.MOTION")) return 42;
    if (!strcmp(tFileName, "M215001005.MOTION")) return 30;
    if (!strcmp(tFileName, "M215001006.MOTION")) return 35;
    if (!strcmp(tFileName, "M215001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M215001013.MOTION")) return 66;
    if (!strcmp(tFileName, "M215001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M216001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M216001002.MOTION")) return 80;
    if (!strcmp(tFileName, "M216001004.MOTION")) return 40;
    if (!strcmp(tFileName, "M216001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M216001006.MOTION")) return 56;
    if (!strcmp(tFileName, "M216001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M216001013.MOTION")) return 37;
    if (!strcmp(tFileName, "M216001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M217001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M217001002.MOTION")) return 66;
    if (!strcmp(tFileName, "M217001004.MOTION")) return 61;
    if (!strcmp(tFileName, "M217001005.MOTION")) return 34;
    if (!strcmp(tFileName, "M217001006.MOTION")) return 67;
    if (!strcmp(tFileName, "M217001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M217001013.MOTION")) return 93;
    if (!strcmp(tFileName, "M217001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M218001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M218001002.MOTION")) return 81;
    if (!strcmp(tFileName, "M218001004.MOTION")) return 51;
    if (!strcmp(tFileName, "M218001005.MOTION")) return 31;
    if (!strcmp(tFileName, "M218001006.MOTION")) return 46;
    if (!strcmp(tFileName, "M218001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M218001013.MOTION")) return 63;
    if (!strcmp(tFileName, "M218001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M219001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M219001002.MOTION")) return 70;
    if (!strcmp(tFileName, "M219001004.MOTION")) return 30;
    if (!strcmp(tFileName, "M219001005.MOTION")) return 24;
    if (!strcmp(tFileName, "M219001006.MOTION")) return 47;
    if (!strcmp(tFileName, "M219001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M219001013.MOTION")) return 71;
    if (!strcmp(tFileName, "M219001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M220001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M220001002.MOTION")) return 90;
    if (!strcmp(tFileName, "M220001004.MOTION")) return 49;
    if (!strcmp(tFileName, "M220001005.MOTION")) return 45;
    if (!strcmp(tFileName, "M220001006.MOTION")) return 40;
    if (!strcmp(tFileName, "M220001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M220001013.MOTION")) return 83;
    if (!strcmp(tFileName, "M220001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M221001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M221001002.MOTION")) return 69;
    if (!strcmp(tFileName, "M221001004.MOTION")) return 40;
    if (!strcmp(tFileName, "M221001005.MOTION")) return 28;
    if (!strcmp(tFileName, "M221001006.MOTION")) return 65;
    if (!strcmp(tFileName, "M221001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M221001013.MOTION")) return 97;
    if (!strcmp(tFileName, "M221001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M222001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M222001002.MOTION")) return 90;
    if (!strcmp(tFileName, "M222001004.MOTION")) return 50;
    if (!strcmp(tFileName, "M222001005.MOTION")) return 28;
    if (!strcmp(tFileName, "M222001006.MOTION")) return 65;
    if (!strcmp(tFileName, "M222001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M222001013.MOTION")) return 90;
    if (!strcmp(tFileName, "M222001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M223001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M223001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M223001004.MOTION")) return 60;
    if (!strcmp(tFileName, "M223001005.MOTION")) return 30;
    if (!strcmp(tFileName, "M223001006.MOTION")) return 61;
    if (!strcmp(tFileName, "M223001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M223001013.MOTION")) return 39;
    if (!strcmp(tFileName, "M223001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M224001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M224001002.MOTION")) return 69;
    if (!strcmp(tFileName, "M224001004.MOTION")) return 42;
    if (!strcmp(tFileName, "M224001005.MOTION")) return 32;
    if (!strcmp(tFileName, "M224001006.MOTION")) return 70;
    if (!strcmp(tFileName, "M224001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M224001013.MOTION")) return 147;
    if (!strcmp(tFileName, "M224001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M225001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M225001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M225001004.MOTION")) return 44;
    if (!strcmp(tFileName, "M225001005.MOTION")) return 28;
    if (!strcmp(tFileName, "M225001006.MOTION")) return 61;
    if (!strcmp(tFileName, "M225001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M225001013.MOTION")) return 57;
    if (!strcmp(tFileName, "M225001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M226001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M226001002.MOTION")) return 70;
    if (!strcmp(tFileName, "M226001004.MOTION")) return 36;
    if (!strcmp(tFileName, "M226001005.MOTION")) return 26;
    if (!strcmp(tFileName, "M226001006.MOTION")) return 31;
    if (!strcmp(tFileName, "M226001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M226001013.MOTION")) return 84;
    if (!strcmp(tFileName, "M226001020.MOTION")) return 71;
    if (!strcmp(tFileName, "M227001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M227001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M227001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M227001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M227001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M227001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M227001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M227001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M228001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M228001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M228001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M228001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M228001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M228001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M228001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M228001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M229001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M229001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M229001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M229001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M229001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M229001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M229001013.MOTION")) return 52;
    if (!strcmp(tFileName, "M229001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M230001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M230001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M230001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M230001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M230001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M230001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M230001013.MOTION")) return 53;
    if (!strcmp(tFileName, "M230001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M231001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M231001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M231001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M231001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M231001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M231001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M231001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M231001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M232001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M232001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M232001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M232001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M232001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M232001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M232001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M232001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M233001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M233001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M233001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M233001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M233001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M233001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M233001013.MOTION")) return 52;
    if (!strcmp(tFileName, "M233001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M234001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M234001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M234001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M234001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M234001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M234001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M234001013.MOTION")) return 53;
    if (!strcmp(tFileName, "M234001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M235001001.MOTION")) return 50;
    if (!strcmp(tFileName, "M235001002.MOTION")) return 50;
    if (!strcmp(tFileName, "M235001004.MOTION")) return 50;
    if (!strcmp(tFileName, "M235001005.MOTION")) return 50;
    if (!strcmp(tFileName, "M235001006.MOTION")) return 50;
    if (!strcmp(tFileName, "M235001009.MOTION")) return 50;
    if (!strcmp(tFileName, "M235001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M235001020.MOTION")) return 50;
    if (!strcmp(tFileName, "M236001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M236001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M236001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M236001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M236001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M236001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M236001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M236001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M237001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M237001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M237001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M237001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M237001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M237001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M237001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M237001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M238001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M238001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M238001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M238001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M238001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M238001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M238001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M238001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M239001001.MOTION")) return 72;
    if (!strcmp(tFileName, "M239001002.MOTION")) return 72;
    if (!strcmp(tFileName, "M239001004.MOTION")) return 49;
    if (!strcmp(tFileName, "M239001005.MOTION")) return 31;
    if (!strcmp(tFileName, "M239001006.MOTION")) return 68;
    if (!strcmp(tFileName, "M239001009.MOTION")) return 12;
    if (!strcmp(tFileName, "M239001013.MOTION")) return 72;
    if (!strcmp(tFileName, "M239001020.MOTION")) return 72;
    if (!strcmp(tFileName, "M240001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M240001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M240001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M240001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M240001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M240001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M240001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M240001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M241001001.MOTION")) return 60;
    if (!strcmp(tFileName, "M241001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M241001004.MOTION")) return 45;
    if (!strcmp(tFileName, "M241001005.MOTION")) return 35;
    if (!strcmp(tFileName, "M241001006.MOTION")) return 68;
    if (!strcmp(tFileName, "M241001009.MOTION")) return 14;
    if (!strcmp(tFileName, "M241001013.MOTION")) return 119;
    if (!strcmp(tFileName, "M241001020.MOTION")) return 60;
    if (!strcmp(tFileName, "M242001001.MOTION")) return 79;
    if (!strcmp(tFileName, "M242001002.MOTION")) return 188;
    if (!strcmp(tFileName, "M242001004.MOTION")) return 77;
    if (!strcmp(tFileName, "M242001005.MOTION")) return 33;
    if (!strcmp(tFileName, "M242001006.MOTION")) return 74;
    if (!strcmp(tFileName, "M242001009.MOTION")) return 20;
    if (!strcmp(tFileName, "M242001013.MOTION")) return 118;
    if (!strcmp(tFileName, "M242001020.MOTION")) return 81;
    if (!strcmp(tFileName, "M244001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M244001002.MOTION")) return 70;
    if (!strcmp(tFileName, "M244001004.MOTION")) return 30;
    if (!strcmp(tFileName, "M244001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M244001006.MOTION")) return 28;
    if (!strcmp(tFileName, "M244001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M244001013.MOTION")) return 46;
    if (!strcmp(tFileName, "M244001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M245001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M245001002.MOTION")) return 70;
    if (!strcmp(tFileName, "M245001004.MOTION")) return 30;
    if (!strcmp(tFileName, "M245001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M245001006.MOTION")) return 27;
    if (!strcmp(tFileName, "M245001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M245001013.MOTION")) return 46;
    if (!strcmp(tFileName, "M245001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M252001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M252001002.MOTION")) return 40;
    if (!strcmp(tFileName, "M252001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M252001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M252001006.MOTION")) return 40;
    if (!strcmp(tFileName, "M252001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M252001013.MOTION")) return 60;
    if (!strcmp(tFileName, "M252001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M254001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M254001002.MOTION")) return 59;
    if (!strcmp(tFileName, "M254001004.MOTION")) return 34;
    if (!strcmp(tFileName, "M254001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M254001006.MOTION")) return 60;
    if (!strcmp(tFileName, "M254001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M254001013.MOTION")) return 51;
    if (!strcmp(tFileName, "M254001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M258001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M258001002.MOTION")) return 81;
    if (!strcmp(tFileName, "M258001004.MOTION")) return 39;
    if (!strcmp(tFileName, "M258001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M258001006.MOTION")) return 41;
    if (!strcmp(tFileName, "M258001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M258001013.MOTION")) return 51;
    if (!strcmp(tFileName, "M258001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M260001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M260001002.MOTION")) return 40;
    if (!strcmp(tFileName, "M260001004.MOTION")) return 65;
    if (!strcmp(tFileName, "M260001005.MOTION")) return 40;
    if (!strcmp(tFileName, "M260001006.MOTION")) return 40;
    if (!strcmp(tFileName, "M260001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M260001013.MOTION")) return 51;
    if (!strcmp(tFileName, "M260001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M262001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M262001002.MOTION")) return 41;
    if (!strcmp(tFileName, "M262001004.MOTION")) return 36;
    if (!strcmp(tFileName, "M262001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M262001006.MOTION")) return 33;
    if (!strcmp(tFileName, "M262001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M262001013.MOTION")) return 43;
    if (!strcmp(tFileName, "M262001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M266001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M266001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M266001004.MOTION")) return 43;
    if (!strcmp(tFileName, "M266001005.MOTION")) return 53;
    if (!strcmp(tFileName, "M266001006.MOTION")) return 45;
    if (!strcmp(tFileName, "M266001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M266001013.MOTION")) return 55;
    if (!strcmp(tFileName, "M266001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M268001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M268001002.MOTION")) return 40;
    if (!strcmp(tFileName, "M268001004.MOTION")) return 36;
    if (!strcmp(tFileName, "M268001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M268001006.MOTION")) return 40;
    if (!strcmp(tFileName, "M268001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M268001013.MOTION")) return 42;
    if (!strcmp(tFileName, "M268001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M270001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M270001002.MOTION")) return 49;
    if (!strcmp(tFileName, "M270001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M270001005.MOTION")) return 22;
    if (!strcmp(tFileName, "M270001006.MOTION")) return 34;
    if (!strcmp(tFileName, "M270001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M270001013.MOTION")) return 35;
    if (!strcmp(tFileName, "M270001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M272001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M272001002.MOTION")) return 40;
    if (!strcmp(tFileName, "M272001004.MOTION")) return 65;
    if (!strcmp(tFileName, "M272001005.MOTION")) return 40;
    if (!strcmp(tFileName, "M272001006.MOTION")) return 40;
    if (!strcmp(tFileName, "M272001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M272001013.MOTION")) return 40;
    if (!strcmp(tFileName, "M272001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M276001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M276001002.MOTION")) return 39;
    if (!strcmp(tFileName, "M276001004.MOTION")) return 45;
    if (!strcmp(tFileName, "M276001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M276001006.MOTION")) return 68;
    if (!strcmp(tFileName, "M276001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M276001013.MOTION")) return 62;
    if (!strcmp(tFileName, "M276001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M277001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M277001002.MOTION")) return 69;
    if (!strcmp(tFileName, "M277001004.MOTION")) return 51;
    if (!strcmp(tFileName, "M277001005.MOTION")) return 41;
    if (!strcmp(tFileName, "M277001006.MOTION")) return 80;
    if (!strcmp(tFileName, "M277001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M277001013.MOTION")) return 113;
    if (!strcmp(tFileName, "M277001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M278001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M278001002.MOTION")) return 72;
    if (!strcmp(tFileName, "M278001004.MOTION")) return 61;
    if (!strcmp(tFileName, "M278001005.MOTION")) return 35;
    if (!strcmp(tFileName, "M278001006.MOTION")) return 78;
    if (!strcmp(tFileName, "M278001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M278001013.MOTION")) return 86;
    if (!strcmp(tFileName, "M278001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M279001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M279001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M279001004.MOTION")) return 41;
    if (!strcmp(tFileName, "M279001005.MOTION")) return 32;
    if (!strcmp(tFileName, "M279001006.MOTION")) return 73;
    if (!strcmp(tFileName, "M279001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M279001013.MOTION")) return 74;
    if (!strcmp(tFileName, "M279001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M280001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M280001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M280001004.MOTION")) return 65;
    if (!strcmp(tFileName, "M280001005.MOTION")) return 35;
    if (!strcmp(tFileName, "M280001006.MOTION")) return 90;
    if (!strcmp(tFileName, "M280001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M280001013.MOTION")) return 77;
    if (!strcmp(tFileName, "M280001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M281001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M281001002.MOTION")) return 100;
    if (!strcmp(tFileName, "M281001004.MOTION")) return 65;
    if (!strcmp(tFileName, "M281001005.MOTION")) return 45;
    if (!strcmp(tFileName, "M281001006.MOTION")) return 80;
    if (!strcmp(tFileName, "M281001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M281001013.MOTION")) return 100;
    if (!strcmp(tFileName, "M281001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M282001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M282001002.MOTION")) return 61;
    if (!strcmp(tFileName, "M282001004.MOTION")) return 31;
    if (!strcmp(tFileName, "M282001005.MOTION")) return 25;
    if (!strcmp(tFileName, "M282001006.MOTION")) return 47;
    if (!strcmp(tFileName, "M282001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M282001013.MOTION")) return 60;
    if (!strcmp(tFileName, "M282001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M283001001.MOTION")) return 1;
    if (!strcmp(tFileName, "M283001002.MOTION")) return 1;
    if (!strcmp(tFileName, "M283001004.MOTION")) return 1;
    if (!strcmp(tFileName, "M283001005.MOTION")) return 1;
    if (!strcmp(tFileName, "M283001006.MOTION")) return 1;
    if (!strcmp(tFileName, "M283001009.MOTION")) return 1;
    if (!strcmp(tFileName, "M283001013.MOTION")) return 66;
    if (!strcmp(tFileName, "M283001020.MOTION")) return 1;
    if (!strcmp(tFileName, "M284001001.MOTION")) return 60;
    if (!strcmp(tFileName, "M284001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M284001004.MOTION")) return 60;
    if (!strcmp(tFileName, "M284001005.MOTION")) return 60;
    if (!strcmp(tFileName, "M284001006.MOTION")) return 60;
    if (!strcmp(tFileName, "M284001009.MOTION")) return 60;
    if (!strcmp(tFileName, "M284001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M284001020.MOTION")) return 60;
    if (!strcmp(tFileName, "M285001001.MOTION")) return 60;
    if (!strcmp(tFileName, "M285001002.MOTION")) return 60;
    if (!strcmp(tFileName, "M285001004.MOTION")) return 60;
    if (!strcmp(tFileName, "M285001005.MOTION")) return 60;
    if (!strcmp(tFileName, "M285001006.MOTION")) return 60;
    if (!strcmp(tFileName, "M285001009.MOTION")) return 60;
    if (!strcmp(tFileName, "M285001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M285001020.MOTION")) return 60;
    if (!strcmp(tFileName, "M286001001.MOTION")) return 119;
    if (!strcmp(tFileName, "M286001002.MOTION")) return 119;
    if (!strcmp(tFileName, "M286001004.MOTION")) return 119;
    if (!strcmp(tFileName, "M286001005.MOTION")) return 119;
    if (!strcmp(tFileName, "M286001006.MOTION")) return 119;
    if (!strcmp(tFileName, "M286001009.MOTION")) return 119;
    if (!strcmp(tFileName, "M286001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M286001020.MOTION")) return 119;
    if (!strcmp(tFileName, "M287001001.MOTION")) return 30;
    if (!strcmp(tFileName, "M287001002.MOTION")) return 30;
    if (!strcmp(tFileName, "M287001004.MOTION")) return 30;
    if (!strcmp(tFileName, "M287001005.MOTION")) return 30;
    if (!strcmp(tFileName, "M287001006.MOTION")) return 30;
    if (!strcmp(tFileName, "M287001009.MOTION")) return 30;
    if (!strcmp(tFileName, "M287001013.MOTION")) return 50;
    if (!strcmp(tFileName, "M287001020.MOTION")) return 30;
    if (!strcmp(tFileName, "M288001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M288001002.MOTION")) return 50;
    if (!strcmp(tFileName, "M288001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M288001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M288001006.MOTION")) return 29;
    if (!strcmp(tFileName, "M288001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M288001013.MOTION")) return 35;
    if (!strcmp(tFileName, "M288001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M289001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M289001002.MOTION")) return 50;
    if (!strcmp(tFileName, "M289001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M289001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M289001006.MOTION")) return 29;
    if (!strcmp(tFileName, "M289001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M289001013.MOTION")) return 35;
    if (!strcmp(tFileName, "M289001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M290001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M290001002.MOTION")) return 50;
    if (!strcmp(tFileName, "M290001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M290001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M290001006.MOTION")) return 29;
    if (!strcmp(tFileName, "M290001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M290001013.MOTION")) return 35;
    if (!strcmp(tFileName, "M290001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M291001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M291001002.MOTION")) return 50;
    if (!strcmp(tFileName, "M291001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M291001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M291001006.MOTION")) return 29;
    if (!strcmp(tFileName, "M291001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M291001013.MOTION")) return 35;
    if (!strcmp(tFileName, "M291001020.MOTION")) return 61;
    if (!strcmp(tFileName, "M292001001.MOTION")) return 100;
    if (!strcmp(tFileName, "M292001002.MOTION")) return 50;
    if (!strcmp(tFileName, "M292001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M292001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M292001006.MOTION")) return 29;
    if (!strcmp(tFileName, "M292001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M292001013.MOTION")) return 42;
    if (!strcmp(tFileName, "M292001020.MOTION")) return 100;
    if (!strcmp(tFileName, "M293001001.MOTION")) return 100;
    if (!strcmp(tFileName, "M293001002.MOTION")) return 50;
    if (!strcmp(tFileName, "M293001004.MOTION")) return 30;
    if (!strcmp(tFileName, "M293001005.MOTION")) return 17;
    if (!strcmp(tFileName, "M293001006.MOTION")) return 26;
    if (!strcmp(tFileName, "M293001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M293001013.MOTION")) return 33;
    if (!strcmp(tFileName, "M293001020.MOTION")) return 100;
    if (!strcmp(tFileName, "M294001001.MOTION")) return 100;
    if (!strcmp(tFileName, "M294001002.MOTION")) return 50;
    if (!strcmp(tFileName, "M294001004.MOTION")) return 30;
    if (!strcmp(tFileName, "M294001005.MOTION")) return 17;
    if (!strcmp(tFileName, "M294001006.MOTION")) return 26;
    if (!strcmp(tFileName, "M294001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M294001013.MOTION")) return 33;
    if (!strcmp(tFileName, "M294001020.MOTION")) return 100;
    if (!strcmp(tFileName, "M295001001.MOTION")) return 100;
    if (!strcmp(tFileName, "M295001002.MOTION")) return 50;
    if (!strcmp(tFileName, "M295001004.MOTION")) return 30;
    if (!strcmp(tFileName, "M295001005.MOTION")) return 17;
    if (!strcmp(tFileName, "M295001006.MOTION")) return 26;
    if (!strcmp(tFileName, "M295001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M295001013.MOTION")) return 33;
    if (!strcmp(tFileName, "M295001020.MOTION")) return 100;
    if (!strcmp(tFileName, "M296001001.MOTION")) return 60;
    if (!strcmp(tFileName, "M296001002.MOTION")) return 50;
    if (!strcmp(tFileName, "M296001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M296001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M296001006.MOTION")) return 21;
    if (!strcmp(tFileName, "M296001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M296001013.MOTION")) return 45;
    if (!strcmp(tFileName, "M296001020.MOTION")) return 60;
    if (!strcmp(tFileName, "M297001001.MOTION")) return 60;
    if (!strcmp(tFileName, "M297001002.MOTION")) return 50;
    if (!strcmp(tFileName, "M297001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M297001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M297001006.MOTION")) return 21;
    if (!strcmp(tFileName, "M297001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M297001013.MOTION")) return 45;
    if (!strcmp(tFileName, "M297001020.MOTION")) return 60;
    if (!strcmp(tFileName, "M298001001.MOTION")) return 60;
    if (!strcmp(tFileName, "M298001002.MOTION")) return 50;
    if (!strcmp(tFileName, "M298001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M298001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M298001006.MOTION")) return 21;
    if (!strcmp(tFileName, "M298001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M298001013.MOTION")) return 45;
    if (!strcmp(tFileName, "M298001020.MOTION")) return 60;
    if (!strcmp(tFileName, "M299001001.MOTION")) return 60;
    if (!strcmp(tFileName, "M299001002.MOTION")) return 50;
    if (!strcmp(tFileName, "M299001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M299001005.MOTION")) return 21;
    if (!strcmp(tFileName, "M299001006.MOTION")) return 21;
    if (!strcmp(tFileName, "M299001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M299001013.MOTION")) return 45;
    if (!strcmp(tFileName, "M299001020.MOTION")) return 60;
    if (!strcmp(tFileName, "M300001001.MOTION")) return 61;
    if (!strcmp(tFileName, "M300001002.MOTION")) return 73;
    if (!strcmp(tFileName, "M300001004.MOTION")) return 33;
    if (!strcmp(tFileName, "M300001005.MOTION")) return 26;
    if (!strcmp(tFileName, "M300001006.MOTION")) return 44;
    if (!strcmp(tFileName, "M300001009.MOTION")) return 10;
    if (!strcmp(tFileName, "M300001013.MOTION")) return 58;
    if (!strcmp(tFileName, "M300001020.MOTION")) return 61;

    return 0;
}
BOOL PLAY::CheckTrap( int tTribe )
{
    switch (tTribe)
    {
    case 0:
        switch (mPLAY.ReturnAlliance(tTribe))
        {
        case -1:
        case 0:
            if (mMYINFO.mPresentZoneNumber != 6 && mMYINFO.mPresentZoneNumber != 7 && mMYINFO.mPresentZoneNumber != 8 && mMYINFO.mPresentZoneNumber != 9 && mMYINFO.mPresentZoneNumber != 11 && mMYINFO.mPresentZoneNumber != 12 && mMYINFO.mPresentZoneNumber != 13 && mMYINFO.mPresentZoneNumber != 14 && mMYINFO.mPresentZoneNumber != 140 && mMYINFO.mPresentZoneNumber != 141 && mMYINFO.mPresentZoneNumber != 142 && mMYINFO.mPresentZoneNumber != 143)
            {
                return FALSE;
            }
            return TRUE; 
            
        case 1:
            if (mMYINFO.mPresentZoneNumber != 11 && mMYINFO.mPresentZoneNumber != 12 && mMYINFO.mPresentZoneNumber != 13 && mMYINFO.mPresentZoneNumber != 14 && mMYINFO.mPresentZoneNumber != 140 && mMYINFO.mPresentZoneNumber != 141 && mMYINFO.mPresentZoneNumber != 142 && mMYINFO.mPresentZoneNumber != 143)
            {
                return FALSE;
            }
            return TRUE;

        case 2:
            if (mMYINFO.mPresentZoneNumber != 6 && mMYINFO.mPresentZoneNumber != 7 && mMYINFO.mPresentZoneNumber != 8 && mMYINFO.mPresentZoneNumber != 9 && mMYINFO.mPresentZoneNumber != 140 && mMYINFO.mPresentZoneNumber != 141 && mMYINFO.mPresentZoneNumber != 142 && mMYINFO.mPresentZoneNumber != 143)
            {
                return FALSE;
            }
            return TRUE;

        case 3:
            if (mMYINFO.mPresentZoneNumber != 6 && mMYINFO.mPresentZoneNumber != 7 && mMYINFO.mPresentZoneNumber != 8 && mMYINFO.mPresentZoneNumber != 9 && mMYINFO.mPresentZoneNumber != 11 && mMYINFO.mPresentZoneNumber != 12 && mMYINFO.mPresentZoneNumber != 13 && mMYINFO.mPresentZoneNumber != 14)
            {
                return FALSE;
            }
            return TRUE;

        default:
            return FALSE;
        }
        break;

    case 1:
        switch (mPLAY.ReturnAlliance(tTribe))
        {
        case -1:
        case 1:
            if (mMYINFO.mPresentZoneNumber != 1 && mMYINFO.mPresentZoneNumber != 2 && mMYINFO.mPresentZoneNumber != 3 && mMYINFO.mPresentZoneNumber != 4 && mMYINFO.mPresentZoneNumber != 11 && mMYINFO.mPresentZoneNumber != 12 && mMYINFO.mPresentZoneNumber != 13 && mMYINFO.mPresentZoneNumber != 14 && mMYINFO.mPresentZoneNumber != 140 && mMYINFO.mPresentZoneNumber != 141 && mMYINFO.mPresentZoneNumber != 142 && mMYINFO.mPresentZoneNumber != 143)
            {
                return FALSE;
            }
            return TRUE;

        case 0:
            if (mMYINFO.mPresentZoneNumber != 11 && mMYINFO.mPresentZoneNumber != 12 && mMYINFO.mPresentZoneNumber != 13 && mMYINFO.mPresentZoneNumber != 14 && mMYINFO.mPresentZoneNumber != 140 && mMYINFO.mPresentZoneNumber != 141 && mMYINFO.mPresentZoneNumber != 142 && mMYINFO.mPresentZoneNumber != 143)
            {
                return FALSE;
            }
            return TRUE;

        case 2:
            if (mMYINFO.mPresentZoneNumber != 1 && mMYINFO.mPresentZoneNumber != 2 && mMYINFO.mPresentZoneNumber != 3 && mMYINFO.mPresentZoneNumber != 4 && mMYINFO.mPresentZoneNumber != 140 && mMYINFO.mPresentZoneNumber != 141 && mMYINFO.mPresentZoneNumber != 142 && mMYINFO.mPresentZoneNumber != 143)
            {
                return FALSE;
            }
            return TRUE;

        case 3:
            if (mMYINFO.mPresentZoneNumber != 1 && mMYINFO.mPresentZoneNumber != 2 && mMYINFO.mPresentZoneNumber != 3 && mMYINFO.mPresentZoneNumber != 4 && mMYINFO.mPresentZoneNumber != 11 && mMYINFO.mPresentZoneNumber != 12 && mMYINFO.mPresentZoneNumber != 13 && mMYINFO.mPresentZoneNumber != 14)
            {
                return FALSE;
            }
            return TRUE;

        default:
            return FALSE;
        }
        break;

    case 2:
        switch (mPLAY.ReturnAlliance(tTribe))
        {
        case -1:
        case 2:
            if (mMYINFO.mPresentZoneNumber != 1 && mMYINFO.mPresentZoneNumber != 2 && mMYINFO.mPresentZoneNumber != 3 && mMYINFO.mPresentZoneNumber != 4 && mMYINFO.mPresentZoneNumber != 6 && mMYINFO.mPresentZoneNumber != 7 && mMYINFO.mPresentZoneNumber != 8 && mMYINFO.mPresentZoneNumber != 9 && mMYINFO.mPresentZoneNumber != 140 && mMYINFO.mPresentZoneNumber != 141 && mMYINFO.mPresentZoneNumber != 142 && mMYINFO.mPresentZoneNumber != 143)
            {
                return FALSE;
            }
            return TRUE;

        case 0:
            if (mMYINFO.mPresentZoneNumber != 6 && mMYINFO.mPresentZoneNumber != 7 && mMYINFO.mPresentZoneNumber != 8 && mMYINFO.mPresentZoneNumber != 9 && mMYINFO.mPresentZoneNumber != 140 && mMYINFO.mPresentZoneNumber != 141 && mMYINFO.mPresentZoneNumber != 142 && mMYINFO.mPresentZoneNumber != 143)
            {
                return FALSE;
            }
            return TRUE;

        case 1:
            if (mMYINFO.mPresentZoneNumber != 1 && mMYINFO.mPresentZoneNumber != 2 && mMYINFO.mPresentZoneNumber != 3 && mMYINFO.mPresentZoneNumber != 4 && mMYINFO.mPresentZoneNumber != 140 && mMYINFO.mPresentZoneNumber != 141 && mMYINFO.mPresentZoneNumber != 142 && mMYINFO.mPresentZoneNumber != 143)
            {
                return FALSE;
            }
            return TRUE;

        case 3:
            if (mMYINFO.mPresentZoneNumber != 1 && mMYINFO.mPresentZoneNumber != 2 && mMYINFO.mPresentZoneNumber != 3 && mMYINFO.mPresentZoneNumber != 4 && mMYINFO.mPresentZoneNumber != 6 && mMYINFO.mPresentZoneNumber != 7 && mMYINFO.mPresentZoneNumber != 8 && mMYINFO.mPresentZoneNumber != 9)
            {
                return FALSE;
            }
            return TRUE;

        default:
            return FALSE;
        }
        break;

    case 3:
        switch (mPLAY.ReturnAlliance(tTribe))
        {
        case -1:
        case 3:
            if (mMYINFO.mPresentZoneNumber != 1&& mMYINFO.mPresentZoneNumber != 2 && mMYINFO.mPresentZoneNumber != 3  && mMYINFO.mPresentZoneNumber != 4 && mMYINFO.mPresentZoneNumber != 6 && mMYINFO.mPresentZoneNumber != 7 && mMYINFO.mPresentZoneNumber != 8 && mMYINFO.mPresentZoneNumber != 9 && mMYINFO.mPresentZoneNumber != 11 && mMYINFO.mPresentZoneNumber != 12 && mMYINFO.mPresentZoneNumber != 13 && mMYINFO.mPresentZoneNumber != 14)
            {
                return FALSE;
            }
            return TRUE;

        case 0:
            if (mMYINFO.mPresentZoneNumber != 6 && mMYINFO.mPresentZoneNumber != 7 && mMYINFO.mPresentZoneNumber != 8 && mMYINFO.mPresentZoneNumber != 9 && mMYINFO.mPresentZoneNumber != 11 && mMYINFO.mPresentZoneNumber != 12 && mMYINFO.mPresentZoneNumber != 13 && mMYINFO.mPresentZoneNumber != 14)
            {
                return FALSE;
            }
            return TRUE;

        case 1:
            if (mMYINFO.mPresentZoneNumber != 1 && mMYINFO.mPresentZoneNumber != 2 && mMYINFO.mPresentZoneNumber != 3 && mMYINFO.mPresentZoneNumber != 4 && mMYINFO.mPresentZoneNumber != 11 && mMYINFO.mPresentZoneNumber != 12 && mMYINFO.mPresentZoneNumber != 13 && mMYINFO.mPresentZoneNumber != 14)
            {
                return FALSE;
            }
            return TRUE;

        case 2:
            if (mMYINFO.mPresentZoneNumber != 1 && mMYINFO.mPresentZoneNumber != 2 && mMYINFO.mPresentZoneNumber != 3 && mMYINFO.mPresentZoneNumber != 4 && mMYINFO.mPresentZoneNumber != 6 && mMYINFO.mPresentZoneNumber != 7 && mMYINFO.mPresentZoneNumber != 8 && mMYINFO.mPresentZoneNumber != 9)
            {
                return FALSE;
            }
            return TRUE;

        default:
            return FALSE;
        }

    default:
        return FALSE;
    }
}
BOOL PLAY::CheckTrapView(int tTribe)
{
    switch (tTribe)
    {
    case 0:
        if (mMYINFO.mPresentZoneNumber != 1 && mMYINFO.mPresentZoneNumber != 2 && mMYINFO.mPresentZoneNumber != 3 && mMYINFO.mPresentZoneNumber != 4 || !mPLAY.ReturnTribeRole(mMYINFO.mAvatarInfo.aName, tTribe))
        {
            return FALSE;
        }
        return TRUE;

    case 1:
        if (mMYINFO.mPresentZoneNumber != 6 && mMYINFO.mPresentZoneNumber != 7 && mMYINFO.mPresentZoneNumber != 8 && mMYINFO.mPresentZoneNumber != 9 || !mPLAY.ReturnTribeRole(mMYINFO.mAvatarInfo.aName, tTribe))
        {
            return FALSE;
        }
        return TRUE;

    case 2:
        if (mMYINFO.mPresentZoneNumber != 11 && mMYINFO.mPresentZoneNumber != 12 && mMYINFO.mPresentZoneNumber != 13 && mMYINFO.mPresentZoneNumber != 14 || !mPLAY.ReturnTribeRole(mMYINFO.mAvatarInfo.aName, tTribe))
        {
            return FALSE;
        }
        return TRUE;

    case 3:
        if (mMYINFO.mPresentZoneNumber != 140 && mMYINFO.mPresentZoneNumber != 141 && mMYINFO.mPresentZoneNumber != 142 && mMYINFO.mPresentZoneNumber != 143 || !mPLAY.ReturnTribeRole(mMYINFO.mAvatarInfo.aName, tTribe))
        {
            return FALSE;
        }
        return TRUE;
    }
}
int PLAY::ReturnSoundIndexFromHit(int mAttackActionValue2)
{
    int result;

    switch (mAttackActionValue2)
    {
    case 8:
        result = 1;
        break;
    case 9:
        result = 2;
        break;
    case 10:
        result = 3;
        break;
    case 12:
        result = 1;
        break;
    case 13:
        result = 2;
        break;
    case 14:
        result = 3;
        break;
    case 16:
        result = 1;
        break;
    case 17:
        result = 2;
        break;
    case 18:
        result = 3;
        break;
    case 27:
        result = 1;
        break;
    case 28:
        result = 2;
        break;
    case 29:
        result = 3;
        break;
    case 31:
        result = 1;
        break;
    case 32:
        result = 2;
        break;
    case 33:
        result = 3;
        break;
    case 35:
        result = 1;
        break;
    case 36:
        result = 2;
        break;
    case 37:
        result = 3;
        break;
    case 46:
        result = 1;
        break;
    case 47:
        result = 2;
        break;
    case 48:
        result = 3;
        break;
    case 50:
        result = 1;
        break;
    case 51:
        result = 2;
        break;
    case 52:
        result = 3;
        break;
    case 54:
        result = 1;
        break;
    case 55:
        result = 2;
        break;
    case 56:
        result = 3;
        break;
    case 58:
        result = 4;
        break;
    case 59:
        result = 5;
        break;
    case 60:
        result = 4;
        break;
    case 61:
        result = 5;
        break;
    case 62:
        result = 4;
        break;
    case 63:
        result = 5;
        break;
    case 64:
        result = 4;
        break;
    case 65:
        result = 5;
        break;
    case 66:
        result = 4;
        break;
    case 67:
        result = 5;
        break;
    case 68:
        result = 4;
        break;
    case 69:
        result = 5;
        break;
    case 70:
        result = 4;
        break;
    case 71:
        result = 5;
        break;
    case 72:
        result = 4;
        break;
    case 73:
        result = 5;
        break;
    case 74:
        result = 4;
        break;
    case 75:
        result = 5;
        break;
    case 85:
        result = 6;
        break;
    case 86:
        result = 7;
        break;
    case 87:
        result = 6;
        break;
    case 88:
        result = 7;
        break;
    case 89:
        result = 6;
        break;
    case 90:
        result = 7;
        break;
    case 91:
        result = 6;
        break;
    case 92:
        result = 7;
        break;
    case 93:
        result = 6;
        break;
    case 94:
        result = 7;
        break;
    case 95:
        result = 6;
        break;
    case 96:
        result = 7;
        break;
    case 97:
        result = 6;
        break;
    case 98:
        result = 7;
        break;
    case 99:
        result = 6;
        break;
    case 100:
        result = 7;
        break;
    case 101:
        result = 6;
        break;
    case 102:
        result = 7;
        break;
    case 112:
        result = 8;
        break;
    case 113:
        result = 8;
        break;
    case 114:
        result = 8;
        break;
    case 115:
        result = 8;
        break;
    case 116:
        result = 8;
        break;
    case 117:
        result = 8;
        break;
    case 118:
        result = 8;
        break;
    case 119:
        result = 8;
        break;
    case 120:
        result = 8;
        break;
    case 121:
        result = 10;
        break;
    case 122:
        result = 11;
        break;
    case 123:
        result = 10;
        break;
    case 124:
        result = 11;
        break;
    case 125:
        result = 10;
        break;
    case 126:
        result = 11;
        break;
    case 127:
        result = 10;
        break;
    case 128:
        result = 11;
        break;
    case 129:
        result = 10;
        break;
    case 130:
        result = 11;
        break;
    case 131:
        result = 10;
        break;
    case 132:
        result = 11;
        break;
    case 133:
        result = 10;
        break;
    case 134:
        result = 11;
        break;
    case 135:
        result = 10;
        break;
    case 136:
        result = 11;
        break;
    case 137:
        result = 10;
        break;
    case 138:
        result = 11;
        break;
    default:
        result = 0;
        break;
    }
    return result;
}
void PLAY::ClearHoisundoName( int tIndex )
{
    int m; 
    int i; 
    int k; 
    int n; 
    int j; 
    int l; 

    if (tIndex)
    {
        if (tIndex == 1)
        {
            for (i = 0; i < 4; ++i)
            {
                for (j = 0; j < 5; ++j)
                {
                    strcpy(mPLAY.mTribeInfo.mValleyOfDeceasedRegistrationMaster[i][j], "");
                }
            }
        }
        else if (tIndex == 2)
        {
            for (k = 0; k < 4; ++k)
            {
                for (l = 0; l < 5; ++l)
                {
                    strcpy(mPLAY.mTribeInfo.mValleyOfDeceasedRegistrationGod[k][l], "");
                }
            }
        }
    }
    else
    {
        for (m = 0; m < 4; ++m)
        {
            for (n = 0; n < 5; ++n)
            {
                strcpy(mPLAY.mTribeInfo.mValleyOfDeceasedRegistrationLevel[m][n], "");
            }
        }
    }
}
int PLAY::ReturnHoisundoReward(int tIndex)
{
    switch (tIndex)
    {
    case 0:
        return 50;
    case 1:
        return 150;
    case 2:
        return 300;
    }
    return 0;
}
void PLAY::DeleteFourGuildCostume()
{
    int i; 
    int j; 
    int v2[3];

    v2[0] = 376;
    v2[1] = 377;
    v2[2] = 378;
    for (i = 0; i < 10; ++i)
    {
        if (mMYINFO.mAvatarInfo.aCostume[i] == v2[mMYINFO.mAvatarInfo.aPreviousTribe])
        {
            mMYINFO.mAvatarInfo.aCostume[i] = 0;
            mMYINFO.mAvatarInfo.aTimedCostumeInventory[i] = 0;
            mMYINFO.mAvatarInfo.aLegendaryCostume[i] = 0;
            mMYINFO.mAvatarInfo.aCostumeIndex = -1;
            mPLAY.mAVATAR_OBJECT[0].mDATA.aFashionNumber = 0;
            for (j = i; j < 9; ++j)
            {
                mMYINFO.mAvatarInfo.aCostume[j] = mMYINFO.mAvatarInfo.aCostume[j + 1];
                mMYINFO.mAvatarInfo.aTimedCostumeInventory[j] = mMYINFO.mAvatarInfo.aTimedCostumeInventory[j + 1];
                mMYINFO.mAvatarInfo.aLegendaryCostume[j] = mMYINFO.mAvatarInfo.aLegendaryCostume[j + 1];
            }
            return;
        }
    }
}








// Class of AVATAR_OBJECT

void AVATAR_OBJECT::Update( int mIndex, float dTime)
{
    float tFrame;
    int tSort;
    int tWeaponSort;
    int v25;
    int tSkillNumber;
    int tAnimalNumber;
    int i, j, k;
    int mCheckValidAction;

    if (mCheckValidState)
    {
        if (mMYINFO.mAvatarInfo.aFuryState == 1 && !mIndex)
        {
            mFuryEffectDuration = mFuryEffectDuration - dTime;
            if (mFuryEffectDuration < 0.0)
            {
                mFuryEffectDuration = 0.0;
            }
            mMYINFO.mAvatarInfo.aFuryEffectDuration = mFuryEffectDuration;
        }
        if (mHeroRankRemainTimeBeforeUpdate > 0.0)
        {
            mHeroRankRemainTimeBeforeUpdate = mHeroRankRemainTimeBeforeUpdate - dTime;
            if (mHeroRankRemainTimeBeforeUpdate < 0.0)
            {
                mHeroRankRemainTimeBeforeUpdate = 0.0;
            }
        }
        if (mCheckValidForAttack == 1)
        {
            v25 = 0;
            if (mCheckValidFrameForAction)
            {
                if (tAttackType == 1)
                {
                    if (mDATA.aAnimalAbsorbState)
                    {
                        tFrame = mDATA.aAction.aFrame;
                        tSort = mDATA.aAction.aSort - 5;
                        tWeaponSort = mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
                        if (!mPLAY.CheckGAttackFrame(mDATA.aPreviousTribe, tWeaponSort, tSort, tFrame, &tSkillNumber, 0))
                        {
                            mCheckValidFrameForAction = 0;
                        }
                    }
                    else
                    {
                        tAnimalNumber = mDATA.aAnimalNumber;
                        tFrame = mDATA.aAction.aFrame;
                        tSort = mDATA.aAction.aSort - 5;
                        tWeaponSort = mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
                        if (!mPLAY.CheckGAttackFrame( mDATA.aPreviousTribe, tWeaponSort, tSort, tFrame, &tSkillNumber, tAnimalNumber))
                        {
                            mCheckValidFrameForAction = 0;
                        }
                    }
                }
                else
                {
                    tWeaponSort = mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
                    if (!mPLAY.CheckSAttackFrame(mDATA.aAction.aSkillNumber, mDATA.aAction.aFrame, tWeaponSort))
                    {
                        mCheckValidFrameForAction = 0;
                    }
                }
            }
            else if (tAttackType == 1)
            {
                if (mDATA.aAnimalAbsorbState)
                {
                    tFrame = mDATA.aAction.aFrame;
                    tSort = mDATA.aAction.aSort - 5;
                    tWeaponSort = mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
                    if (mPLAY.CheckGAttackFrame( mDATA.aPreviousTribe, tWeaponSort, tSort, tFrame, &tSkillNumber, 0))
                    {
                        mCheckValidFrameForAction = 1;
                        v25 = 1;
                    }
                }
                else
                {
                    tAnimalNumber = mDATA.aAnimalNumber;
                    tFrame = mDATA.aAction.aFrame;
                    tSort = mDATA.aAction.aSort - 5;
                    tWeaponSort = mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
                    if (mPLAY.CheckGAttackFrame( mDATA.aPreviousTribe, tWeaponSort, tSort, tFrame, &tSkillNumber, tAnimalNumber))
                    {
                        mCheckValidFrameForAction = 1;
                        v25 = 1;
                    }
                }
            }
            else
            {
                tWeaponSort = mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
                if (mPLAY.CheckSAttackFrame(mDATA.aAction.aSkillNumber, mDATA.aAction.aFrame, tWeaponSort))
                {
                    mCheckValidFrameForAction = 1;
                    v25 = 1;
                }
            }
            if (v25 == 1)
            {
                mCheckValidAction = 0;
                switch (mDATA.aAction.aTargetObjectSort)
                {
                case 0:
                    mCheckValidAction = 1;
                    break;
                case 2:
                case 3:
                    for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || !mPLAY.mAVATAR_OBJECT[i].mDATA.aVisibleState || !mPLAY.CheckPossibleAvatarTarget(mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort) || mPLAY.mAVATAR_OBJECT[i].mIndex != mDATA.aAction.aTargetObjectIndex || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != mDATA.aAction.aTargetObjectUniqueNumber); ++i)
                    {
                        ;
                    }
                    if (i != mPLAY.MAX_AVATAR_OBJECT)
                    {
                        mCheckValidAction = 1;
                    }
                    break;
                case 5:
                    for (j = 0; j < mPLAY.MAX_MONSTER_OBJECT && (!mPLAY.mMONSTER_OBJECT[j].mCheckValidState || !mPLAY.CheckPossibleMonsterTarget(mPLAY.mMONSTER_OBJECT[j].mMONSTER.mAction.aSort) || mPLAY.mMONSTER_OBJECT[j].mServerIndex != mDATA.aAction.aTargetObjectIndex || mPLAY.mMONSTER_OBJECT[j].mUniqueNumber != mDATA.aAction.aTargetObjectUniqueNumber); ++j)
                    {
                        ;
                    }
                    if (j != mPLAY.MAX_MONSTER_OBJECT)
                    {
                        mCheckValidAction = 1;
                    }
                    break;
                default:
                    break;
                }
                if (mCheckValidAction)
                {
                    if (tActionSort == 1)
                    {
                        if (tAttackSort == 1)
                        {
                            if (!mIndex)
                            {
                                if (tAttackType == 1)
                                {
                                    ProcessGAttackPacket(tSkillNumber);
                                }
                                else
                                {
                                    ProcessSAttackPacket();
                                }
                            }
                        }
                        else if (tAttackSort == 2 && !mIndex)
                        {
                            ProcessRAttackPacket();
                        }
                    }
                    else if (tActionSort == 2)
                    {
                        SetEffect(mIndex);
                    }
                }
            }
        }
        if (mGeneralChatState && mAPP[0].hPresentElapsedSeconds - mGeneralChatSendTime > 10.0)
        {
            mGeneralChatState = 0;
        }
        if (mLevelUpEffectState)
        {
            mLevelUpEffectStateUpdateTime = dTime * 30.0 + mLevelUpEffectStateUpdateTime;
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                if (mLevelUpEffectStateUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][2]))
                {
                    mLevelUpEffectState = 0;
                }
            }
            else if (mLevelUpEffectStateUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][2]))
            {
                {
                    mLevelUpEffectState = 0; 
                }
            }
        }
        if (mRebirthEffectState)
        {
            mRebirthEffectStateUpdateTime = dTime * 30.0 + mRebirthEffectStateUpdateTime;
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                if (mRebirthEffectStateUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[207]))
                {
                    mRebirthEffectState = 0;
                }
            }
            else if (mRebirthEffectStateUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[207]))
            {
                mRebirthEffectState = 0;
            }
        }
        if (mReflectDamageEffectState)
        {
            mReflectDamageEffectStateUpdateTime = dTime * 30.0 + mReflectDamageEffectStateUpdateTime;
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                if (mReflectDamageEffectStateUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][456]))
                {
                    mReflectDamageEffectState = 0;
                }
            }
            else if (mReflectDamageEffectStateUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][456]))
            {
                mReflectDamageEffectState = 0;
            }
        }
        if (mDestroyHeavenShieldState)
        {
            mDestroyHeavenShieldStateUpdateTime = dTime * 30.0 + mDestroyHeavenShieldStateUpdateTime;
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                if (mDestroyHeavenShieldStateUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][461]))
                {
                    mDestroyHeavenShieldState = 0;
                }
            }
            else if (mDestroyHeavenShieldStateUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][461]))
            {
                mDestroyHeavenShieldState = 0;
            }
        }
        if (mHealOtherPlayerSkillEffectState)
        {
            mHealOtherPlayerSkillEffectUpdateTime = dTime * 30.0 + mHealOtherPlayerSkillEffectUpdateTime;
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                if (mHealOtherPlayerSkillEffectUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][463]))
                {
                    mHealOtherPlayerSkillEffectState = 0;
                }
            }
            else if (mHealOtherPlayerSkillEffectUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][463]))
            {
                mHealOtherPlayerSkillEffectState = 0;
            }
        }
        if (mHealManaOtherPlayerSkillEffectState)
        {
            mHealManaOtherPlayerSkillEffectUpdateTime = dTime * 30.0 + mHealManaOtherPlayerSkillEffectUpdateTime;
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
            {
                if (mHealManaOtherPlayerSkillEffectUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mSKILL_ATTACK_EFFECT[mDATA.aPreviousTribe][mDATA.aGender][465]))
                {
                    mHealManaOtherPlayerSkillEffectState = 0;
                }
            }
            else if (mHealManaOtherPlayerSkillEffectUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[mDATA.aPreviousTribe][mDATA.aGender][465]))
            {
                mHealManaOtherPlayerSkillEffectState = 0;
            }
        }
        if (mDamageUpForGarudaEffect)
        {
            mDamageUpForGarudaUpdateTime = dTime * 30.0 + mDamageUpForGarudaUpdateTime;
            if (mDamageUpForGarudaUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[195]))
            {
                mDamageUpForGarudaEffect = 0;
            }
        }
        if (mAtkRateBookForEffect == 1)
        {
            mAtkRateBookForEffectUpdateTime = dTime * 30.0 + mAtkRateBookForEffectUpdateTime;
            if (mAtkRateBookForEffectUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[219]))
            {
                mAtkRateBookForEffect = 0;
            }
        }
        if (mDodgeBookForEffect == 1)
        {
            mDodgeBookForEffectUpdateTime = dTime * 30.0 + mDodgeBookForEffectUpdateTime;
            if (mDodgeBookForEffectUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[219]))
            {
                mDodgeBookForEffect = 0;
            }
        }
        if (mPetGrowEffectState)
        {
            mPetGrowEffectStateUpdateTime = dTime * 30.0 + mPetGrowEffectStateUpdateTime;
            if (mPetGrowEffectStateUpdateTime >= GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[158]))
            {
                mPetGrowEffectState = 0;
            }
        }
        if (mDATA.aEquipForView[8][0] == 2160)
        {
            if (!mSantaPetEffectState)
            {
                mSantaPetEffectState = 1;
                for (k = 0; k < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[k].mCheckValidState; ++k)
                {
                    ;
                }
                if (k != mPLAY.MAX_EFFECT_OBJECT)
                {
                    //mPLAY.mEFFECT_OBJECT[k].SetSantaPetEffect( This);
                }
            }
        }
        else if (mSantaPetEffectState)
        {
            mSantaPetEffectState = 0;
        }
        if (mDATA.aArrow == 1)
        {
            mPinkArrowForGMEffect = dTime * 30.0 + mPinkArrowForGMEffect;
            if (mPinkArrowForGMEffect >= GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[106]))
            {
                mPinkArrowForGMEffect = 0.0;
            }
        }
        if (mDATA.aAction.aTargetFront >= mDATA.aAction.aFront)
        {
            if (mDATA.aAction.aTargetFront > mDATA.aAction.aFront)
            {
                if (mDATA.aAction.aFront + 360.0 - mDATA.aAction.aTargetFront <= (float)mDATA.aAction.aTargetFront - mDATA.aAction.aFront)
                {
                    mDATA.aAction.aFront = mDATA.aAction.aFront - dTime * 540.0;
                    if (mDATA.aAction.aFront < 0.0)
                    {
                        mDATA.aAction.aFront = mDATA.aAction.aFront + 360.0;
                        if (mDATA.aAction.aTargetFront > mDATA.aAction.aFront)
                        {
                            mDATA.aAction.aFront = mDATA.aAction.aTargetFront;
                        }
                    }
                }
                else
                {
                    mDATA.aAction.aFront = dTime * 540.0 + mDATA.aAction.aFront;
                    if (mDATA.aAction.aTargetFront < mDATA.aAction.aFront)
                    {
                        mDATA.aAction.aFront = mDATA.aAction.aTargetFront;
                    }
                }
            }
        }
        else if (mDATA.aAction.aTargetFront + 360.0 - mDATA.aAction.aFront <= (float)mDATA.aAction.aFront - mDATA.aAction.aTargetFront)
        {
            mDATA.aAction.aFront = dTime * 540.0 + mDATA.aAction.aFront;
            if (mDATA.aAction.aFront >= 360.0)
            {
                mDATA.aAction.aFront = mDATA.aAction.aFront - 360.0;
                if (mDATA.aAction.aTargetFront < mDATA.aAction.aFront)
                {
                    mDATA.aAction.aFront = mDATA.aAction.aTargetFront;
                }
            }
        }
        else
        {
            mDATA.aAction.aFront = mDATA.aAction.aFront - dTime * 540.0;
            if (mDATA.aAction.aTargetFront > mDATA.aAction.aFront)
            {
                mDATA.aAction.aFront = mDATA.aAction.aTargetFront;
            }
        }
        if (mMYINFO.mAvatarInfo.aAutoHuntState == 1 && (mMYINFO.mAvatarInfo.aAutoHunt7Day > 0 || mMYINFO.mAvatarInfo.aAutoHunt5Hour > 0) && mIndex == mPLAY.mAVATAR_OBJECT[0].mIndex && (mDATA.aAction.aSort == 5 || mDATA.aAction.aSort == 6 || mDATA.aAction.aSort == 7))
        {
            mDATA.aAction.aSort = 1;
            mDATA.aAction.aFrame = 0.0;
        }
        //mMYINFO.CheckPossibleKeyboardAttackForProtect();
        switch (mDATA.aAction.aSort)
        {
        case 0:
            A000(mIndex, dTime);
            break;
        case 1:
            A001(mIndex, dTime);
            break;
        case 2:
            A002(mIndex, dTime);
            break;
        case 3:
            A003(mIndex, dTime);
            break;
        case 4:
            A004(mIndex, dTime);
            break;
        case 5:
            A005(mIndex, dTime);
            break;
        case 6:
            A006(mIndex, dTime);
            break;
        case 7:
            A007(mIndex, dTime);
            break;
        case 9:
            A009(mIndex, dTime);
            break;
        case 10:
            A010(mIndex, dTime);
            break;
        case 11:
            A011(mIndex, dTime);
            break;
        case 12:
            A012(mIndex, dTime);
            break;
        case 13:
            A013(mIndex, dTime);
            break;
        case 14:
            A014(mIndex, dTime);
            break;
        case 15:
            A015(mIndex, dTime);
            break;
        case 16:
            A016(mIndex, dTime);
            break;
        case 17:
            A017(mIndex, dTime);
            break;
        case 18:
            A018(mIndex, dTime);
            break;
        case 19:
            A019(mIndex, dTime);
            break;
        case 20:
            A020(mIndex, dTime);
            break;
        case 21:
            A021(mIndex, dTime);
            break;
        case 22:
            A022(mIndex, dTime);
            break;
        case 23:
            A023(mIndex, dTime);
            break;
        case 30:
            A030(mIndex, dTime);
            break;
        case 31:
            A031(mIndex, dTime);
            break;
        case 32:
            A032(mIndex, dTime);
            break;
        case 33:
            A033(mIndex, dTime);
            break;
        case 34:
            A034(mIndex, dTime);
            break;
        case 35:
            A035(mIndex, dTime);
            break;
        case 36:
            A036(mIndex, dTime);
            break;
        case 37:
            A037(mIndex, dTime);
            break;
        case 38:
            A038(mIndex, dTime);
            break;
        case 39:
            A039(mIndex, dTime);
            break;
        case 40:
            A040(mIndex, dTime);
            break;
        case 41:
            A041(mIndex, dTime);
            break;
        case 42:
            A042(mIndex, dTime);
            break;
        case 43:
            A043(mIndex, dTime);
            break;
        case 44:
            A044(mIndex, dTime);
            break;
        case 45:
            A045(mIndex, dTime);
            break;
        case 46:
            A046(mIndex, dTime);
            break;
        case 48:
            A048(mIndex, dTime);
            break;
        case 49:
            A049(mIndex, dTime);
            break;
        case 50:
            A050(mIndex, dTime);
            break;
        case 51:
            A051(mIndex, dTime);
            break;
        case 52:
            A052(mIndex, dTime);
            break;
        case 54:
            A054(mIndex, dTime);
            break;
        case 55:
            A055(mIndex, dTime);
            break;
        case 56:
            A056(mIndex, dTime);
            break;
        case 57:
            A057(mIndex, dTime);
            break;
        case 58:
            A058(mIndex, dTime);
            break;
        case 60:
            A060(mIndex, dTime);
            break;
        case 61:
            A061(mIndex, dTime);
            break;
        case 62:
            A062(mIndex, dTime);
            break;
        case 63:
            A063(mIndex, dTime);
            break;
        case 64:
            A064(mIndex, dTime);
            break;
        case 65:
            A065(mIndex, dTime);
            break;
        case 66:
            A066(mIndex, dTime);
            break;
        case 67:
            A067(mIndex, dTime);
            break;
        case 68:
            A068(mIndex, dTime);
            break;
        case 69:
            A069(mIndex, dTime);
            break;
        case 70:
            A070(mIndex, dTime);
            break;
        case 71:
            A071(mIndex, dTime);
            break;
        case 72:
            A072(mIndex, dTime);
            break;
        case 73:
            A073(mIndex, dTime);
            break;
        case 74:
            A074(mIndex, dTime);
            break;
        case 75:
            A075(mIndex, dTime);
            break;
        case 76:
            A076(mIndex, dTime);
            break;
        case 81:
            A081(mIndex, dTime);
            break;
        case 82:
            A082(mIndex, dTime);
            break;
        case 83:
            A083(mIndex, dTime);
            break;
        case 85:
            A085(mIndex, dTime);
            break;
        case 86:
            A086(mIndex, dTime);
            break;
        case 87:
            A087(mIndex, dTime);
            break;
        case 88:
            A088(mIndex, dTime);
            break;
        case 89:
            A089(mIndex, dTime);
            break;
        case 90:
            A090(mIndex, dTime);
            break;
        case 91:
            A091(mIndex, dTime);
            break;
        case 92:
            A092(mIndex, dTime);
            break;
        case 93:
            A093(mIndex, dTime);
            break;
        case 94:
            A094(mIndex, dTime);
            break;
        case 95:
            A095(mIndex, dTime);
            break;
        default:
            break;
        }
        if (mMYINFO.bIsUseContinueSkill && !mIndex && mDATA.aAction.aSort == 1)
        {
            mMYINFO.bIsUseContinueSkill = 0;
            mTRANSFER.T_CONTINUE_SKILL_USE_SEND(2);
        }
    }
}


void AVATAR_OBJECT::Init()
{
    mCheckValidState = 0;
    mPinkArrowForGMEffect = 0.0f;
    mFuryEffectDuration = 0.0f;
    mHeroRankRemainTimeBeforeUpdate = 0.0f;
}

void AVATAR_OBJECT::Free()
{
    mCheckValidState = FALSE;
}

void AVATAR_OBJECT::InitForCreate( int mIndex)
{
    int index01;

    if (mCheckValidState)
    {
        mCheckValidForAttack = 0;
        b = 0;
        mGeneralChatState = 0;
        mLevelUpEffectState = 0;
        mRebirthEffectState = 0;
        mReflectDamageEffectState = 0;
        mDestroyHeavenShieldState = 0;
        mHealOtherPlayerSkillEffectState = 0;
        mHealManaOtherPlayerSkillEffectUpdateTime = 0.0;
        mDamageUpForGarudaEffect = 0;
        mPetGrowEffectState = 0;
        mSantaPetEffectState = 0;
        for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
        {
            ;
        }
        if (index01 < mPLAY.MAX_EFFECT_OBJECT)
        {
            mPLAY.mEFFECT_OBJECT[index01].SetLevelEffectForLeftEye(this);
        }
        for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
        {
            ;
        }
        if (index01 < mPLAY.MAX_EFFECT_OBJECT)
        {
            mPLAY.mEFFECT_OBJECT[index01].SetLevelEffectForRightEye(this);
        }
        for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
        {
            ;
        }
        if (index01 < mPLAY.MAX_EFFECT_OBJECT)
        {
            mPLAY.mEFFECT_OBJECT[index01].SetLevelEffectForLeftHand(this);
        }
        for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
        {
            ;
        }
        if (index01 < mPLAY.MAX_EFFECT_OBJECT)
        {
            mPLAY.mEFFECT_OBJECT[index01].SetLevelEffectForRightHand(this);
        }
        if (mDATA.aAnimalAbsorbState == 1)
        {
            for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
            {
                ;
            }
            if (index01 < mPLAY.MAX_EFFECT_OBJECT)
            {
                mPLAY.mEFFECT_OBJECT[index01].SetAbsorbEffect_1(this);
            }
            for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
            {
                ;
            }
            if (index01 < mPLAY.MAX_EFFECT_OBJECT)
            {
                mPLAY.mEFFECT_OBJECT[index01].SetAbsorbEffect_2(this);
            }
            for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
            {
                ;
            }
            if (index01 < mPLAY.MAX_EFFECT_OBJECT)
            {
                mPLAY.mEFFECT_OBJECT[index01].SetAbsorbEffect_3(this);
            }
            for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
            {
                ;
            }
            if (index01 < mPLAY.MAX_EFFECT_OBJECT)
            {
                mPLAY.mEFFECT_OBJECT[index01].SetAbsorbEffect_4(this);
            }
            for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
            {
                ;
            }
            if (index01 < mPLAY.MAX_EFFECT_OBJECT)
            {
                mPLAY.mEFFECT_OBJECT[index01].SetAbsorbEffect_5(this);
            }
            for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
            {
                ;
            }
            if (index01 < mPLAY.MAX_EFFECT_OBJECT)
            {
                mPLAY.mEFFECT_OBJECT[index01].SetAbsorbEffect_6(this);
            }
        }
        else if (mDATA.aLevel2 >= 1)
        {
            for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
            {
                ;
            }
            if (index01 < mPLAY.MAX_EFFECT_OBJECT)
            {
                mPLAY.mEFFECT_OBJECT[index01].SetHighLevelEffect_1(this);
            }
            for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
            {
                ;
            }
            if (index01 < mPLAY.MAX_EFFECT_OBJECT)
            {
                mPLAY.mEFFECT_OBJECT[index01].SetHighLevelEffect_2(this);
            }
            for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
            {
                ;
            }
            if (index01 < mPLAY.MAX_EFFECT_OBJECT)
            {
                mPLAY.mEFFECT_OBJECT[index01].SetHighLevelEffect_3(this);
            }
            for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
            {
                ;
            }
            if (index01 < mPLAY.MAX_EFFECT_OBJECT)
            {
                mPLAY.mEFFECT_OBJECT[index01].SetHighLevelEffect_4(this);
            }
            for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
            {
                ;
            }
            if (index01 < mPLAY.MAX_EFFECT_OBJECT)
            {
                mPLAY.mEFFECT_OBJECT[index01].SetHighLevelEffect_5(this);
            }
            for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
            {
                ;
            }
            if (index01 < mPLAY.MAX_EFFECT_OBJECT)
            {
                mPLAY.mEFFECT_OBJECT[index01].SetHighLevelEffect_6(this);
            }
        }
    }
}

void AVATAR_OBJECT::InitForAction( int mIndex)
{
    int index01;
    int index02;
    int index03;

    if (mCheckValidState)
    {
        PlayActionSound(mIndex);
        mCheckValidForAttack = 0;
        mCheckDeath = 0;
        switch (mDATA.aAction.aSort)
        {
        case 5:
        case 6:
        case 7:
            mCheckValidForAttack = 1;
            tAttackType = 1;
            tActionSort = 1;
            tAttackSort = 1;
            mCheckValidFrameForAction = 0;
            break;
        case 12:
            mCheckDeath = 1;
            if (tAvatarAttackInfo.mAttackCriticalExist)
                mDeathTimeBeforeRespawn = 100.0f;
            else
                mDeathTimeBeforeRespawn = 50.0f;
            for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index01].mCheckValidState; ++index01)
            {
                ;
            }
            if (index01 != mPLAY.MAX_EFFECT_OBJECT)
            {
                mPLAY.mEFFECT_OBJECT[index01].SetBloodForAvatar(this, 2);
            }
            break;
        case 32:
            for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && (!mPLAY.mEFFECT_OBJECT[index01].mCheckValidState || mPLAY.mEFFECT_OBJECT[index01].mEffectIndex != 6 || mPLAY.mEFFECT_OBJECT[index01].mUserIndex != mIndex || mPLAY.mEFFECT_OBJECT[index01].mUniqueNumber != mUniqueNumber); ++index01)
            {
                ;
            }
            if (index01 >= mPLAY.MAX_EFFECT_OBJECT)
            {
                for (index02 = 0; index02 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index02].mCheckValidState; ++index02)
                {
                    ;
                }
                if (index02 != mPLAY.MAX_EFFECT_OBJECT)
                {
                    mPLAY.mEFFECT_OBJECT[index02].SetFastRunForAvatar(this);
                }
            }
            break;
        case 33:
            mEffectLocation[0] = mDATA.aAction.aLocation[0];
            mEffectLocation[1] = mDATA.aAction.aLocation[1];
            mEffectLocation[2] = mDATA.aAction.aLocation[2];
            for (index01 = 0; index01 < mPLAY.MAX_EFFECT_OBJECT && (!mPLAY.mEFFECT_OBJECT[index01].mCheckValidState || mPLAY.mEFFECT_OBJECT[index01].mEffectIndex != 7 || mPLAY.mEFFECT_OBJECT[index01].mUserIndex != mIndex || mPLAY.mEFFECT_OBJECT[index01].mUniqueNumber != mUniqueNumber); ++index01)
            {
                ;
            }
            if (index01 >= mPLAY.MAX_EFFECT_OBJECT)
            {
                for (index02 = 0; index02 < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[index02].mCheckValidState; ++index02)
                {
                    ;
                }
                if (index02 != mPLAY.MAX_EFFECT_OBJECT)
                {
                    mPLAY.mEFFECT_OBJECT[index02].SetJumpRunForAvatar(this);
                }
            }
            break;
        case 38:
        case 71:
        case 72:
        case 87:
        case 88:
            mCheckValidForAttack = 1;
            tAttackType = 2;
            tActionSort = 1;
            tAttackSort = 1;
            mCheckValidFrameForAction = 0;
            break;
        case 39:
        case 45:
        case 46:
        case 51:
        case 52:
            mCheckValidForAttack = 1;
            tAttackType = 2;
            tActionSort = 1;
            tAttackSort = 1;
            mCheckValidFrameForAction = 0;
            break;
        case 42:
        case 43:
        case 48:
        case 49:
        case 69:
        case 70:
        case 85:
        case 86:
            mCheckValidForAttack = 1;
            tAttackType = 2;
            tActionSort = 1;
            tAttackSort = 1;
            mCheckValidFrameForAction = 0;
            break;
        case 44:
        case 50:
        case 56:
        case 82:
        case 97:
            mCheckValidForAttack = 1;
            tAttackType = 2;
            tActionSort = 1;
            tAttackSort = 2;
            mCheckValidFrameForAction = 0;
            break;
        case 54:
        case 55:
            mCheckValidForAttack = 1;
            tAttackType = 2;
            tActionSort = 2;
            tAttackSort = 1;
            mCheckValidFrameForAction = 0;
            break;
        case 57:
        case 58:
        case 73:
        case 74:
        case 89:
        case 90:
            mCheckValidForAttack = 1;
            tAttackType = 2;
            tActionSort = 2;
            tAttackSort = 1;
            mCheckValidFrameForAction = 0;
            break;
        case 81:
        case 96:
            mCheckValidForAttack = 1;
            tAttackType = 2;
            tActionSort = 1;
            tAttackSort = 2;
            mCheckValidFrameForAction = 0;
            break;
        case 83:
        case 98:
            mCheckValidForAttack = 1;
            tAttackType = 2;
            tActionSort = 1;
            tAttackSort = 2;
            mCheckValidFrameForAction = 0;
            break;
        default:
            break;
        }
        if (!mIndex)
        {
            if (mDATA.aAction.aSort != 1 && mDATA.aAction.aSort != 2)
            {
                mMYINFO.mCheckSendActionPacket = 0;
            }
            switch (mDATA.aAction.aSort)
            {
            case 2:
                mMYINFO.mSkillRunPostTime1 = mAPP[0].hPresentElapsedSeconds;
                break;
            case 11:
                mMYINFO.mSelectObjSort = 0;
                mMYINFO.mSkillRunPostTime1 = mAPP[0].hPresentElapsedSeconds;
                break;
            case 12:
                mCHOICEUI.OffForDeath();
                mMBOXUI.Off();
                mCBOXUI.Off();
                mTRIBENOTICEUI.Off();
                mAUTOUI.Off();
                mFACTIONNOTICEUI.SetEditBox();
                mANIMALUI.Off();
                mBONUSUI.Off();
                mTRIBESKILL.Off();
                mTRADEUI.Off(1);
                mPSHOPUI.Set();
                mAVATARUI.Off();
                mNPCUI.Off();
                mUI.Off(1);
                mMYINFO.mSelectObjSort = 0;
                mMYINFO.mSkillRunPostTime1 = mAPP[0].hPresentElapsedSeconds;
                break;
            case 32:
                mMYINFO.mSkillRunPostTime1 = mAPP[0].hPresentElapsedSeconds;
                break;
            case 40:
                mMYINFO.mSkillRunPostTime1 = mAPP[0].hPresentElapsedSeconds;
                break;
            default:
                return;
            }
        }
    }
}

void AVATAR_OBJECT::ProcessGAttackPacket(int tSkillNumber)
{
    int v2; 
    ATTACK_FOR_PROTOCOL tAttackInfo;

    v2 = mDATA.aAction.aTargetObjectSort;
    switch (v2)
    {
    case 2:
        tAttackInfo.mCase = 1;
        break;
    case 3:
        tAttackInfo.mCase = 2;
        break;
    case 5:
        tAttackInfo.mCase = 3;
        break;
    }
    tAttackInfo.mServerIndex1 = mIndex;
    tAttackInfo.mUniqueNumber1 = mUniqueNumber;
    tAttackInfo.mServerIndex2 = mDATA.aAction.aTargetObjectIndex;
    tAttackInfo.mUniqueNumber2 = mDATA.aAction.aTargetObjectUniqueNumber;
    tAttackInfo.mSenderLocation[0] = mDATA.aAction.aLocation[0];
    tAttackInfo.mSenderLocation[1] = mDATA.aAction.aLocation[1];
    tAttackInfo.mSenderLocation[2] = mDATA.aAction.aLocation[2];
    tAttackInfo.mAttackActionValue1 = 1;
    tAttackInfo.mAttackActionValue2 = tSkillNumber;
    tAttackInfo.mAttackActionValue3 = 0;
    tAttackInfo.mAttackActionValue4 = mDATA.aAction.aSort;
    mTRANSFER.T_PROCESS_ATTACK_SEND(&tAttackInfo);
}
void AVATAR_OBJECT::ProcessSAttackPacket()
{
    int v1; 
    ATTACK_FOR_PROTOCOL tAttackInfo; 

    switch (mDATA.aAction.aSkillNumber)
    {
    case 4:
    case 23:
    case 42:
        tAttackInfo.mCase = 5;
        tAttackInfo.mServerIndex1 = mIndex;
        tAttackInfo.mUniqueNumber1 = mUniqueNumber;
        tAttackInfo.mServerIndex2 = mDATA.aAction.aTargetObjectIndex;
        tAttackInfo.mUniqueNumber2 = mDATA.aAction.aTargetObjectUniqueNumber;
        tAttackInfo.mSenderLocation[0] = mDATA.aAction.aLocation[0];
        tAttackInfo.mSenderLocation[1] = mDATA.aAction.aLocation[1];
        tAttackInfo.mSenderLocation[2] = mDATA.aAction.aLocation[2];
        tAttackInfo.mAttackActionValue1 = 2;
        tAttackInfo.mAttackActionValue2 = mDATA.aAction.aSkillNumber;
        tAttackInfo.mAttackActionValue3 = mDATA.aAction.aSkillGradeNum2 + mDATA.aAction.aSkillGradeNum1;
        tAttackInfo.mAttackActionValue4 = mDATA.aAction.aSort;
        mTRANSFER.T_PROCESS_ATTACK_SEND(&tAttackInfo);
        break;
    case 5:
    case 24:
    case 43:
        tAttackInfo.mCase = 6;
        tAttackInfo.mServerIndex1 = mIndex;
        tAttackInfo.mUniqueNumber1 = mUniqueNumber;
        tAttackInfo.mServerIndex2 = mDATA.aAction.aTargetObjectIndex;
        tAttackInfo.mUniqueNumber2 = mDATA.aAction.aTargetObjectUniqueNumber;
        tAttackInfo.mSenderLocation[0] = mDATA.aAction.aLocation[0];
        tAttackInfo.mSenderLocation[1] = mDATA.aAction.aLocation[1];
        tAttackInfo.mSenderLocation[2] = mDATA.aAction.aLocation[2];
        tAttackInfo.mAttackActionValue1 = 2;
        tAttackInfo.mAttackActionValue2 = mDATA.aAction.aSkillNumber;
        tAttackInfo.mAttackActionValue3 = mDATA.aAction.aSkillGradeNum2 + mDATA.aAction.aSkillGradeNum1;
        tAttackInfo.mAttackActionValue4 = mDATA.aAction.aSort;
        mTRANSFER.T_PROCESS_ATTACK_SEND(&tAttackInfo);
        break;
    default:
        v1 = mDATA.aAction.aTargetObjectSort;
        switch (v1)
        {
        case 2:
            tAttackInfo.mCase = 1;
            break;
        case 3:
            tAttackInfo.mCase = 2;
            break;
        case 5:
            tAttackInfo.mCase = 3;
            break;
        }
        tAttackInfo.mServerIndex1 = mIndex;
        tAttackInfo.mUniqueNumber1 = mUniqueNumber;
        tAttackInfo.mServerIndex2 = mDATA.aAction.aTargetObjectIndex;
        tAttackInfo.mUniqueNumber2 = mDATA.aAction.aTargetObjectUniqueNumber;
        tAttackInfo.mSenderLocation[0] = mDATA.aAction.aLocation[0];
        tAttackInfo.mSenderLocation[1] = mDATA.aAction.aLocation[1];
        tAttackInfo.mSenderLocation[2] = mDATA.aAction.aLocation[2];
        tAttackInfo.mAttackActionValue1 = 2;
        tAttackInfo.mAttackActionValue2 = mDATA.aAction.aSkillNumber;
        tAttackInfo.mAttackActionValue3 = mDATA.aAction.aSkillGradeNum2 + mDATA.aAction.aSkillGradeNum1;
        tAttackInfo.mAttackActionValue4 = mDATA.aAction.aSort;
        mTRANSFER.T_PROCESS_ATTACK_SEND(&tAttackInfo);
        break;
    }
}

void AVATAR_OBJECT::ProcessRAttackPacket()
{
    ATTACK_FOR_PROTOCOL tAttackInfo;
    int i;

    mMYINFO.mTotalTargetNum = 0;
    for (i = 1; i < mPLAY.MAX_AVATAR_OBJECT; ++i)
    {
        if (mPLAY.mAVATAR_OBJECT[i].mCheckValidState && mPLAY.mAVATAR_OBJECT[i].mDATA.aVisibleState && mPLAY.CheckPossibleAvatarTarget(mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort) && mPLAY.CheckRAttackRange( mDATA.aAction.aSkillNumber, mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, 4.5))
        {
            if (mPLAY.mAVATAR_OBJECT[0].mDATA.aDuelState[0] == 1 && mPLAY.mAVATAR_OBJECT[i].mDATA.aDuelState[0] == 1 && mPLAY.mAVATAR_OBJECT[0].mDATA.aDuelState[1] == mPLAY.mAVATAR_OBJECT[i].mDATA.aDuelState[1] && mPLAY.mAVATAR_OBJECT[0].mDATA.aDuelState[2] != mPLAY.mAVATAR_OBJECT[i].mDATA.aDuelState[2])
            {
                if (mMYINFO.mTotalTargetNum < 5)
                {
                    mMYINFO.mTargetSort[mMYINFO.mTotalTargetNum] = 1;
                    mMYINFO.mTargetSort[mMYINFO.mTotalTargetNum + 5] = 1;
                    mMYINFO.mTargetServerIndex[mMYINFO.mTotalTargetNum] = mPLAY.mAVATAR_OBJECT[i].mIndex;
                    mMYINFO.mTargetUniqueNumber[mMYINFO.mTotalTargetNum++] = mPLAY.mAVATAR_OBJECT[i].mUniqueNumber;
                }
            }
            else if (mPLAY.CheckPossibleTribeAttack(mPLAY.mAVATAR_OBJECT[i].mDATA.aTribe, mPLAY.mAVATAR_OBJECT[i].mDATA.aZone270TypeBattleTeam, mPLAY.mAVATAR_OBJECT[i].mDATA.aGuildName) && mMYINFO.mTotalTargetNum < 5)
            {
                mMYINFO.mTargetSort[mMYINFO.mTotalTargetNum] = 1;
                mMYINFO.mTargetSort[mMYINFO.mTotalTargetNum + 5] = 2;
                mMYINFO.mTargetServerIndex[mMYINFO.mTotalTargetNum] = mPLAY.mAVATAR_OBJECT[i].mIndex;
                mMYINFO.mTargetUniqueNumber[mMYINFO.mTotalTargetNum++] = mPLAY.mAVATAR_OBJECT[i].mUniqueNumber;
            }
        }
    }
    for (i = 0; i < mPLAY.MAX_MONSTER_OBJECT; ++i)
    {
        if (mPLAY.mMONSTER_OBJECT[i].mCheckValidState && mPLAY.CheckPossibleMonsterTarget(mPLAY.mMONSTER_OBJECT[i].mMONSTER.mAction.aSort) && mPLAY.CheckRAttackRange( mDATA.aAction.aSkillNumber, mDATA.aAction.aLocation, mPLAY.mMONSTER_OBJECT[i].mMONSTER.mAction.aLocation, mPLAY.mMONSTER_OBJECT[i].mAttackRadius) && mMYINFO.mTotalTargetNum < 5)
        {
            mMYINFO.mTargetSort[mMYINFO.mTotalTargetNum] = 2;
            mMYINFO.mTargetSort[mMYINFO.mTotalTargetNum + 5] = 3;
            mMYINFO.mTargetServerIndex[mMYINFO.mTotalTargetNum] = mPLAY.mMONSTER_OBJECT[i].mServerIndex;
            mMYINFO.mTargetUniqueNumber[mMYINFO.mTotalTargetNum++] = mPLAY.mMONSTER_OBJECT[i].mUniqueNumber;
        }
    }
    for (i = 0; i < mMYINFO.mTotalTargetNum; ++i)
    {
        tAttackInfo.mCase = mMYINFO.mTargetSort[i + 5];
        tAttackInfo.mServerIndex1 = mIndex;
        tAttackInfo.mUniqueNumber1 = mUniqueNumber;
        tAttackInfo.mServerIndex2 = mMYINFO.mTargetServerIndex[i];
        tAttackInfo.mUniqueNumber2 = mMYINFO.mTargetUniqueNumber[i];
        tAttackInfo.mSenderLocation[0] = mDATA.aAction.aLocation[0];
        tAttackInfo.mSenderLocation[1] = mDATA.aAction.aLocation[1];
        tAttackInfo.mSenderLocation[2] = mDATA.aAction.aLocation[2];
        tAttackInfo.mAttackActionValue1 = 2;
        tAttackInfo.mAttackActionValue2 = mDATA.aAction.aSkillNumber;
        tAttackInfo.mAttackActionValue3 = mDATA.aAction.aSkillGradeNum2 + mDATA.aAction.aSkillGradeNum1;
        tAttackInfo.mAttackActionValue4 = mDATA.aAction.aSort;
        mTRANSFER.T_PROCESS_ATTACK_SEND(&tAttackInfo);
    }
}
void AVATAR_OBJECT::ProcessRAttackPacketForPartySkill()
{
    float v2; 
    ATTACK_FOR_PROTOCOL tAttackInfo; 
    int v5; 
    int i; 

    v5 = 0;
    tAttackInfo.mCase = 5;
    tAttackInfo.mServerIndex1 = mIndex;
    tAttackInfo.mUniqueNumber1 = mUniqueNumber;
    tAttackInfo.mServerIndex2 = -1;
    tAttackInfo.mUniqueNumber2 = 0;
    tAttackInfo.mSenderLocation[0] = mDATA.aAction.aLocation[0];
    tAttackInfo.mSenderLocation[1] = mDATA.aAction.aLocation[1];
    tAttackInfo.mSenderLocation[2] = mDATA.aAction.aLocation[2];
    tAttackInfo.mAttackActionValue1 = 2;
    tAttackInfo.mAttackActionValue2 = mDATA.aAction.aSkillNumber;
    tAttackInfo.mAttackActionValue3 = mDATA.aAction.aSkillGradeNum2 + mDATA.aAction.aSkillGradeNum1;
    tAttackInfo.mAttackActionValue4 = mDATA.aAction.aSort;
    for (i = 1; ; ++i)
    {
        if (i >= mPLAY.MAX_AVATAR_OBJECT)
        {
            break;
        }
        if (mPLAY.mAVATAR_OBJECT[i].mCheckValidState)
        {
            if (mPLAY.mAVATAR_OBJECT[i].mDATA.aVisibleState)
            {
                if (mPLAY.CheckPossibleAvatarTarget(mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort))
                {
                    v2 = mUTIL.GetLengthXYZ(mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation);
                    if (mFACTOR.GetAttackRadius(mDATA.aAction.aSkillNumber) >= v2)
                    {
                        if (mPLAY.CheckPossibleTribeAttack( mPLAY.mAVATAR_OBJECT[i].mDATA.aTribe, mPLAY.mAVATAR_OBJECT[i].mDATA.aZone270TypeBattleTeam, mPLAY.mAVATAR_OBJECT[i].mDATA.aGuildName))
                        {
                            if (v5 < 10)
                            {
                                ++v5;
                                tAttackInfo.mServerIndex2 = mPLAY.mAVATAR_OBJECT[i].mIndex;
                                tAttackInfo.mUniqueNumber2 = mPLAY.mAVATAR_OBJECT[i].mUniqueNumber;
                                mTRANSFER.T_PROCESS_ATTACK_SEND(&tAttackInfo);
                            }
                        }
                    }
                }
            }
        }
    }
}
void AVATAR_OBJECT::ProcessBAttackPacketForPartySkill()
{
    int i; 
    int j; 

    if (mDATA.aAction.aTargetObjectSort == 3)
    {
        for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || !mPLAY.mAVATAR_OBJECT[i].mDATA.aVisibleState || mPLAY.mAVATAR_OBJECT[i].mIndex != mDATA.aAction.aTargetObjectIndex || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != mDATA.aAction.aTargetObjectUniqueNumber); ++i)
        {
            ;
        }
        if (i != mPLAY.MAX_AVATAR_OBJECT && mPLAY.CheckPossibleAvatarTarget(mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort) && mUTIL.GetLengthXYZ(mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation) <= 300.0)
        {
            for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
            {
                ;
            }
            if (j != mPLAY.MAX_EFFECT_OBJECT)
            {
                mPLAY.mEFFECT_OBJECT[j].mCheckValidState = 1;
                mPLAY.mEFFECT_OBJECT[j].mEffectIndex = 12;
                mPLAY.mEFFECT_OBJECT[j].mEffectState = 1;
                mPLAY.mEFFECT_OBJECT[j].mUserIndex = mIndex;
                mPLAY.mEFFECT_OBJECT[j].mUniqueNumber = mUniqueNumber;
                mPLAY.mEFFECT_OBJECT[j].mTargetObjType = 1;
                mPLAY.mEFFECT_OBJECT[j].mTargetObjIndex = mDATA.aAction.aTargetObjectIndex;
                mPLAY.mEFFECT_OBJECT[j].mTargetObjUniqueNumber = mDATA.aAction.aTargetObjectUniqueNumber;
                mPLAY.mEFFECT_OBJECT[j].aSort = 155;
                mPLAY.mEFFECT_OBJECT[j].mEffectFrame = 0.0;
                mPLAY.mEFFECT_OBJECT[j].tLocation1[0] = mDATA.aAction.aLocation[0];
                if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                    mPLAY.mEFFECT_OBJECT[j].tLocation1[1] = mDATA.aAction.aLocation[1] + 45.0;
                else
                    mPLAY.mEFFECT_OBJECT[j].tLocation1[1] = mDATA.aAction.aLocation[1] + 30.0;
                mPLAY.mEFFECT_OBJECT[j].tLocation1[2] = mDATA.aAction.aLocation[2];
                mPLAY.mEFFECT_OBJECT[j].tAngle1[0] = 0.0;
                mPLAY.mEFFECT_OBJECT[j].tAngle1[1] = mDATA.aAction.aFront;
                mPLAY.mEFFECT_OBJECT[j].tAngle1[2] = 0.0;
                mPLAY.mEFFECT_OBJECT[j].tLocation2[0] = mPLAY.mEFFECT_OBJECT[j].tLocation1[0];
                mPLAY.mEFFECT_OBJECT[j].tLocation2[1] = mPLAY.mEFFECT_OBJECT[j].tLocation1[1];
                mPLAY.mEFFECT_OBJECT[j].tLocation2[2] = mPLAY.mEFFECT_OBJECT[j].tLocation1[2];
                mPLAY.mEFFECT_OBJECT[j].mBulletInfo = 750.0;
                mPLAY.mEFFECT_OBJECT[j].tAttackInfo.mCase = 2;
                mPLAY.mEFFECT_OBJECT[j].tAttackInfo.mServerIndex1 = mIndex;
                mPLAY.mEFFECT_OBJECT[j].tAttackInfo.mUniqueNumber1 = mUniqueNumber;
                mPLAY.mEFFECT_OBJECT[j].tAttackInfo.mServerIndex2 = mDATA.aAction.aTargetObjectIndex;
                mPLAY.mEFFECT_OBJECT[j].tAttackInfo.mUniqueNumber2 = mDATA.aAction.aTargetObjectUniqueNumber;
                mPLAY.mEFFECT_OBJECT[j].tAttackInfo.mSenderLocation[0] = mDATA.aAction.aLocation[0];
                mPLAY.mEFFECT_OBJECT[j].tAttackInfo.mSenderLocation[1] = mDATA.aAction.aLocation[1];
                mPLAY.mEFFECT_OBJECT[j].tAttackInfo.mSenderLocation[2] = mDATA.aAction.aLocation[2];
                mPLAY.mEFFECT_OBJECT[j].tAttackInfo.mAttackActionValue1 = 2;
                mPLAY.mEFFECT_OBJECT[j].tAttackInfo.mAttackActionValue2 = mDATA.aAction.aSkillNumber;
                mPLAY.mEFFECT_OBJECT[j].tAttackInfo.mAttackActionValue3 = mDATA.aAction.aSkillGradeNum2
                    + mDATA.aAction.aSkillGradeNum1;
                mPLAY.mEFFECT_OBJECT[j].tAttackInfo.mAttackActionValue4 = mDATA.aAction.aSort;
            }
        }
    }
}
void AVATAR_OBJECT::SetEffect( int mIndex )
{
    int v2; 
    int v3; 
    int i; 

    for (i = 0; i < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[i].mCheckValidState; ++i)
    {
        ;
    }
    if (i != mPLAY.MAX_EFFECT_OBJECT)
    {
        mPLAY.mEFFECT_OBJECT[i].mCheckValidState = 1;
        mPLAY.mEFFECT_OBJECT[i].mEffectIndex = 1;
        mPLAY.mEFFECT_OBJECT[i].mEffectState = 1;
        mPLAY.mEFFECT_OBJECT[i].mUserIndex = mIndex;
        mPLAY.mEFFECT_OBJECT[i].mUniqueNumber = mUniqueNumber;
        v3 = mDATA.aAction.aTargetObjectSort;
        switch (v3)
        {
        case 2:
            mPLAY.mEFFECT_OBJECT[i].mTargetObjType = 1;
            break;
        case 3:
            mPLAY.mEFFECT_OBJECT[i].mTargetObjType = 1;
            break;
        case 5:
            mPLAY.mEFFECT_OBJECT[i].mTargetObjType = 2;
            break;
        default:
            mPLAY.mEFFECT_OBJECT[i].mCheckValidState = 0;
            return;
        }
        mPLAY.mEFFECT_OBJECT[i].mTargetObjIndex = mDATA.aAction.aTargetObjectIndex;
        mPLAY.mEFFECT_OBJECT[i].mTargetObjUniqueNumber = mDATA.aAction.aTargetObjectUniqueNumber;
        mPLAY.mEFFECT_OBJECT[i].tPreviousTribe = mDATA.aPreviousTribe;
        mPLAY.mEFFECT_OBJECT[i].tGender = mDATA.aGender;
        switch (mDATA.aAction.aSort)
        {
        case 54:
            mPLAY.mEFFECT_OBJECT[i].aSort = 155;
            goto LABEL_23;
        case 55:
            mPLAY.mEFFECT_OBJECT[i].aSort = 191;
            goto LABEL_23;
        case 57:
            mPLAY.mEFFECT_OBJECT[i].aSort = 239;
            goto LABEL_23;
        case 58:
            mPLAY.mEFFECT_OBJECT[i].aSort = 275;
            goto LABEL_23;
        case 73:
            mPLAY.mEFFECT_OBJECT[i].aSort = 383;
            goto LABEL_23;
        case 74:
            mPLAY.mEFFECT_OBJECT[i].aSort = 419;
            goto LABEL_23;
        case 89:
            mPLAY.mEFFECT_OBJECT[i].aSort = 483;
            goto LABEL_23;
        case 90:
            mPLAY.mEFFECT_OBJECT[i].aSort = 486;
        LABEL_23:
            mPLAY.mEFFECT_OBJECT[i].mEffectFrame = 0.0;
            mPLAY.mEFFECT_OBJECT[i].tLocation1[0] = mDATA.aAction.aLocation[0];
            if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
                mPLAY.mEFFECT_OBJECT[i].tLocation1[1] = mDATA.aAction.aLocation[1] + 30.0;
            else
                mPLAY.mEFFECT_OBJECT[i].tLocation1[1] = mDATA.aAction.aLocation[1] + 15.0;
            mPLAY.mEFFECT_OBJECT[i].tLocation1[2] = mDATA.aAction.aLocation[2];
            mPLAY.mEFFECT_OBJECT[i].tAngle1[0] = 0.0;
            mPLAY.mEFFECT_OBJECT[i].tAngle1[1] = mDATA.aAction.aFront;
            mPLAY.mEFFECT_OBJECT[i].tAngle1[2] = 0.0;
            mPLAY.mEFFECT_OBJECT[i].tLocation2[0] = mPLAY.mEFFECT_OBJECT[i].tLocation1[0];
            mPLAY.mEFFECT_OBJECT[i].tLocation2[1] = mPLAY.mEFFECT_OBJECT[i].tLocation1[1];
            mPLAY.mEFFECT_OBJECT[i].tLocation2[2] = mPLAY.mEFFECT_OBJECT[i].tLocation1[2];
            mPLAY.mEFFECT_OBJECT[i].mBulletInfo = 750.0;
            v2 = mDATA.aAction.aTargetObjectSort;
            switch (v2)
            {
            case 2:
                mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mCase = 1;
                break;
            case 3:
                mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mCase = 2;
                break;
            case 5:
                mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mCase = 3;
                break;
            default:
                mPLAY.mEFFECT_OBJECT[i].mCheckValidState = 0;
                return;
            }
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mServerIndex1 = mIndex;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mUniqueNumber1 = mUniqueNumber;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mServerIndex2 = mDATA.aAction.aTargetObjectIndex;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mUniqueNumber2 = mDATA.aAction.aTargetObjectUniqueNumber;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mSenderLocation[0] = mDATA.aAction.aLocation[0];
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mSenderLocation[1] = mDATA.aAction.aLocation[1];
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mSenderLocation[2] = mDATA.aAction.aLocation[2];
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mAttackActionValue1 = 2;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mAttackActionValue2 = mDATA.aAction.aSkillNumber;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mAttackActionValue3 = mDATA.aAction.aSkillGradeNum2 + mDATA.aAction.aSkillGradeNum1;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mAttackActionValue4 = mDATA.aAction.aSort;
            break;
        default:
            mPLAY.mEFFECT_OBJECT[i].mCheckValidState = 0;
            return;
        }
    }
}

void AVATAR_OBJECT::PlayActionSound( int mIndex)
{
    GSOUND* tSOUND;

    if (!mCheckValidState || !mDATA.aVisibleState)
    {
        return;
    }

    if (mDATA.aAction.aSort == 2)
    {
        if (mIndex)
        {
            return;
        }
        // On Mount/Mounted Action Sound
        if (mDATA.aAnimalNumber && !mDATA.aAnimalAbsorbState)
        {
            if (b)
            {
                if (mDATA.aAction.aFrame < 10.0 || mDATA.aAction.aFrame >= 12.0)
                {
                    b = 0;
                }
                return;
            }
            switch (mDATA.aAnimalNumber)
            {
            case 1301:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[353]);
                }
                break;

            case 1302:
            case 1305:
            case 1308:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[354]);
                }
                break;

            case 1303:
            case 1306:
            case 1309:
            case 1316:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[355]);
                }
                break;

            case 1304:
            case 6500:
            case 6501:
            case 6502:
            case 6503:
            case 6504:
            case 6505:
            case 6506:
            case 6507:
            case 6508:
            case 6509:
            case 1307:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[353]);
                }
                break;

            case 1313:
            case 1314:
            case 1315:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[371]);
                }
                break;

            case 1317:
            case 1318:
            case 1319:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[394]);
                }
                break;

            case 1320:
            case 1321:
            case 1322:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[395]);
                }
                break;

            case 1323:
            case 1324:
            case 1325:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[343]);
                }
                break;

            case 1326:
            case 1327:
            case 1328:
            case 1329:
            case 1330:
            case 1331:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[353]);
                }
                break;

            case 1332:
            case 1333:
            case 1334:
            case 1335:
            case 1336:
            case 1337:
            case 1338:
            case 1339:
            case 1340:
            case 1341:
            case 1342:
            case 1343:
            case 1344:
            case 1345:
            case 1346:
            case 1347:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[353]);
                }
                break;

            case 17045:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[354]);
                }
                break;

            case 17046:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[355]);
                }
                break;

            case 17047:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[371]);
                }
                break;

            case 17048:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[394]);
                }
                break;

            case 17049:
            case 17058:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[395]);
                }
                break;

            case 17050:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[343]);
                }
                break;

            case 17051:
            case 17059:
            case 17060:
            case 17061:
                if (mDATA.aAction.aFrame >= 10.0 && mDATA.aAction.aFrame < 12.0)
                {
                    b = 1;
                    GSOUND::Play(&mGDATA.mSOUND_5[353]);
                }
                break;

            default:
                break;
            }
            return;
        }
        // On Foot Action Sound
        if (b)
        {
            if (mDATA.aPreviousTribe == 0)
            {
                if (mDATA.aGender)
                {
                    if (mDATA.aAction.aFrame < 2.0f || mDATA.aAction.aFrame >= 13.0f)
                    {
                        if (mDATA.aAction.aFrame >= 15.0f && mDATA.aAction.aFrame <= 25.0f)
                        {
                            b = 0;
                        }
                    }
                    else
                    {
                        b = 0;
                    }
                }
                else if (mDATA.aAction.aFrame < 2.0f || mDATA.aAction.aFrame >= 13.0f)
                {
                    if (mDATA.aAction.aFrame >= 15.0f && mDATA.aAction.aFrame <= 25.0f)
                    {
                        b = 0;
                    }
                }
                else
                {
                    b = 0;
                }
            }
            else if (mDATA.aPreviousTribe == 1)
            {
                if (mDATA.aGender)
                {
                    if (mDATA.aAction.aFrame < 2.0f || mDATA.aAction.aFrame >= 12.0f)
                    {
                        if (mDATA.aAction.aFrame >= 14.0f && mDATA.aAction.aFrame <= 24.0f)
                        {
                            b = 0;
                        }
                    }
                    else
                    {
                        b = 0;
                    }
                }
                else if (mDATA.aAction.aFrame < 2.0f || mDATA.aAction.aFrame >= 12.0f)
                {
                    if (mDATA.aAction.aFrame >= 14.0f && mDATA.aAction.aFrame <= 24.0f)
                    {
                        b = 0;
                    }
                }
                else
                {
                    b = 0;
                }
            }
            else if (mDATA.aPreviousTribe == 2)
            {
                if (mDATA.aGender)
                {
                    if (mDATA.aAction.aFrame < 2.0f || mDATA.aAction.aFrame >= 13.0f)
                    {
                        if (mDATA.aAction.aFrame >= 15.0f && mDATA.aAction.aFrame <= 25.0f)
                        {
                            b = 0;
                        }
                    }
                    else
                    {
                        b = 0;
                    }
                }
                else if (mDATA.aAction.aFrame < 0.0f || mDATA.aAction.aFrame >= 7.0f)
                {
                    if (mDATA.aAction.aFrame < 9.0f || mDATA.aAction.aFrame >= 21.0f)
                    {
                        if (mDATA.aAction.aFrame >= 23.0f && mDATA.aAction.aFrame <= 28.0f)
                        {
                            b = 0;
                        }
                    }
                    else
                    {
                        b = 0;
                    }
                }
                else
                {
                    b = 0;
                }
            }
        }
        else
        {
            if (mDATA.aPreviousTribe == 0)
            {
                if (mDATA.aGender)
                {
                    if (mDATA.aAction.aFrame >= 0.0 && mDATA.aAction.aFrame < 2.0)
                    {
                        b = 1;
                        GSOUND::Play(&mGDATA.mSOUND_5[25]);
                    }
                    if (mDATA.aAction.aFrame >= 13.0 && mDATA.aAction.aFrame < 15.0)
                    {
                        b = 1;
                        GSOUND::Play(&mGDATA.mSOUND_5[25]);
                    }
                }
                else
                {
                    if (mDATA.aAction.aFrame >= 0.0 && mDATA.aAction.aFrame < 2.0)
                    {
                        b = 1;
                        GSOUND::Play(&mGDATA.mSOUND_5[25]);
                    }
                    if (mDATA.aAction.aFrame >= 13.0 && mDATA.aAction.aFrame < 15.0)
                    {
                        b = 1;
                        GSOUND::Play(&mGDATA.mSOUND_5[25]);
                    }
                }
            }
            else if (mDATA.aPreviousTribe == 1)
            {
                if (mDATA.aGender)
                {
                    if (mDATA.aAction.aFrame >= 0.0 && mDATA.aAction.aFrame < 2.0)
                    {
                        b = 1;
                        GSOUND::Play(&mGDATA.mSOUND_5[25]);
                    }
                    if (mDATA.aAction.aFrame >= 12.0 && mDATA.aAction.aFrame < 14.0)
                    {
                        b = 1;
                        GSOUND::Play(&mGDATA.mSOUND_5[25]);
                    }
                }
                else
                {
                    if (mDATA.aAction.aFrame >= 0.0 && mDATA.aAction.aFrame < 2.0)
                    {
                        b = 1;
                        GSOUND::Play(&mGDATA.mSOUND_5[25]);
                    }
                    if (mDATA.aAction.aFrame >= 12.0 && mDATA.aAction.aFrame < 14.0)
                    {
                        b = 1;
                        GSOUND::Play(&mGDATA.mSOUND_5[25]);
                    }
                }
            }
            else if (mDATA.aPreviousTribe == 2)
            {
                if (mDATA.aGender)
                {
                    if (mDATA.aAction.aFrame >= 0.0 && mDATA.aAction.aFrame < 2.0)
                    {
                        b = 1;
                        GSOUND::Play(&mGDATA.mSOUND_5[25]);
                    }
                    if (mDATA.aAction.aFrame >= 13.0 && mDATA.aAction.aFrame < 15.0)
                    {
                        b = 1;
                        GSOUND::Play(&mGDATA.mSOUND_5[25]);
                    }
                }
                else
                {
                    if (mDATA.aAction.aFrame >= 7.0F && mDATA.aAction.aFrame < 9.0F)
                    {
                        b = 1;
                        GSOUND::Play(&mGDATA.mSOUND_5[25]);
                    }
                    if (mDATA.aAction.aFrame >= 21.0 && mDATA.aAction.aFrame < 23.0)
                    {
                        b = 1;
                        GSOUND::Play(&mGDATA.mSOUND_5[25]);
                    }
                }
            }
        }
    }
    else
    {
        if (mIndex)
        {
            if (mDATA.aAnimalAbsorbState)
            {
                tSOUND = mGDATA.ReturnCharacterSound( mDATA.aPreviousTribe, mDATA.aGender, mDATA.aAction.aType, mDATA.aAction.aSort, mDATA.aLevel1, mDATA.aLevel2, 0);
            }
            else
            {
                tSOUND = mGDATA.ReturnCharacterSound( mDATA.aPreviousTribe, mDATA.aGender, mDATA.aAction.aType, mDATA.aAction.aSort, mDATA.aLevel1, mDATA.aLevel2, mDATA.aAnimalNumber);
            }
            GSOUND::Play(tSOUND, mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
        }
        else
        {
            if (mDATA.aAnimalAbsorbState)
            {
                tSOUND = mGDATA.ReturnCharacterSound( mDATA.aPreviousTribe, mDATA.aGender, mDATA.aAction.aType, mDATA.aAction.aSort, mDATA.aLevel1, mDATA.aLevel2, 0);
            }
            else
            {
                tSOUND = mGDATA.ReturnCharacterSound( mDATA.aPreviousTribe, mDATA.aGender, mDATA.aAction.aType, mDATA.aAction.aSort, mDATA.aLevel1, mDATA.aLevel2, mDATA.aAnimalNumber);
            }
            GSOUND::Play(tSOUND);
        }
    }
}

BOOL AVATAR_OBJECT::ProcessForJumpRun(float mEffectLocation[3], float mTargetLocation[3], int tSort, float mLocation[3], float dTime)
{
    int result;
    float v6; 
    float v7; 
    float v8;
    float v9; 
    float v10; 
    float v11; 
    float v12; 
    float v13; 
    float v14; 
    float v15; 
    float v16[3]; 
    float v17;
    float v18;
    float v19;

    v17 = mTargetLocation[0] - mEffectLocation[0];
    v18 = mTargetLocation[1] - mEffectLocation[1];
    v19 = mTargetLocation[2] - mEffectLocation[2];
    v9 = v19 * v19 + v18 * v18 + v17 * v17;
    v8 = sqrt(v9);
    if (v8 > 0.0)
    {
        v17 = v17 / v8;
        v18 = v18 / v8;
        v19 = v19 / v8;
    }
    v11 = mUTIL.GetLengthXYZ(mEffectLocation, mTargetLocation);
    switch (tSort)
    {
    case 1:
        v13 = mEffectLocation[0];
        v14 = mEffectLocation[1];
        v15 = mEffectLocation[2];
        v16[0] = (v17 * v11 + v17 * v11) / 5.0 + v13;
        v16[1] = (v18 * v11 + v18 * v11) / 5.0 + mEffectLocation[1] + v11;
        v16[2] = (v19 * v11 + v19 * v11) / 5.0 + mEffectLocation[2];
        v10 = 200.0;
        break;
    case 2:
        v13 = (v17 * v11 + v17 * v11) / 5.0 + mEffectLocation[0];
        v14 = (v18 * v11 + v18 * v11) / 5.0 + mEffectLocation[1] + v11;
        v15 = (v19 * v11 + v19 * v11) / 5.0 + mEffectLocation[2];
        v16[0] = v17 * v11 * 3.0 / 5.0 + mEffectLocation[0];
        v16[1] = v18 * v11 * 3.0 / 5.0 + mEffectLocation[1] + v11;
        v16[2] = v19 * v11 * 3.0 / 5.0 + mEffectLocation[2];
        v10 = 100.0;
        break;
    case 3:
        v13 = v17 * v11 * 3.0 / 5.0 + mEffectLocation[0];
        v14 = v18 * v11 * 3.0 / 5.0 + mEffectLocation[1] + v11;
        v15 = v19 * v11 * 3.0 / 5.0 + mEffectLocation[2];
        v16[0] = mTargetLocation[0];
        v16[1] = mTargetLocation[1];
        v16[2] = mTargetLocation[2];
        v10 = 300.0;
        break;
    }
    v12 = mUTIL.GetLengthXYZ(mLocation, v16);
    if (v12 >= v10 * dTime)
    {
        v17 = v16[0] - v13;
        v18 = v16[1] - v14;
        v19 = v16[2] - v15;
        v7 = v19 * v19 + v18 * v18 + v17 * v17;
        v6 = sqrt(v7);
        if (v6 > 0.0)
        {
            v17 = v17 / v6;
            v18 = v18 / v6;
            v19 = v19 / v6;
        }
        mLocation[0] = v10 * dTime * v17 + mLocation[0];
        mLocation[1] = v10 * dTime * v18 + mLocation[1];
        mLocation[2] = v10 * dTime * v19 + mLocation[2];
        result = 1;
    }
    else
    {
        mLocation[0] = v16[0];
        mLocation[1] = v16[1];
        mLocation[2] = v16[2];
        result = 0;
    }
    return result;
}

float AVATAR_OBJECT::MiniAttackSpeed( int aEffectValueForView[38])
{
    float v4; 
    float v5; 
    float v6; 

    v5 = 99.0f;
    if (aEffectValueForView[25] > 0)
    {
        v5 = v5 * 0.5f;
    }
    v6 = (mUTIL.ReturnAttackSpeedUp(mDATA.aEquipForView[3][1]) * v5) + v5;
    v4 = v6 - 1.0f;
    return floor(v4);
}
float AVATAR_OBJECT::MaxAttackSpeed( int aEffectValueForView[38])
{
    float v4; 
    float v5; 
    float v6; 

    v5 = 121.0f;
    if (aEffectValueForView[25] > 0)
    {
        v5 = v5 * 0.5f;
    }
    v6 = (mUTIL.ReturnAttackSpeedUp(mDATA.aEquipForView[3][1]) * v5) + v5;
    v4 = v6 + 1.0f;
    return floor(v4);
}
float AVATAR_OBJECT::MiniRunSpeed( int aEffectValueForView[38])
{
    float v4; 
    float v5; 
    float v6; 

    v5 = 59.0;
    if (aEffectValueForView[25] > 0)
    {
        v5 = v5 * 0.5f;
    }
    v6 = (mUTIL.ReturnMoveUp(mDATA.aEquipForView[5][1]) * v5) + v5;
    v4 = v6 - 1.0f;
    return floor(v4);
}
float AVATAR_OBJECT::MaxRunSpeed( int aEffectValueForView[38])
{
    float v4;
    float v5;
    float v6;

    v5 = 101.0;
    if (aEffectValueForView[25] > 0)
    {
        v5 = v5 * 0.5f;
    }
    v6 = (mUTIL.ReturnMoveUp(mDATA.aEquipForView[5][1]) * v5) + v5;
    v4 = v6 + 1.0f;
    return floor(v4);
}
float AVATAR_OBJECT::MiniFastRunSpeed( int aEffectValueForView[38])
{
    float v4; 
    float v5; 
    float v6; 

    v5 = 79.0f;
    if (aEffectValueForView[25] > 0)
    {
        v5 = v5 * 0.5f;
    }
    v6 = (mUTIL.ReturnMoveUp(mDATA.aEquipForView[5][1]) * v5) + v5;
    v4 = v6 - 1.0f;
    return floor(v4);
}
float AVATAR_OBJECT::MaxFastRunSpeed( int aEffectValueForView[38])
{
    float v4; 
    float v5; 
    float v6; 

    v5 = 271.0f;
    if (aEffectValueForView[25] > 0)
    {
        v5 = v5 * 0.5f;
    }
    v6 = (mUTIL.ReturnMoveUp(mDATA.aEquipForView[5][1]) * v5) + v5;
    v4 = v6 + 1.0f;
    return floor(v4);
}
void AVATAR_OBJECT::A000( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2( mDATA.aEquipForView );
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
}
void AVATAR_OBJECT::A001( int mIndex, float dTime)
{
    int v4; 
    int i, j, k;
    int index01;
    float tCoord[3];

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aFrame = mDATA.aAction.aFrame - v4;
    }
    if (!mIndex)
    {
        mMYINFO.mTotalTargetNum = 0;
        if (strcmp(mDATA.aPartyName, ""))
        {
            if (mDATA.aPShopState != 1)
            {
                for (i = 1; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || strcmp(mPLAY.mAVATAR_OBJECT[i].mDATA.aPartyName, mDATA.aPartyName) || mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort != 64 || mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSkillValue != 1); ++i)
                {
                    ;
                }
                if (i != mPLAY.MAX_AVATAR_OBJECT && (mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSkillNumber != 80 || mMYINFO.mAvatarInfo.aLevel1 >= 70))
                {
                    for (index01 = 0; index01 < 4; ++index01)
                    {
                        if (mPLAY.GetPartySkillLocation( mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aFront, mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSkillNumber, index01, tCoord) && mUTIL.GetLengthXYZ(mDATA.aAction.aLocation, tCoord) <= 10.0)
                        {
                            for (j = 1; j < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[j].mCheckValidState || strcmp(mPLAY.mAVATAR_OBJECT[j].mDATA.aPartyName, mDATA.aPartyName) || mUTIL.GetLengthXYZ(mPLAY.mAVATAR_OBJECT[j].mDATA.aAction.aLocation, tCoord) >= 20.0); ++j)
                            {
                                ;
                            }
                            if (j == mPLAY.MAX_AVATAR_OBJECT)
                            {
                                break;
                            }
                        }
                    }
                    if (index01 != 4)
                    {
                        mMYINFO.A064( mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aTargetObjectSort, mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aTargetObjectIndex, mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aTargetObjectUniqueNumber, mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSkillNumber, mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSkillGradeNum1, mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSkillGradeNum2, 0);
                    }
                }
            }
        }
    }
}
void AVATAR_OBJECT::A002( int mIndex, float dTime)
{
    int v4;
    float tSpeed;
    BOOL tCheckArrival;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
        mDATA.aAction.aFrame = mDATA.aAction.aFrame - v4;
    AVATAR_OBJECT::PlayActionSound(mIndex);
    tSpeed = 60.0;
    if (mDATA.aAnimalNumber == 1301
        || mDATA.aAnimalNumber == 7011
        || mDATA.aAnimalNumber == 1302
        || mDATA.aAnimalNumber == 1303
        || mDATA.aAnimalNumber == 1304
        || mDATA.aAnimalNumber == 17044
        || mDATA.aAnimalNumber == 1305
        || mDATA.aAnimalNumber == 17045
        || mDATA.aAnimalNumber == 1306
        || mDATA.aAnimalNumber == 17046
        || mDATA.aAnimalNumber == 1307
        || mDATA.aAnimalNumber == 1308
        || mDATA.aAnimalNumber == 1309
        || mDATA.aAnimalNumber == 1313
        || mDATA.aAnimalNumber == 1314
        || mDATA.aAnimalNumber == 17047
        || mDATA.aAnimalNumber == 1315
        || mDATA.aAnimalNumber == 1316
        || mDATA.aAnimalNumber == 510
        || mDATA.aAnimalNumber == 511
        || mDATA.aAnimalNumber == 1317
        || mDATA.aAnimalNumber == 1318
        || mDATA.aAnimalNumber == 17048
        || mDATA.aAnimalNumber == 1319
        || mDATA.aAnimalNumber == 1320
        || mDATA.aAnimalNumber == 1321
        || mDATA.aAnimalNumber == 17049
        || mDATA.aAnimalNumber == 1322
        || mDATA.aAnimalNumber == 17058
        || mDATA.aAnimalNumber == 1323
        || mDATA.aAnimalNumber == 1324
        || mDATA.aAnimalNumber == 17050
        || mDATA.aAnimalNumber == 1325
        || mDATA.aAnimalNumber == 1326
        || mDATA.aAnimalNumber == 1327
        || mDATA.aAnimalNumber == 17051
        || mDATA.aAnimalNumber == 1328
        || mDATA.aAnimalNumber == 1329
        || mDATA.aAnimalNumber == 1330
        || mDATA.aAnimalNumber == 1331
        || mDATA.aAnimalNumber == 17059
        || mDATA.aAnimalNumber == 17060
        || mDATA.aAnimalNumber == 17061
        || mDATA.aAnimalNumber == 559
        || mDATA.aAnimalNumber == 814
        || mDATA.aAnimalNumber == 815
        || mDATA.aAnimalNumber == 816
        || mDATA.aAnimalNumber == 817
        || mDATA.aAnimalNumber == 818
        || mDATA.aAnimalNumber == 819
        || mDATA.aAnimalNumber == 820
        || mDATA.aAnimalNumber == 821
        || mDATA.aAnimalNumber == 2266
        || mDATA.aAnimalNumber == 2267
        || mDATA.aAnimalNumber == 2268
        || mDATA.aAnimalNumber == 2269
        || mDATA.aAnimalNumber == 2270
        || mDATA.aAnimalNumber == 2271
        || mDATA.aAnimalNumber == 2272
        || mDATA.aAnimalNumber == 2273
        || mDATA.aAnimalNumber == 2274
        || mDATA.aAnimalNumber == 2275
        || mDATA.aAnimalNumber == 2276
        || mDATA.aAnimalNumber == 2277
        || mDATA.aAnimalNumber == 2278
        || mDATA.aAnimalNumber == 2279
        || mDATA.aAnimalNumber == 2280
        || mDATA.aAnimalNumber == 2281
        || mDATA.aAnimalNumber == 2282
        || mDATA.aAnimalNumber == 2283
        || mDATA.aAnimalNumber == 2284
        || mDATA.aAnimalNumber == 2285
        || mDATA.aAnimalNumber == 2316
        || mDATA.aAnimalNumber == 2317
        || mDATA.aAnimalNumber == 2422
        || mDATA.aAnimalNumber == 2423
        || mDATA.aAnimalNumber == 2424
        || mDATA.aAnimalNumber == 2425
        || mDATA.aAnimalNumber == 2426
        || mDATA.aAnimalNumber == 2427
        || mDATA.aAnimalNumber == 2428
        || mDATA.aAnimalNumber == 2429
        || mDATA.aAnimalNumber == 2430
        || mDATA.aAnimalNumber == 2431
        || mDATA.aAnimalNumber == 2432
        || mDATA.aAnimalNumber == 2433
        || mDATA.aAnimalNumber == 2434
        || mDATA.aAnimalNumber == 2435
        || mDATA.aAnimalNumber == 2436
        || mDATA.aAnimalNumber == 2437
        || mDATA.aAnimalNumber == 2438
        || mDATA.aAnimalNumber == 2439
        || mDATA.aAnimalNumber == 2440
        || mDATA.aAnimalNumber == 2441
        || mDATA.aAnimalNumber == 1917
        || mDATA.aAnimalNumber == 1918
        || mDATA.aAnimalNumber == 1919
        || mDATA.aAnimalNumber == 1920
        || mDATA.aAnimalNumber == 1921
        || mDATA.aAnimalNumber == 1922
        || mDATA.aAnimalNumber == 1923
        || mDATA.aAnimalNumber == 1924
        || mDATA.aAnimalNumber == 1925
        || mDATA.aAnimalNumber == 1926
        || mDATA.aAnimalNumber == 1927
        || mDATA.aAnimalNumber == 1928
        || mDATA.aAnimalNumber == 1929
        || mDATA.aAnimalNumber == 1930
        || mDATA.aAnimalNumber == 1931
        || mDATA.aAnimalNumber == 1932
        || mDATA.aAnimalNumber == 1933
        || mDATA.aAnimalNumber == 1934
        || mDATA.aAnimalNumber == 1935
        || mDATA.aAnimalNumber == 1936
        || mDATA.aAnimalNumber == 1923
        || mDATA.aAnimalNumber == 1924
        || mDATA.aAnimalNumber == 1925
        || mDATA.aAnimalNumber == 1926
        || mDATA.aAnimalNumber == 1927
        || mDATA.aAnimalNumber == 1928
        || mDATA.aAnimalNumber == 1929
        || mDATA.aAnimalNumber == 1930
        || mDATA.aAnimalNumber == 1931
        || mDATA.aAnimalNumber == 1932
        || mDATA.aAnimalNumber == 1933
        || mDATA.aAnimalNumber == 1934
        || mDATA.aAnimalNumber == 1935
        || mDATA.aAnimalNumber == 1936
        || mDATA.aAnimalNumber == 6500
        || mDATA.aAnimalNumber == 6501
        || mDATA.aAnimalNumber == 6502
        || mDATA.aAnimalNumber == 6503
        || mDATA.aAnimalNumber == 6504
        || mDATA.aAnimalNumber == 6505
        || mDATA.aAnimalNumber == 6506
        || mDATA.aAnimalNumber == 6507
        || mDATA.aAnimalNumber == 6508
        || mDATA.aAnimalNumber == 6509)
    {
        tSpeed = tSpeed * 1.10f;
    }
    if (mDATA.aEffectValueForView[7] > 0)
        tSpeed = (mDATA.aEffectValueForView[7] + 100.0) * tSpeed * 0.01f;
    if (mDATA.aEffectValueForView[25] > 0)
        tSpeed = tSpeed * 0.5f;
    if (mDATA.aEffectValueForView[28] > 0)
        tSpeed = tSpeed * 0.90f;
    tSpeed = (mUTIL.ReturnMoveUp(mDATA.aEquipForView[5][1]) * tSpeed) + tSpeed;
    if (mMYINFO.mAvatarInfo.aEquip[1][0] == 1407 && mMYINFO.mAvatarInfo.aLevel1 <= 100)
        tSpeed = mFACTOR.GetFastRunSpeed(2, 8);
    if (tSpeed > AVATAR_OBJECT::MiniRunSpeed(mDATA.aEffectValueForView) && tSpeed < AVATAR_OBJECT::MaxRunSpeed(mDATA.aEffectValueForView))
    {
        if (!mGDATA.mZONE.mWORLD2.Move( mDATA.aAction.aLocation, mDATA.aAction.aTargetLocation, tSpeed, dTime, &tCheckArrival))
        {
            mDATA.aAction.aSort = 1;
            mDATA.aAction.aFrame = 0.0;
            mDATA.aAction.aFront = mDATA.aAction.aTargetFront;
            if (!mIndex)
            {
                mDATA.aAction.aSkillNumber = 0;
                mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            }
            return;
        }
        if (tCheckArrival)
        {
            mDATA.aAction.aSort = 1;
            mDATA.aAction.aFrame = 0.0;
            mDATA.aAction.aFront = mDATA.aAction.aTargetFront;
            if (!mIndex)
            {
                mDATA.aAction.aSkillNumber = 0;
                mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            }
            return;
        }
        goto LABEL_151;
    }
    if (mMYINFO.mAvatarInfo.aEquip[1][0] != 1407 || mMYINFO.mAvatarInfo.aLevel1 > 100)
    {
        goto LABEL_151;
    }
    if (!mGDATA.mZONE.mWORLD2.Move( mDATA.aAction.aLocation, mDATA.aAction.aTargetLocation, tSpeed, dTime, &tCheckArrival))
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mDATA.aAction.aFront = mDATA.aAction.aTargetFront;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
        return;
    }
    if (!tCheckArrival)
    {
    LABEL_151:
        if (!mIndex)
        {
            if (mAPP[0].hPresentElapsedSeconds - mMYINFO.mSkillRunPostTime1 >= 0.5)
            {
                mMYINFO.mSkillRunPostTime1 = mAPP[0].hPresentElapsedSeconds;
                mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            }
            switch (mDATA.aAction.aTargetObjectSort)
            {
            case 1:
                if (!mMAIN.ProcessForGetAvatar2())
                {
                    mDATA.aAction.aSort = 1;
                    mDATA.aAction.aFrame = 0.0;
                    mDATA.aAction.aFront = mDATA.aAction.aTargetFront;
                    mDATA.aAction.aSkillNumber = 0;
                    mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
                }
                break;
            case 2:
                if (!mMAIN.ProcessForGetAvatar2())
                {
                    mDATA.aAction.aSort = 1;
                    mDATA.aAction.aFrame = 0.0;
                    mDATA.aAction.aFront = mDATA.aAction.aTargetFront;
                    mDATA.aAction.aSkillNumber = 0;
                    mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
                }
                break;
            case 3:
                if (!mMAIN.ProcessForGetAvatar2())
                {
                    mDATA.aAction.aSort = 1;
                    mDATA.aAction.aFrame = 0.0;
                    mDATA.aAction.aFront = mDATA.aAction.aTargetFront;
                    mDATA.aAction.aSkillNumber = 0;
                    mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
                }
                break;
            case 4:
                if (!mMAIN.ProcessForGetNPC3())
                {
                    mDATA.aAction.aSort = 1;
                    mDATA.aAction.aFrame = 0.0;
                    mDATA.aAction.aFront = mDATA.aAction.aTargetFront;
                    mDATA.aAction.aSkillNumber = 0;
                    mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
                }
                break;
            case 5:
                if (!mMAIN.ProcessForGetMonster2())
                {
                    mDATA.aAction.aSort = 1;
                    mDATA.aAction.aFrame = 0.0;
                    mDATA.aAction.aFront = mDATA.aAction.aTargetFront;
                    mDATA.aAction.aSkillNumber = 0;
                    mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
                }
                break;
            case 6:
                if (mMAIN.CheckForInventory() && !mMAIN.ProcessForGetItem2())
                {
                    mDATA.aAction.aSort = 1;
                    mDATA.aAction.aFrame = 0.0;
                    mDATA.aAction.aFront = mDATA.aAction.aTargetFront;
                    mDATA.aAction.aSkillNumber = 0;
                    mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
                }
                break;
            case 7:
                if (!mMAIN.ProcessForGetDeputyPShop2())
                {
                    mDATA.aAction.aSort = 1;
                    mDATA.aAction.aFrame = 0.0;
                    mDATA.aAction.aFront = mDATA.aAction.aTargetFront;
                    mDATA.aAction.aSkillNumber = 0;
                    mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
                }
                break;
            default:
                return;
            }
        }
        return;
    }
    mDATA.aAction.aSort = 1;
    mDATA.aAction.aFrame = 0.0;
    mDATA.aAction.aFront = mDATA.aAction.aTargetFront;
    if (!mIndex)
    {
        mDATA.aAction.aSkillNumber = 0;
        mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
    }
}
void AVATAR_OBJECT::A003( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView) + 1;
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
}
void AVATAR_OBJECT::A004( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
}
void AVATAR_OBJECT::A005( int mIndex, float dTime)
{
    int v3; 
    int v5; 
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView,  mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A006( int mIndex, float dTime)
{
    int v3; 
    int v5; 
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A007( int mIndex, float dTime)
{
    int v3; 
    int v5;
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView)
        && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A009( int mIndex, float dTime)
{
    int v3;
    int v5;

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A010( int mIndex, float dTime)
{
    int v3;
    int v5; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A011( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
        mDATA.aAction.aFrame = (v4 - 1);
}
void AVATAR_OBJECT::A012( int mIndex, float dTime)
{
    int v79;
    float tLocation[3];
    float tPostYCoord;
    char* tstr;
    int tZoneNumber;

    if (mDATA.aAnimalAbsorbState)
        v79 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v79 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mCheckDeath == 1)
    {
        mDeathTimeBeforeRespawn = mDeathTimeBeforeRespawn - dTime * 100.0;
        if (mDeathTimeBeforeRespawn < 0.0)
        {
            mDeathTimeBeforeRespawn = 0.0;
        }
        tLocation[0] = mDATA.aAction.aTargetLocation[0] * mDeathTimeBeforeRespawn * dTime + mDATA.aAction.aLocation[0];
        tLocation[1] = mDATA.aAction.aLocation[1];
        tLocation[2] = mDATA.aAction.aTargetLocation[2] * mDeathTimeBeforeRespawn * dTime + mDATA.aAction.aLocation[2];
        tPostYCoord = mDATA.aAction.aLocation[1] + 20.0;
        if (mGDATA.mZONE.mWORLD2.GetYCoord( tLocation[0], tLocation[2], &tLocation[1], 1, tPostYCoord, 0, 1) && !mUTIL.CheckValidTarget(tLocation))
        {
            mDATA.aAction.aLocation[0] = tLocation[0];
            mDATA.aAction.aLocation[1] = tLocation[1];
            mDATA.aAction.aLocation[2] = tLocation[2];
        }
    }
    if (mDATA.aAction.aFrame >= v79)
    {
        mDATA.aAction.aFrame = (v79 - 1);
        if (mIndex)
        {
            mCheckDeath = 0;
        }
        else if (mCheckDeath == 1)
        {
            mCheckDeath = 0;
            if (mMYINFO.mPresentZoneNumber == 194)
            {
                mDeathCount = 20;
                tstr = mMESSAGE.Return(861);
                mBASICUI.Insert1( tstr, mFONTCOLOR.mData[44]);
            }
            else if (mMYINFO.mPresentZoneNumber == 291)
            {
                if (!strcmp(mPLAY.mWorldInfo.mChallangeGuild, mMYINFO.mAvatarInfo.aGuildName))
                {
                    mDeathCount = 15;
                    tstr = mMESSAGE.Return(866);
                }
                else
                {
                    mDeathCount = 30;
                    tstr = mMESSAGE.Return(1481);
                }
                mBASICUI.Insert1( tstr, mFONTCOLOR.mData[44] );
            }
            else
            {
                mDeathCount = 10;
                tstr = mMESSAGE.Return(204);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
            }
            mMYINFO.mSkillRunPostTime1 = mAPP[0].hPresentElapsedSeconds;
        }
        else if (mAPP[0].hPresentElapsedSeconds - mMYINFO.mSkillRunPostTime1 >= 1.0)
        {
            --mDeathCount;
            mMYINFO.mSkillRunPostTime1 = mAPP[0].hPresentElapsedSeconds;
            switch (mDeathCount)
            {
            case 0:
                switch (mMYINFO.mPresentZoneNumber) // Wars savaţlar pvp açma olabilir
                {
                case 49:
                case 51:
                case 53:
                case 120:
                case 121:
                case 122:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 295:
                case 296:
                    if ((mDATA.aAction.aSkillNumber <= 0 || mDATA.aAction.aSkillNumber > 2) && mZONEMOVEINFO.ReturnNPCTelepoterCoord2(mMYINFO.mAvatarInfo.aTribe, mMYINFO.mPresentZoneNumber, tLocation))
                    {
                        mMYINFO.A000(tLocation, 0, -1, 0, 0, 0, 0);
                        return;
                    }
                    mMYINFO.A000(mDATA.aAction.aLocation, 0, -1, 0, 0, 0, 0);
                    return;

                case 194:
                    if (mDATA.aAction.aSkillNumber > 0 && mDATA.aAction.aSkillNumber <= 2 || !mZONEMOVEINFO.ReturnNPCTelepoterCoord2( mMYINFO.mAvatarInfo.aTribe, mMYINFO.mPresentZoneNumber, tLocation))
                    {
                        mMYINFO.A000(mDATA.aAction.aLocation, 0, -1, 0, 0, 0, 0);
                        return;
                    }
                    mMYINFO.A000(tLocation, 0, -1, 0, 0, 0, 0);
                    return;

                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                    if (mDATA.aAction.aSkillNumber > 0 && mDATA.aAction.aSkillNumber <= 2 || !mZONEMOVEINFO.ReturnNPCTelepoterCoord2( mMYINFO.mAvatarInfo.aTribe, mMYINFO.mPresentZoneNumber, tLocation))
                    {
                        mMYINFO.A000(mDATA.aAction.aLocation, 0, -1, 0, 0, 0, 0);
                        return;
                    }
                    mMYINFO.A000(tLocation, 0, -1, 0, 0, 0, 0);
                    return;

                case 250:
                case 267:
                case 268:
                case 269:
                    if (mDATA.aAction.aSkillNumber > 0 && mDATA.aAction.aSkillNumber <= 2 || !mZONEMOVEINFO.ReturnNPCTelepoterCoord2( mMYINFO.mAvatarInfo.aTribe, mMYINFO.mPresentZoneNumber, tLocation))
                    {
                        mMYINFO.A000(mDATA.aAction.aLocation, 0, -1, 0, 0, 0, 0);
                        return;
                    }
                    mMYINFO.A000(tLocation, 0, -1, 0, 0, 0, 0);
                    return;

                case 291:
                    if (mDATA.aAction.aSkillNumber > 0 && mDATA.aAction.aSkillNumber <= 2)
                    {
                        mMYINFO.A000( mDATA.aAction.aLocation, 0, -1, 0, 0, 0, 0 );
                        return;
                    }
                    if (!strcmp(mPLAY.mWorldInfo.mHoldingGuild, mDATA.aGuildName))
                    {
                        tLocation[0] = 1.0;
                        tLocation[1] = 238.0;
                        tLocation[2] = 7959.0;
                    }
                    else
                    {
                        tLocation[0] = -8.0;
                        tLocation[1] = 15.0;
                        tLocation[2] = -37.0;
                    }
                    mMYINFO.A000(tLocation, 0, -1, 0, 0, 0, 0);
                    return;

                case 138:
                case 139:
                case 165:
                case 166:
                    if (mDATA.aAction.aSkillNumber > 0 && mDATA.aAction.aSkillNumber <= 2)
                    {
                        mMYINFO.A000(mDATA.aAction.aLocation, 0, -1, 0, 0, 0, 0);
                        return;
                    }
                    if (!mNPCUI.FourGuildZoneCoord(mDATA.aTribe, mDATA.aGuildName, tLocation))
                    {
                        mMYINFO.A000( mDATA.aAction.aLocation, 0, -1, 0, 0, 0, 0);
                    }
                    mMYINFO.A000(tLocation, 0, -1, 0, 0, 0, 0);
                    return;

                case 324:
                    if (!mZONEMOVEINFO.ReturnNPCTelepoterCoord2(mDATA.aZone270TypeBattleTeam, 324, tLocation))
                    {
                        mZONEMOVEINFO.SetFirstCoord(324, tLocation);
                        mMYINFO.A000(tLocation, 0, -1, 0, 0, 0, 0);
                    }
                    mMYINFO.A000(tLocation, 0, -1, 0, 0, 0, 0);
                    return;

                default:
                    if (mDATA.aAction.aSkillNumber <= 0 || mDATA.aAction.aSkillNumber > 2)
                    {
                        tZoneNumber = mZONEMOVEINFO.ReturnNextZoneAfterDeath(mDATA.aTribe, mMYINFO.mPresentZoneNumber);
                        if (!mZONEMOVEINFO.ReturnNPCTelepoterCoord2(mDATA.aTribe, tZoneNumber, tLocation))
                        {
                            mZONEMOVEINFO.SetFirstCoord(tZoneNumber, tLocation);
                        }
                        if (tZoneNumber == mMYINFO.mPresentZoneNumber)
                        {
                            if (mMYINFO.mAvatarInfo.aAutoHuntState == 1 && (mMYINFO.mAvatarInfo.aAutoHunt7Day > 0 || mMYINFO.mAvatarInfo.aAutoHunt5Hour > 0) && mMYINFO.mAvatarInfo.aActUponDeath == 1 && !mMYINFO.mbIsPVPDie)
                            {
                                mPLAY.ReturnToTownOffAuto(1);
                            }
                            else
                            {
                                mMYINFO.A000(tLocation, 0, -1, 0, 0, 0, 0);
                                mMYINFO.mbIsPVPDie = 0;
                            }
                        }
                        else if (!mMYINFO.mMoveZoneState)
                        {
                            mMYINFO.mMoveZoneState = 1;
                            mMYINFO.mMoveZoneSort = 3;
                            mMYINFO.mMoveZoneValue = 0;
                            mMYINFO.mNextZoneNumber = tZoneNumber;
                            memset(&mMYINFO.mAction, 0, sizeof(mMYINFO.mAction));
                            mMYINFO.mAction.aType = 0;
                            mMYINFO.mAction.aSort = 0;
                            mMYINFO.mAction.aFrame = 0.0;
                            mMYINFO.mAction.aLocation[0] = tLocation[0];
                            mMYINFO.mAction.aLocation[1] = tLocation[1];
                            mMYINFO.mAction.aLocation[2] = tLocation[2];
                            mMYINFO.mAction.aFront = (rand() % 360);
                            mMYINFO.mAction.aTargetFront = mMYINFO.mAction.aFront;
                            mTRANSFER.T_DEMAND_ZONE_SERVER_INFO_2(mMYINFO.mMoveZoneSort, tZoneNumber);
                        }
                    }
                    else
                    {
                        mMYINFO.A000(mDATA.aAction.aLocation, 0, -1, 0, 0, 0, 0);
                    }
                    break;
                }
                break;

            case 1:
                tstr = mMESSAGE.Return(213);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 2:
                tstr = mMESSAGE.Return(212);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 3:
                tstr = mMESSAGE.Return(211);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 4:
                tstr = mMESSAGE.Return(210);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 5:
                tstr = mMESSAGE.Return(209);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 6:
                tstr = mMESSAGE.Return(208);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 7:
                tstr = mMESSAGE.Return(207);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 8:
                tstr = mMESSAGE.Return(206);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 9:
                tstr = mMESSAGE.Return(205);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 10:
                tstr = mMESSAGE.Return(204);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 11:
                tstr = mMESSAGE.Return(870);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 12:
                tstr = mMESSAGE.Return(869);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 13:
                tstr = mMESSAGE.Return(868);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 14:
                tstr = mMESSAGE.Return(867);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 15:
                tstr = mMESSAGE.Return(866);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 16:
                tstr = mMESSAGE.Return(865);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 17:
                tstr = mMESSAGE.Return(864);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 18:
                tstr = mMESSAGE.Return(863);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 19:
                tstr = mMESSAGE.Return(862);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 20:
                tstr = mMESSAGE.Return(861);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 21:
                tstr = mMESSAGE.Return(1490);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 22:
                tstr = mMESSAGE.Return(1489);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 23:
                tstr = mMESSAGE.Return(1488);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 24:
                tstr = mMESSAGE.Return(1487);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 25:
                tstr = mMESSAGE.Return(1486);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 26:
                tstr = mMESSAGE.Return(1485);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 27:
                tstr = mMESSAGE.Return(1484);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 28:
                tstr = mMESSAGE.Return(1483);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            case 29:
                tstr = mMESSAGE.Return(1482);
                mBASICUI.Insert1(tstr, mFONTCOLOR.mData[44]);
                break;
            default:
                return;
            }
        }
    }
}
void AVATAR_OBJECT::A013( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
}
void AVATAR_OBJECT::A014( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
        mDATA.aAction.aFrame = mDATA.aAction.aFrame - v4;
}
void AVATAR_OBJECT::A015( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
        mDATA.aAction.aFrame = mDATA.aAction.aFrame - v4;
}
void AVATAR_OBJECT::A016( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            if (mDATA.aAction.aSkillNumber == 1)
            {
                mTRANSFER.T_BOOZE_DRINK_SEND(0, mMYINFO.mBottleIndex);
                mDATA.aAction.aSkillNumber = 0;
            }
            else if (mDATA.aAction.aSkillNumber == 2)
            {
                mTRANSFER.T_BOOZE_DRINK_SEND(0, mMYINFO.mAvatarInfo.aWineDrinkIndex);
                mDATA.aAction.aSkillNumber = 0;
            }
            else
            {
                mDATA.aAction.aSkillNumber = 0;
                mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
                if (!(rand() % 3))
                {
                    mMYINFO.A017();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A017( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2( mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
}
void AVATAR_OBJECT::A018( int mIndex, float dTime)
{
    int v4;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 19;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
}
void AVATAR_OBJECT::A019( int mIndex, float dTime)
{
    int v4;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
        mDATA.aAction.aFrame = mDATA.aAction.aFrame - v4;
}
void AVATAR_OBJECT::A020( int mIndex, float dTime)
{
    int v4;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
}
void AVATAR_OBJECT::A021( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
}
void AVATAR_OBJECT::A022( int mIndex, float dTime)
{
    int v4;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
}
void AVATAR_OBJECT::A023( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
}
void AVATAR_OBJECT::A030( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 31;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
    }
}
void AVATAR_OBJECT::A031( int mIndex, float dTime)
{
    int v4;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
        mDATA.aAction.aFrame = mDATA.aAction.aFrame - v4;
}
void AVATAR_OBJECT::A032( int mIndex, float dTime)
{
    BOOL tCheckArrival; 
    int v5;
    float tSpeed; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v5)
        mDATA.aAction.aFrame = mDATA.aAction.aFrame - v5;
    tSpeed = mSKILL.ReturnSkillValue(mDATA.aAction.aSkillNumber, mDATA.aAction.aSkillGradeNum2 + mDATA.aAction.aSkillGradeNum1, 6);
    if (mDATA.aAnimalNumber == 1301
        || mDATA.aAnimalNumber == 7011
        || mDATA.aAnimalNumber == 1302
        || mDATA.aAnimalNumber == 1303
        || mDATA.aAnimalNumber == 1304
        || mDATA.aAnimalNumber == 17044
        || mDATA.aAnimalNumber == 1305
        || mDATA.aAnimalNumber == 17045
        || mDATA.aAnimalNumber == 1306
        || mDATA.aAnimalNumber == 17046
        || mDATA.aAnimalNumber == 1307
        || mDATA.aAnimalNumber == 1308
        || mDATA.aAnimalNumber == 1309
        || mDATA.aAnimalNumber == 1313
        || mDATA.aAnimalNumber == 1314
        || mDATA.aAnimalNumber == 17047
        || mDATA.aAnimalNumber == 1315
        || mDATA.aAnimalNumber == 1316
        || mDATA.aAnimalNumber == 510
        || mDATA.aAnimalNumber == 511
        || mDATA.aAnimalNumber == 1317
        || mDATA.aAnimalNumber == 1318
        || mDATA.aAnimalNumber == 17048
        || mDATA.aAnimalNumber == 1319
        || mDATA.aAnimalNumber == 1320
        || mDATA.aAnimalNumber == 1321
        || mDATA.aAnimalNumber == 17049
        || mDATA.aAnimalNumber == 1322
        || mDATA.aAnimalNumber == 17058
        || mDATA.aAnimalNumber == 1323
        || mDATA.aAnimalNumber == 1324
        || mDATA.aAnimalNumber == 17050
        || mDATA.aAnimalNumber == 1325
        || mDATA.aAnimalNumber == 1326
        || mDATA.aAnimalNumber == 1327
        || mDATA.aAnimalNumber == 17051
        || mDATA.aAnimalNumber == 1328
        || mDATA.aAnimalNumber == 1329
        || mDATA.aAnimalNumber == 1330
        || mDATA.aAnimalNumber == 1331
        || mDATA.aAnimalNumber == 17059
        || mDATA.aAnimalNumber == 17060
        || mDATA.aAnimalNumber == 17061
        || mDATA.aAnimalNumber == 559
        || mDATA.aAnimalNumber == 814
        || mDATA.aAnimalNumber == 815
        || mDATA.aAnimalNumber == 816
        || mDATA.aAnimalNumber == 817
        || mDATA.aAnimalNumber == 818
        || mDATA.aAnimalNumber == 819
        || mDATA.aAnimalNumber == 820
        || mDATA.aAnimalNumber == 821
        || mDATA.aAnimalNumber == 2266
        || mDATA.aAnimalNumber == 2267
        || mDATA.aAnimalNumber == 2268
        || mDATA.aAnimalNumber == 2269
        || mDATA.aAnimalNumber == 2270
        || mDATA.aAnimalNumber == 2271
        || mDATA.aAnimalNumber == 2272
        || mDATA.aAnimalNumber == 2273
        || mDATA.aAnimalNumber == 2274
        || mDATA.aAnimalNumber == 2275
        || mDATA.aAnimalNumber == 2276
        || mDATA.aAnimalNumber == 2277
        || mDATA.aAnimalNumber == 2278
        || mDATA.aAnimalNumber == 2279
        || mDATA.aAnimalNumber == 2280
        || mDATA.aAnimalNumber == 2281
        || mDATA.aAnimalNumber == 2282
        || mDATA.aAnimalNumber == 2283
        || mDATA.aAnimalNumber == 2284
        || mDATA.aAnimalNumber == 2285
        || mDATA.aAnimalNumber == 2316
        || mDATA.aAnimalNumber == 2317
        || mDATA.aAnimalNumber == 2422
        || mDATA.aAnimalNumber == 2423
        || mDATA.aAnimalNumber == 2424
        || mDATA.aAnimalNumber == 2425
        || mDATA.aAnimalNumber == 2426
        || mDATA.aAnimalNumber == 2427
        || mDATA.aAnimalNumber == 2428
        || mDATA.aAnimalNumber == 2429
        || mDATA.aAnimalNumber == 2430
        || mDATA.aAnimalNumber == 2431
        || mDATA.aAnimalNumber == 2432
        || mDATA.aAnimalNumber == 2433
        || mDATA.aAnimalNumber == 2434
        || mDATA.aAnimalNumber == 2435
        || mDATA.aAnimalNumber == 2436
        || mDATA.aAnimalNumber == 2437
        || mDATA.aAnimalNumber == 2438
        || mDATA.aAnimalNumber == 2439
        || mDATA.aAnimalNumber == 2440
        || mDATA.aAnimalNumber == 2441
        || mDATA.aAnimalNumber == 1917
        || mDATA.aAnimalNumber == 1918
        || mDATA.aAnimalNumber == 1919
        || mDATA.aAnimalNumber == 1920
        || mDATA.aAnimalNumber == 1921
        || mDATA.aAnimalNumber == 1922
        || mDATA.aAnimalNumber == 1923
        || mDATA.aAnimalNumber == 1924
        || mDATA.aAnimalNumber == 1925
        || mDATA.aAnimalNumber == 1926
        || mDATA.aAnimalNumber == 1927
        || mDATA.aAnimalNumber == 1928
        || mDATA.aAnimalNumber == 1929
        || mDATA.aAnimalNumber == 1930
        || mDATA.aAnimalNumber == 1931
        || mDATA.aAnimalNumber == 1932
        || mDATA.aAnimalNumber == 1933
        || mDATA.aAnimalNumber == 1934
        || mDATA.aAnimalNumber == 1935
        || mDATA.aAnimalNumber == 1936
        || mDATA.aAnimalNumber == 6500
        || mDATA.aAnimalNumber == 6501
        || mDATA.aAnimalNumber == 6502
        || mDATA.aAnimalNumber == 6503
        || mDATA.aAnimalNumber == 6504
        || mDATA.aAnimalNumber == 6505
        || mDATA.aAnimalNumber == 6506
        || mDATA.aAnimalNumber == 6507
        || mDATA.aAnimalNumber == 6508
        || mDATA.aAnimalNumber == 6509)
    {
        tSpeed = tSpeed * 1.10f;
    }
    if (mDATA.aEffectValueForView[7] > 0)
        tSpeed = (mDATA.aEffectValueForView[7] + 100.0) * tSpeed * 0.01f;
    if (mDATA.aEffectValueForView[25] > 0)
        tSpeed = tSpeed * 0.5f;
    if (mDATA.aEffectValueForView[28] > 0)
        tSpeed = tSpeed * 0.90f;
    tSpeed = (mUTIL.ReturnMoveUp(mDATA.aEquipForView[5][1]) * tSpeed) + tSpeed;
    if (tSpeed <= AVATAR_OBJECT::MiniFastRunSpeed(mDATA.aEffectValueForView) || tSpeed >= AVATAR_OBJECT::MaxFastRunSpeed(mDATA.aEffectValueForView))
    {
        goto LABEL_138;
    }
    if (!mGDATA.mZONE.mWORLD2.Move( mDATA.aAction.aLocation, mDATA.aAction.aTargetLocation, tSpeed, dTime, &tCheckArrival))
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
        return;
    }
    if (tCheckArrival)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
    else
    {
    LABEL_138:
        if (!mIndex && mAPP[0].hPresentElapsedSeconds - mMYINFO.mSkillRunPostTime1 >= 0.5)
        {
            mMYINFO.mSkillRunPostTime1 = mAPP[0].hPresentElapsedSeconds;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
}
void AVATAR_OBJECT::A033( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 34;
        mDATA.aAction.aFrame = 0.0;
    }
}
void AVATAR_OBJECT::A034( int mIndex, float dTime)
{
    int v4;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
        mDATA.aAction.aFrame = (v4 - 1);
    if (!AVATAR_OBJECT::ProcessForJumpRun( mEffectLocation, mDATA.aAction.aTargetLocation, 1, mDATA.aAction.aLocation, dTime))
    {
        mDATA.aAction.aSort = 35;
        mDATA.aAction.aFrame = 0.0;
        AVATAR_OBJECT::PlayActionSound(mIndex);
    }
}
void AVATAR_OBJECT::A035( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
        mDATA.aAction.aFrame = (v4 - 1);
    if (!AVATAR_OBJECT::ProcessForJumpRun( mEffectLocation, mDATA.aAction.aTargetLocation, 2, mDATA.aAction.aLocation, dTime))
    {
        mDATA.aAction.aSort = 36;
        mDATA.aAction.aFrame = 0.0;
    }
}
void AVATAR_OBJECT::A036( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
        mDATA.aAction.aFrame = (v4 - 1);
    if (!AVATAR_OBJECT::ProcessForJumpRun( mEffectLocation, mDATA.aAction.aTargetLocation, 3, mDATA.aAction.aLocation, dTime))
    {
        mDATA.aAction.aSort = 37;
        mDATA.aAction.aFrame = 0.0;
        AVATAR_OBJECT::PlayActionSound(mIndex);
    }
}
void AVATAR_OBJECT::A037( int mIndex, float dTime)
{
    int v4;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
}
void AVATAR_OBJECT::A038( int mIndex, float dTime)
{
    int v4;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A039( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A040( int mIndex, float dTime)
{
    float v3;
    int v5; 

    if (!mIndex)
    {
        if (!mMYINFO.ButtonDownForSkill( mDATA.aAction.aSkillNumber ))
        {
            mMYINFO.A001();
            return;
        }
        if (mDATA.mPartFrame <= 0)
        {
            if (mAPP[0].hPresentElapsedSeconds - mMYINFO.mSkillRunPostTime1 >= 1.0)
            {
                goto LABEL_6;
            }
        }
        else if (mAPP[0].hPresentElapsedSeconds - mMYINFO.mSkillRunPostTime1 + mAPP[0].hPresentElapsedSeconds - mMYINFO.mSkillRunPostTime1 >= 1.0)
        {
        LABEL_6:
            mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView) + 1;
            mDATA.aAction.aSort = 1;
            mDATA.aAction.aFrame = 0.0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mDATA.aAction.aSkillNumber = 0;
            mMYINFO.A001();
            return;
        }
    }
    if (mDATA.aAnimalAbsorbState)
    {
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    }
    else
    {
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    }
    if (mDATA.mPartFrame <= 0)
        v3 = dTime * 30.0 + mDATA.aAction.aFrame;
    else
        v3 = dTime * 60.0 + mDATA.aAction.aFrame;
    mDATA.aAction.aFrame = v3;
    if (mDATA.aAction.aFrame >= v5)
        mDATA.aAction.aFrame = (v5 - 1);
}
void AVATAR_OBJECT::A041( int mIndex, float dTime)
{
    int v4;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mDATA.aAction.aSkillNumber = 0;
        }
    }
}
void AVATAR_OBJECT::A042( int mIndex, float dTime)
{
    int v3; 
    int v5; 
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A043( int mIndex, float dTime)
{
    int v3; 
    int v5; 
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A044( int mIndex, float dTime)
{
    int v4; 
    float v5; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v5 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v5 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView)
        && v5 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v5 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A045( int mIndex, float dTime)
{
    int v3;
    int v5;
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}

void AVATAR_OBJECT::A046( int mIndex, float dTime)
{
    int v3; 
    int v5;
    float v6;

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A048( int mIndex, float dTime)
{
    int v3; 
    int v5; 
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}

void AVATAR_OBJECT::A049( int mIndex, float dTime)
{
    int v3;
    int v5; 
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A050( int mIndex, float dTime)
{
    int v4;
    float v5; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v5 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v5 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v5 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v5 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A051( int mIndex, float dTime)
{
    int v3; 
    int v5; 
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A052( int mIndex, float dTime)
{
    int v3; 
    int v5;
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView)
        && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A054( int mIndex, float dTime)
{
    int v4; 
    float v5;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v5 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v5 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v5 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v5 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A055( int mIndex, float dTime)
{
    int v4; 
    float v5; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v5 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v5 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v5 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v5 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A056( int mIndex, float dTime)
{
    int v4;
    float v5; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v5 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v5 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v5 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v5 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A057( int mIndex, float dTime)
{
    int v4; 
    float v5; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v5 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v5 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v5 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v5 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A058( int mIndex, float dTime)
{
    int v4; 
    float v5;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v5 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v5 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v5 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v5 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A060( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mDATA.aAction.aSkillNumber = 0;
        }
    }
}
void AVATAR_OBJECT::A061( int mIndex, float dTime)
{
    int v4;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mDATA.aAction.aSkillNumber = 0;
        }
    }
}
void AVATAR_OBJECT::A062( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mDATA.aAction.aSkillNumber = 0;
        }
    }
}
void AVATAR_OBJECT::A063( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 64;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
    }
}
void AVATAR_OBJECT::A064( int mIndex, float dTime)
{
    float tLoc2[3]; 
    int index; 
    int i; 
    int v7;

    if (mDATA.aAnimalAbsorbState)
        v7 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v7 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v7)
        mDATA.aAction.aFrame = mDATA.aAction.aFrame - v7;
    if (!mIndex)
    {
        if (!strcmp(mDATA.aPartyName, ""))
        {
        LABEL_8:
            mMYINFO.A001();
            return;
        }
        if (mDATA.aAction.aSkillValue)
        {
            for (index = 0; index < 4 && mPLAY.GetPartySkillLocation( mDATA.aAction.aFront, mDATA.aAction.aLocation, mDATA.aAction.aSkillNumber, index, tLoc2); ++index)
            {
                for (i = 1; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || strcmp(mPLAY.mAVATAR_OBJECT[i].mDATA.aPartyName, mDATA.aPartyName) || mUTIL.GetLengthXYZ(mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation, tLoc2) > 10.0 || mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort != 64); ++i)
                {
                    ;
                }
                if (i == mPLAY.MAX_AVATAR_OBJECT)
                    break;
            }
            if (index >= 4)
                mMYINFO.A065(
                    mDATA.aAction.aLocation,
                    mDATA.aAction.aTargetObjectSort,
                    mDATA.aAction.aTargetObjectIndex,
                    mDATA.aAction.aTargetObjectUniqueNumber,
                    mDATA.aAction.aSkillNumber,
                    mDATA.aAction.aSkillGradeNum1,
                    mDATA.aAction.aSkillGradeNum2,
                    1);
        }
        else
        {
            for (index = 1; index < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[index].mCheckValidState || strcmp(mPLAY.mAVATAR_OBJECT[index].mDATA.aPartyName, mDATA.aPartyName) || mPLAY.mAVATAR_OBJECT[index].mDATA.aAction.aSort != 64 && mPLAY.mAVATAR_OBJECT[index].mDATA.aAction.aSort != 65 || mPLAY.mAVATAR_OBJECT[index].mDATA.aAction.aSkillValue != 1); ++index)
            {
                ;
            }
            if (index == mPLAY.MAX_AVATAR_OBJECT)
            {
                goto LABEL_8;
            }
            if (mPLAY.mAVATAR_OBJECT[index].mDATA.aAction.aSort == 65)
            {
                mMYINFO.A065(
                    mPLAY.mAVATAR_OBJECT[index].mDATA.aAction.aLocation,
                    mPLAY.mAVATAR_OBJECT[index].mDATA.aAction.aTargetObjectSort,
                    mPLAY.mAVATAR_OBJECT[index].mDATA.aAction.aTargetObjectIndex,
                    mPLAY.mAVATAR_OBJECT[index].mDATA.aAction.aTargetObjectUniqueNumber,
                    mPLAY.mAVATAR_OBJECT[index].mDATA.aAction.aSkillNumber,
                    mPLAY.mAVATAR_OBJECT[index].mDATA.aAction.aSkillGradeNum1,
                    mPLAY.mAVATAR_OBJECT[index].mDATA.aAction.aSkillGradeNum2,
                    0);
            }
        }
    }
}
void AVATAR_OBJECT::A065( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        switch (mDATA.aAction.aSkillNumber)
        {
        case 76:
            if (!mIndex)
            {
                mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
                mDATA.aAction.aSkillNumber = 0;
            }
            break;
        case 77:
            if (!mIndex)
            {
                mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
                mDATA.aAction.aSkillNumber = 0;
            }
            break;
        case 78:
            AVATAR_OBJECT::ProcessBAttackPacketForPartySkill();
            if (!mIndex)
            {
                mDATA.aAction.aSkillNumber = 0;
                mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            }
            break;
        case 79:
            if (!mIndex)
            {
                mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
                mDATA.aAction.aSkillNumber = 0;
            }
            break;
        case 80:
            if (!mIndex)
            {
                if (mDATA.aAction.aSkillValue == 1)
                {
                    AVATAR_OBJECT::ProcessRAttackPacketForPartySkill();
                }
                mDATA.aAction.aSkillNumber = 0;
                mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
                mMAIN.KEYBOARD6_FOR_SKILL();
            }
            break;
        case 81:
            if (!mIndex)
            {
                mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
                mDATA.aAction.aSkillNumber = 0;
            }
            break;
        default:
            return;
        }
    }
}
void AVATAR_OBJECT::A066( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mDATA.aAction.aSkillNumber = 0;
        }
    }
}
void AVATAR_OBJECT::A067( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mDATA.aAction.aSkillNumber = 0;
        }
    }
}
void AVATAR_OBJECT::A068( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mDATA.aAction.aSkillNumber = 0;
        }
    }
}
void AVATAR_OBJECT::A069( int mIndex, float dTime)
{
    int v3; 
    int v5;
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A070( int mIndex, float dTime)
{
    int v3; 
    int v5;
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A071( int mIndex, float dTime)
{
    int v3;
    int v5; 
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A072( int mIndex, float dTime)
{
    int v3;
    int v5; 
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A073( int mIndex, float dTime)
{
    int v4; 
    float v5; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v5 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v5 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v5 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v5 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A074( int mIndex, float dTime)
{
    int v4;
    float v5; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v5 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v5 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v5 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v5 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A075( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mDATA.aAction.aSkillNumber = 0;
        }
    }
}
void AVATAR_OBJECT::A076( int mIndex, float dTime)
{
    int v4;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aType = 2 * mFACTOR.GetWeaponClass2(mDATA.aEquipForView);
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        if (!mIndex)
        {
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mDATA.aAction.aSkillNumber = 0;
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A081( int mIndex, float dTime)
{
    int v4; 
    float v5; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v5 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v5 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v5 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v5 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A082( int mIndex, float dTime)
{
    int v4; 
    float v5; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v5 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v5 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v5 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v5 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A083( int mIndex, float dTime)
{
    int v4; 
    float v5;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v5 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v5 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v5 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v5 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A085( int mIndex, float dTime)
{
    int v3; 
    int v5;
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A086( int mIndex, float dTime)
{
    int v3;
    int v5; 
    float v6;

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A087( int mIndex, float dTime)
{
    int v3; 
    int v5; 
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A088( int mIndex, float dTime)
{
    int v3; 
    int v5; 
    float v6; 

    if (mDATA.aAnimalAbsorbState)
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v5 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v6 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v6 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v6 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v6 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v5)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            if (!mMAIN.KEYBOARD6_FOR_SKILL())
            {
                v3 = mDATA.aAction.aTargetObjectSort;
                if (v3 == 2 || v3 == 3)
                {
                    mMAIN.ProcessForGetAvatar3();
                }
                else if (v3 == 5)
                {
                    mMAIN.ProcessForGetMonster3();
                }
            }
        }
    }
}
void AVATAR_OBJECT::A089( int mIndex, float dTime)
{
    int v4; 
    float v5; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v5 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v5 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v5 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v5 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A090( int mIndex, float dTime)
{
    int v4; 
    float v5;

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v5 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v5 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v5 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v5 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A091( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 92;
        mDATA.aAction.aFrame = 0.0;
        mDATA.mFishingStep = 1;
        if (!mIndex)
        {
            mTRANSFER.T_FISHING_RESULT_SEND(1, 1);
            AVATAR_OBJECT::PlayActionSound(0);
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
}
void AVATAR_OBJECT::A092( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.mFishingState == 1)
    {
        if (mDATA.aAction.aFrame >= v4)
        {
            mDATA.aAction.aFrame = 0.0f;
            return;
        }
        if (mDATA.mFishingStep == 2 || mDATA.mFishingStep == 3)
        {
            mDATA.aAction.aSort = 93;
            mDATA.aAction.aFrame = 0.0f;
            if (!mIndex)
            {
                AVATAR_OBJECT::PlayActionSound(0);
                mDATA.aAction.aSkillNumber = 0;
                mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            }
        }
        return;
    }
    else
    {
        mDATA.aAction.aSort = 93;
        mDATA.aAction.aFrame = 0.0f;
        mDATA.mFishingStep = 0;
    }
    if (!mIndex)
    {
        AVATAR_OBJECT::PlayActionSound(0);
        mDATA.aAction.aSkillNumber = 0;
        mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
    }
    /*if (mDATA.mFishingState == 1)
    {
        if (mDATA.mFishingStep == 2 && mDATA.aAction.aFrame < v4)
            return;
        if (mDATA.mFishingStep == 2 && mDATA.aAction.aFrame > v4)
        {
            mDATA.aAction.aFrame = 0.0f;
            return;
        }
    }
    else
    {
        mDATA.aAction.aSort = 93;
        mDATA.mFishingStep = 3;
    }
    mDATA.aAction.aFrame = 0.0;
    if (mDATA.mFishingStep == 3 && mDATA.mFishingState == 1)
    {
        mDATA.aAction.aSort = 93;
        mDATA.mFishingStep = 3;
    }
    if (!mIndex)
    {
        if (mDATA.mFishingStep == 3 && mDATA.mFishingState == 1)
        {
            mTRANSFER.T_FISHING_RESULT_SEND(1, 0);
        }
        AVATAR_OBJECT::PlayActionSound(0);
        mDATA.aAction.aSkillNumber = 0;
        mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
    }*/
}
void AVATAR_OBJECT::A093( int mIndex, float dTime)
{
    char* v3;
    int v4;
    int v6; 

    if (mDATA.aAnimalAbsorbState)
        v6 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v6 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v6)
    {
        mDATA.aAction.aFrame = 0.0f;
        if ( mDATA.mFishingStep == 2 )
        {
            mDATA.aAction.aSort = 94;
        }
        else if (mDATA.mFishingStep == 3)
        {
            mDATA.aAction.aSort = 95;
        }
        if (mDATA.mFishingState == 0)
        {
            mDATA.aAction.aSort = 1;
            mDATA.mFishingStep = 0;
        }
        if (!mIndex)
        {
            if (mDATA.mFishingStep == 2)
            {
                mTRANSFER.T_FISHING_REWARD_SEND();
            }
            else if (mDATA.mFishingStep == 3)
            {
                mBASICUI.Insert1(mMESSAGE.Return(1978), 15);
            }
            AVATAR_OBJECT::PlayActionSound(0);
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
    /*if (mDATA.aAction.aFrame >= v6)
    {
        mDATA.aAction.aFrame = 0.0;
        if (mDATA.mFishingStep == 4)
        {
            mDATA.aAction.aSort = 94;
        }
        else if (mDATA.mFishingStep == 5)
        {
            mDATA.aAction.aSort = 95;
        }
        if (!mDATA.mFishingState)
        {
            mDATA.aAction.aSort = 1;
            mDATA.mFishingStep = 0;
        }
        if (!mIndex)
        {
            if (mDATA.mFishingStep == 4)
            {
                mTRANSFER.T_FISHING_REWARD_SEND();
            }
            else if (mDATA.mFishingStep == 5)
            {
                v4 = mFONTCOLOR.mData[44];
                v3 = mMESSAGE.Return(1978);
                mBASICUI.Insert1(v3, v4);
            }
            if (!mDATA.mFishingState)
            {
                mTRANSFER.T_FISHING_RESULT_SEND( 3, mDATA.mFishingStep );
            }
            AVATAR_OBJECT::PlayActionSound(0);
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }*/
}
void AVATAR_OBJECT::A094( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 91;
        mDATA.aAction.aFrame = 0.0;
        mDATA.mFishingStep = 1;
        if (!mDATA.mFishingState)
        {
            mDATA.aAction.aSort = 1;
            mDATA.mFishingStep = 0;
        }
        if (!mIndex)
        {
            AVATAR_OBJECT::PlayActionSound(0);
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
}
void AVATAR_OBJECT::A095( int mIndex, float dTime)
{
    int v4; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    mDATA.aAction.aFrame = dTime * 30.0 + mDATA.aAction.aFrame;
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 91;
        mDATA.aAction.aFrame = 0.0;
        mDATA.mFishingStep = 1;
        if (!mDATA.mFishingState)
        {
            mDATA.aAction.aSort = 1;
            mDATA.mFishingStep = 0;
        }
        if (!mIndex)
        {
            AVATAR_OBJECT::PlayActionSound(0);
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
        }
    }
}
void AVATAR_OBJECT::A096( int mIndex, float dTime)
{
    int v4; 
    int v5;
    int v7; 
    float v8; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v8 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v8 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v8 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v8 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A097( int mIndex, float dTime)
{
    int v4; 
    int v5;
    int v7; 
    float v8; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v8 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v8 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v8 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v8 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}
void AVATAR_OBJECT::A098( int mIndex, float dTime)
{
    int v4; 
    int v5;
    int v7; 
    float v8; 

    if (mDATA.aAnimalAbsorbState)
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            0,
            mIndex == 0);
    else
        v4 = mGDATA.ReturnCharacterMotionFrameNum(
            mDATA.aPreviousTribe,
            mDATA.aGender,
            mDATA.aAction.aType,
            mDATA.aAction.aSort,
            mDATA.aLevel1,
            mDATA.aLevel2,
            mDATA.aAnimalNumber,
            mIndex == 0);
    v8 = mFACTOR.GetAttackSpeed(mDATA.aEffectValueForView, mDATA.aEquipForView);
    if (v8 > AVATAR_OBJECT::MiniAttackSpeed(mDATA.aEffectValueForView) && v8 < AVATAR_OBJECT::MaxAttackSpeed(mDATA.aEffectValueForView))
    {
        mDATA.aAction.aFrame = dTime * v8 * 0.300000011920929 + mDATA.aAction.aFrame;
    }
    if (mDATA.aAction.aFrame >= v4)
    {
        mDATA.aAction.aSort = 1;
        mDATA.aAction.aFrame = 0.0;
        mCheckValidForAttack = 0;
        if (!mIndex)
        {
            mDATA.aAction.aSkillNumber = 0;
            mTRANSFER.T_UPDATE_AVATAR_ACTION(&mDATA.aAction);
            mMAIN.KEYBOARD6_FOR_SKILL();
        }
    }
}











// Class of MONSTER_OBJECT

void MONSTER_OBJECT::Init()
{
    mCheckValidState = FALSE;
}

void MONSTER_OBJECT::Free()
{
    mCheckValidState = FALSE;
}

void MONSTER_OBJECT::PlayActionSound( int mIndex)
{
    GSOUND* v2;

    if (mCheckValidState)
    {
        v2 = mGDATA.ReturnMonsterSound( mMONSTER_INFO->mDataSortNumber3D - 1, mMONSTER.mAction.aSort );
        GSOUND::Play(v2, mMONSTER.mAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
    }
}
void MONSTER_OBJECT::DrawShadow( int mIndex, float dTime)
{
    float tYAngle; 
    float tYAnglea; 
    float tYAngleb; 
    float a2; 
    GMOTION* tMOTION; 

    if (mCheckValidState)
    {
        if (mUTIL.GetLengthXYZ(mMONSTER.mAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation) <= 300.0)
        {
            a2 = (float)mMONSTER_INFO->mSize[1];
            if (mUTIL.CheckPossibleDrawMeWithCamera(mMONSTER.mAction.aLocation, a2))
            {
                tMOTION = mGDATA.ReturnMonsterMotion( mMONSTER_INFO->mDataSortNumber3D - 1, mMONSTER.mAction.aSort);
                tYAngle = (float)mMONSTER_INFO->mSize[1];
                if (mMatureMode)
                    GSOBJECT::DisplaySObjectShadow(
                        mGDATA.mSOB_001_23[mMONSTER_INFO->mDataSortNumber3D - 1],
                        0.0,
                        mLocation,
                        mFront,
                        tYAngle,
                        &mGDATA.mZONE,
                        tMOTION,
                        1);
                else
                    GSOBJECT::DisplaySObjectShadow(
                        mGDATA.mSOB_001_23[mMONSTER_INFO->mDataSortNumber3D - 1],
                        mMONSTER.mAction.aFrame,
                        mMONSTER.mAction.aLocation,
                        mMONSTER.mAction.aFront,
                        tYAngle,
                        &mGDATA.mZONE,
                        tMOTION,
                        1);
                if (mMONSTER_INFO->mType == 2)
                {
                    tYAnglea = (float)mMONSTER_INFO->mSize[1];
                    if (mGAMEOPTION.tMatureMode == 1)
                    {
                        GSOBJECT::DisplaySObjectShadow(
                            &mGDATA.mSOB_001_24[mMONSTER_INFO->mDataSortNumber3D - 1][3 - (int)((double)mMONSTER.mLifeValue * 100.0 / (double)mMONSTER_INFO->mLife) / 30],
                            mMONSTER.mAction.aFrame,
                            mMONSTER.mAction.aLocation,
                            mMONSTER.mAction.aFront,
                            tYAnglea,
                            &mGDATA.mZONE,
                            tMOTION,
                            1);
                        return;
                    }
                    goto LABEL_10;
                }
                if (mMONSTER_INFO->mIndex == 1141 || mMONSTER_INFO->mIndex == 1142 || mMONSTER_INFO->mIndex == 1143 || mMONSTER_INFO->mIndex == 1144)
                {
                    tYAnglea = (float)mMONSTER_INFO->mSize[1];
                    if (mMONSTER.mLifeValue > 0)
                    {
                    LABEL_10:
                        GSOBJECT::DisplaySObjectShadow(
                            mGDATA.mSOB_001_24[mMONSTER_INFO->mDataSortNumber3D - 1],
                            mMONSTER.mAction.aFrame,
                            mMONSTER.mAction.aLocation,
                            mMONSTER.mAction.aFront,
                            tYAnglea,
                            &mGDATA.mZONE,
                            tMOTION,
                            1);
                        return;
                    }
                    GSOBJECT::DisplaySObjectShadow(
                        mGDATA.mSOB_001_24[mMONSTER_INFO->mDataSortNumber3D - 1],
                        mMONSTER.mAction.aFrame,
                        mMONSTER.mAction.aLocation,
                        mMONSTER.mAction.aFront,
                        tYAnglea,
                        &mGDATA.mZONE,
                        tMOTION,
                        1);
                }
                else
                {
                    tYAngleb = (float)mMONSTER_INFO->mSize[1];
                    GSOBJECT::DisplaySObjectShadow(
                        mGDATA.mSOB_001_24[mMONSTER_INFO->mDataSortNumber3D - 1],
                        mMONSTER.mAction.aFrame,
                        mMONSTER.mAction.aLocation,
                        mMONSTER.mAction.aFront,
                        tYAngleb,
                        &mGDATA.mZONE,
                        tMOTION,
                        1);
                }
            }
        }
    }
}
void MONSTER_OBJECT::DrawInfo( int mIndex, float dTime)
{
    int v3;
    float a2; 
    float tLoc[3];

    if (mCheckValidState)
    {
        a2 = (float)mMONSTER_INFO->mSize[1];
        if (mUTIL.CheckPossibleDrawMeWithCamera(mMONSTER.mAction.aLocation, a2))
        {
            tLoc[0] = mMONSTER.mAction.aLocation[0];
            tLoc[1] = (double)(mMONSTER_INFO->mSize[1] + mMONSTER_INFO->mSize[3] + 1) + mMONSTER.mAction.aLocation[1];
            tLoc[2] = mMONSTER.mAction.aLocation[2];
            v3 = mUTIL.ReturnMonsterNameColor(this);
            mUTIL.DrawFont3D(mMONSTER_INFO->mName, tLoc, v3);
        }
    }
}

void MONSTER_OBJECT::InitForCreate( int mIndex)
{
    int v2;
    int v3;
    int i; 
    int j; 

    if (mCheckValidState)
    {
        mMonsterActionState = 0;
        mMatureMode = 0;
        mEffectForBossDeath = 0;
        mEffectForBossSpawn = 0;
        mSpecialEffectForBoss = 0;
        switch (mMONSTER_INFO->mDataSortNumber3D)
        {
        case 42:
        case 44:
        case 46:
        case 59:
        case 61:
        case 64:
        case 65:
        case 67:
        case 74:
        case 75:
        case 76:
        case 85:
        case 89:
            v3 = mMONSTER_INFO->mSpecialType;
            if (v3 >= 2 && v3 <= 6)
            {
                for (i = 0; i < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[i].mCheckValidState; ++i)
                {
                    ;
                }
                if (i < mPLAY.MAX_EFFECT_OBJECT)
                {
                    mPLAY.mEFFECT_OBJECT[i].SetZone175TypeMonsterEffect( 1, this);
                }
            }
            break;
        case 48:
        case 53:
        case 62:
        case 66:
        case 72:
        case 81:
            v2 = mMONSTER_INFO->mSpecialType;
            if (v2 >= 2 && v2 <= 6)
            {
                for (j = 0; j < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[j].mCheckValidState; ++j)
                {
                    ;
                }
                if (j < mPLAY.MAX_EFFECT_OBJECT)
                {
                    mPLAY.mEFFECT_OBJECT[j].SetZone175TypeMonsterEffect( 2, this);
                }
            }
            break;
        default:
            return;
        }
    }
}

void MONSTER_OBJECT::InitForAction( int mIndex)
{
    double v2;
    GMOTION* v3; 
    int v4;
    int v5; 
    float v6; 
    float v7; 
    float v8; 
    float v9; 
    float v11;
    float v12;
    float v13;
    float v14;
    float v15;
    float v16;
    float tCoord[3]; 
    int i; 
    float v19; 

    if (mCheckValidState)
    {
        PlayActionSound(mIndex);
        mMonsterActionState = 0;
        mCheckMonsterIsDead = 0;
        switch (mMONSTER.mAction.aSort)
        {
        case 0:
            if (mMONSTER_INFO->mType == 4)
            {
                if ((mMYINFO.mAvatarInfo.aQuestInfo[2] == 1 || mMYINFO.mAvatarInfo.aQuestInfo[2] == 5) && mMYINFO.mAvatarInfo.aQuestInfo[3] == mMONSTER_INFO->mIndex)
                {
                    if (strcmp(mMONSTER_INFO->mChatInfo[0], ""))
                    {
                        mEffectForBossDeath = 1;
                        mEffectForBossDeathFrame = 0.0;
                        mBOARDUI.Set(6, 1, mMONSTER_INFO->mChatInfo[0], "");
                    }
                }
            }
            else
            {
                if (strcmp(mMONSTER_INFO->mChatInfo[0], ""))
                    mBOARDUI.Set(8, 1, mMONSTER_INFO->mChatInfo[0], "");
                if (mMONSTER_INFO->mIndex >= 589 && mMONSTER_INFO->mIndex <= 600)
                    GSOUND::Play(&mGDATA.mSOUND_5[398], mMONSTER.mAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
            }
            return;
        case 5:
            switch (mMONSTER_INFO->mAttackType)
            {
            case 1:
            case 2:
                mMonsterActionState = 1;
                mMonsterAttackSort = 1;
                mMonsterAttackType = 1;
                mMonsterAttackPacket = 0;
                break;
            case 3:
            case 4:
                if (mUTIL.ReturnMonsterBulletObject(mMONSTER_INFO->mDataSortNumber3D) == -1)
                {
                    mMonsterActionState = 1;
                    mMonsterAttackSort = 1;
                }
                else
                {
                    mMonsterActionState = 1;
                    mMonsterAttackSort = 2;
                }
                mMonsterAttackType = 1;
                mMonsterAttackPacket = 0;
                break;
            case 5:
            case 6:
                mMonsterActionState = 1;
                mMonsterAttackSort = 1;
                mMonsterAttackType = 2;
                mMonsterAttackPacket = 0;
                break;
            default:
                return;
            }
            return;
        case 7:
            mMonsterActionState = 1;
            mMonsterAttackSort = 0;
            mMonsterAttackType = 0;
            mMonsterAttackPacket = 0;
            return;
        case 12:
            mCheckMonsterIsDead = 1;
            if (mAttackInfo.mAttackCriticalExist)
            {
                mDeathSpeed = (float)(2 * mMONSTER_INFO->mDeathSpeed);
            }
            else
            {
                mDeathSpeed = (float)mMONSTER_INFO->mDeathSpeed;
            }
            if (mMONSTER.mAction.aSkillNumber == 1)
            {
                if (mGAMEOPTION.tMatureMode == 1)
                {
                    mMatureMode = 1;
                    v12 = mMONSTER.mAction.aFront * 0.01745329238474369;
                    v9 = sin(v12);
                    v13 = v9;
                    v11 = mMONSTER.mAction.aFront * 0.01745329238474369;
                    v8 = cos(v11);
                    v15 = v8;
                    v7 = v8 * v8 + (float)0.0 * (float)0.0 + v13 * v13;
                    v6 = sqrt(v7);
                    v19 = v6;
                    if (v6 > 0.0)
                    {
                        v13 = v9 / v19;
                        v15 = v8 / v19;
                    }
                    v14 = v13 * 50.0;
                    v16 = v15 * 50.0;
                    mPreLocation[0] = v14;
                    mPreLocation[1] = (float)(rand() % 51 + 50);
                    mPreLocation[2] = v16;
                    mMatureRand = rand() % 6 + 5;
                    mPlayMatureSound = 0;
                    v3 = mGDATA.ReturnMonsterMotion( mMONSTER_INFO->mDataSortNumber3D - 1, mMONSTER.mAction.aSort);
                    GSOBJECT::GetSObjectCoord( &mGDATA.mMONSTER_BLOOD_EFFECT[mMONSTER_INFO->mDataSortNumber3D - 1][0], 1, tCoord, 0.0, mMONSTER.mAction.aLocation, mMONSTER.mAction.aFront, v3, 1);
                    mHeightForMature = tCoord[1] - mMONSTER.mAction.aLocation[1];
                    memcpy(mLocation, mMONSTER.mAction.aLocation, sizeof(mLocation));
                    mFront = mMONSTER.mAction.aFront;
                }
            }
            else if (mMONSTER_INFO->mIndex < 589 || mMONSTER_INFO->mIndex > 600)
            {
                GSOUND::Play( &mGDATA.mSOUND_5[289], mMONSTER.mAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
            }
            else
            {
                GSOUND::Play( &mGDATA.mSOUND_5[399], mMONSTER.mAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
            }
            if (mMONSTER_INFO->mDamageType != 2)
            {
                goto LABEL_58;
            }
            for (i = 0; i < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[i].mCheckValidState; ++i)
            {
                ;
            }
            if (i == mPLAY.MAX_EFFECT_OBJECT)
            {
                goto LABEL_58;
            }
            if (mMONSTER.mAction.aSkillNumber == 1)
            {
                mPLAY.mEFFECT_OBJECT[i].SetBloodForMonster(this, 7);
            }
            else
            {
                v5 = mAttackInfo.mAttackActionValue1;
                if (v5 != 1)
                {
                    if (v5 != 2)
                    {
                        goto LABEL_58;
                    }
                LABEL_56:
                    mPLAY.mEFFECT_OBJECT[i].SetBloodForMonster(this, 5);
                    goto LABEL_58;
                }
                v4 = mAttackInfo.mAttackActionValue2;
                switch (v4)
                {
                case 1:
                    mPLAY.mEFFECT_OBJECT[i].SetBloodForMonster(this, 4);
                    break;
                case 2:
                    goto LABEL_56;
                case 3:
                    mPLAY.mEFFECT_OBJECT[i].SetBloodForMonster(this, 6);
                    break;
                }
            }
        LABEL_58:
            if (mMONSTER_INFO->mType == 4)
            {
                if ((mMYINFO.mAvatarInfo.aQuestInfo[2] == 1 || mMYINFO.mAvatarInfo.aQuestInfo[2] == 5) && mMYINFO.mAvatarInfo.aQuestInfo[3] == mMONSTER_INFO->mIndex && strcmp(mMONSTER_INFO->mChatInfo[1], ""))
                {
                    mEffectForBossSpawn = 1;
                    mEffectForBossSpawnFrame = 0.0;
                    mBOARDUI.Set(7, 1, mMONSTER_INFO->mChatInfo[1], "");
                }
            }
            else if (strcmp(mMONSTER_INFO->mChatInfo[1], ""))
            {
                mBOARDUI.Set(9, 1, mMONSTER_INFO->mChatInfo[1], "");
            }
            break;
        default:
            return;
        }
    }
}

void MONSTER_OBJECT::Update( int mIndex, float dTime)
{
    BOOL tPossibleAttack;
    float v8[3];
    float x[3];
    float tPostYCoord;
    int i;


    if (mCheckValidState)
    {
        if (mEffectForBossDeath)
        {
            mEffectForBossDeathFrame = dTime * 30.0 + mEffectForBossDeathFrame;
            if (mEffectForBossDeathFrame >= GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[67]))
            {
                mEffectForBossDeath = 0;
            }
        }
        if (mEffectForBossSpawn)
        {
            mEffectForBossSpawnFrame = dTime * 30.0 + mEffectForBossSpawnFrame;
            if (mEffectForBossSpawnFrame >= GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[68]))
            {
                mEffectForBossSpawn = 0;
            }
        }
        if (mSpecialEffectForBoss)
        {
            mSpecialEffectForBossFrame = dTime * 30.0 + mSpecialEffectForBossFrame;
            if (mSpecialEffectForBossFrame >= GMOBJECT::GetTotalFrameNum(&mGDATA.mMONSTERMODEL[138]))
            {
                mSpecialEffectForBoss = 0;
            }
        }
        if (mMONSTER.mAction.aSort == 5)
        {
            if (mMonsterActionState == 1)
            {
                tPossibleAttack = FALSE;
                if (mMonsterAttackPacket)
                {
                    if (!mPLAY.CheckMAttackFrame(mMONSTER_INFO, mMONSTER.mAction.aFrame))
                    {
                        mMonsterAttackPacket = 0;
                    }
                }
                else if (mPLAY.CheckMAttackFrame(mMONSTER_INFO, mMONSTER.mAction.aFrame))
                {
                    mMonsterAttackPacket = 1;
                    tPossibleAttack = TRUE;
                }
                if (tPossibleAttack == TRUE)
                {
                    if (mMONSTER_INFO->mDataSortNumber3D == 113 || mMONSTER_INFO->mSpecialType == 18)
                    {
                        goto ATTACK;
                    }
                    for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || mPLAY.mAVATAR_OBJECT[i].mIndex != mMONSTER.mAction.aTargetObjectIndex || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != mMONSTER.mAction.aTargetObjectUniqueNumber); ++i)
                    {
                        ;
                    }
                    if (i != mPLAY.MAX_AVATAR_OBJECT)
                    {
                    ATTACK:
                        switch (mMonsterAttackSort)
                        {
                        case 1:
                            switch (mMonsterAttackType)
                            {
                            case 1: ProcessGAttackPacket(); break;
                            case 2: ProcessRAttackPacket(); break;
                            }
                            break;
                        case 2:
                            ProcessBAttackPacket();
                            break;
                        }
                    }
                }
            }
        }
        else if (mMONSTER.mAction.aSort == 7 && mMonsterActionState == 1)
        {
            tPossibleAttack = FALSE;
            if (mMonsterAttackPacket)
            {
                if (!mPLAY.CheckMSkillFrame(mMONSTER_INFO, mMONSTER.mAction.aFrame))
                {
                    mMonsterAttackPacket = 0;
                }
            }
            else if (mPLAY.CheckMSkillFrame(mMONSTER_INFO, mMONSTER.mAction.aFrame))
            {
                mMonsterAttackPacket = 1;
                tPossibleAttack = TRUE;
            }
            if (tPossibleAttack == 1)
            {
                ProcessSAttackPacket();
            }
        }
        if (mMatureMode)
        {
            if (mPlayMatureSound < mMatureRand)
            {
                memcpy(&v8[0], &mLocation[0], sizeof(v8));
                mPreLocation[1] = dTime * -300.0f + mPreLocation[1];
                mLocation[0] = mPreLocation[0] * dTime + mLocation[0];
                mLocation[1] = mPreLocation[1] * dTime + mLocation[1];
                mLocation[2] = mPreLocation[2] * dTime + mLocation[2];
                memcpy(&x[0], &mLocation[0], sizeof(x));
                tPostYCoord = v8[1] + 20.0;
                if (mGDATA.mZONE.mWORLD.GetYCoord(x[0], x[2], &x[1], 1, tPostYCoord, 0, 0))
                {
                    if (mLocation[1] < x[1] - mHeightForMature)
                    {
                        ++mPlayMatureSound;
                        mLocation[1] = x[1] - mHeightForMature;
                        if (mPlayMatureSound == 1)
                        {
                            GSOUND::Play(&mGDATA.mSOUND_5[26], mLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
                        }
                    }
                }
            }
        }
        switch (mMONSTER.mAction.aSort)
        {
        case 0:
            A001(mIndex, dTime);
            break;
        case 1:
            A002(mIndex, dTime);
            break;
        case 3:
            A004(mIndex, dTime);
            break;
        case 4:
            A005(mIndex, dTime);
            break;
        case 5:
            A006(mIndex, dTime);
            break;
        case 7:
            A008(mIndex, dTime);
            break;
        case 8:
            A009(mIndex, dTime);
            break;
        case 12:
            A013(mIndex, dTime);
            break;
        case 19:
            A020(mIndex, dTime);
            break;
        default:
            return;
        }
    }
}

void MONSTER_OBJECT::Draw( int tDrawSort, int mIndex, float dTime)
{
    float tRange;
    float tA[3];
    float tL[3];
    GMOTION* tMOTION;
    int tTowerIndex;
    int tTowerState1;
    int tTowerState2;
    int tDataIndex;

    if (!mCheckValidState)
    {
        return;
    }
    if (tDrawSort < 1)
    {
        return;
    }
    if (tDrawSort > 2)
    {
        return;
    }
    tRange = (float)mMONSTER_INFO->mSize[1];
    if (!mUTIL.CheckPossibleDrawMeWithCamera(mMONSTER.mAction.aLocation, tRange))
    {
        return;
    }
    tA[0] = 0.0;
    tA[1] = mMONSTER.mAction.aFront;
    tA[2] = 0.0;
    if (mMONSTER_INFO->mIndex >= 589 && mMONSTER_INFO->mIndex <= 600)
    {
        tTowerIndex = mTOWERBUILDUI.ReturnTowerIndex(mMYINFO.mPresentZoneNumber);
        if (tTowerIndex != -1)
        {
            tTowerState1 = mTOWERBUILDUI.mTower[tTowerIndex] % 100;
            tTowerState2 = mTOWERBUILDUI.mTower[tTowerIndex] / 100;
            if (tTowerState2 == 1 || tTowerState2 == 3 || tTowerState2 == 5 || tTowerState2 == 7)
            {
                tDataIndex = mUTIL.ReturnTower3DIndex(tTowerState1, tTowerState2);
                if (tDataIndex != -1)
                {
                    GMOBJECT::DisplayMObject( &mGDATA.mMONSTERMODEL[tDataIndex], tDrawSort, mMONSTER.mAction.aFrame, mMONSTER.mAction.aLocation, tA, 1);
                    if (mMONSTER.mAction.aFrame >= 41.0)
                    {
                        mMONSTER.mAction.aFrame = 0.0;
                    }
                }
                return;
            }
            if (tTowerState1 == 3)
            {
                GMOBJECT::DisplayMObject( &mGDATA.mMODEL3[tTowerState2 / 2 + 235], tDrawSort, 0.0, mMONSTER.mAction.aLocation, tA, 1);
            }
        }
    }
    tMOTION = mGDATA.ReturnMonsterMotion(mMONSTER_INFO->mDataSortNumber3D - 1, mMONSTER.mAction.aSort);
    tRange = (float)mMONSTER_INFO->mSize[1];
    if (mMatureMode)
    {
        GSOBJECT::DisplaySObject( mGDATA.mSOB_001_23[mMONSTER_INFO->mDataSortNumber3D - 1], tDrawSort, 0.0, mLocation, mFront, tRange, tMOTION, 1);
    }
    else
    {
        GSOBJECT::DisplaySObject( mGDATA.mSOB_001_23[mMONSTER_INFO->mDataSortNumber3D - 1], tDrawSort, mMONSTER.mAction.aFrame, mMONSTER.mAction.aLocation, mMONSTER.mAction.aFront, tRange, tMOTION, 1);
    }

    if (mMONSTER_INFO->mType == 2)
    {
        if (mGAMEOPTION.tMatureMode != 1)
        {
            tRange = (float)mMONSTER_INFO->mSize[1];
            GSOBJECT::DisplaySObject(&mGDATA.mSOB_001_24[mMONSTER_INFO->mDataSortNumber3D - 1][0], tDrawSort, mMONSTER.mAction.aFrame, mMONSTER.mAction.aLocation, mMONSTER.mAction.aFront, tRange, tMOTION, 1);
        }
        else
        {
            tDataIndex = 3 - (int)((double)mMONSTER.mLifeValue * 100.0 / (double)mMONSTER_INFO->mLife) / 30;
            tRange = (float)mMONSTER_INFO->mSize[1];
            GSOBJECT::DisplaySObject( &mGDATA.mSOB_001_24[mMONSTER_INFO->mDataSortNumber3D - 1][tDataIndex], tDrawSort, mMONSTER.mAction.aFrame, mMONSTER.mAction.aLocation, mMONSTER.mAction.aFront, tRange, tMOTION, 1);
        }
    }
    else
    {
        if (mMONSTER_INFO->mIndex == 1141 || mMONSTER_INFO->mIndex == 1142 || mMONSTER_INFO->mIndex == 1143 || mMONSTER_INFO->mIndex == 1144)
        {
            tRange = (float)mMONSTER_INFO->mSize[1];
            if (mMONSTER.mLifeValue > 0)
            {
                GSOBJECT::DisplaySObject( mGDATA.mSOB_001_24[mMONSTER_INFO->mDataSortNumber3D - 1], tDrawSort, mMONSTER.mAction.aFrame, mMONSTER.mAction.aLocation, mMONSTER.mAction.aFront, tRange, tMOTION, 1);
            }
            else
            {
                GSOBJECT::DisplaySObject( mGDATA.mSOB_001_24[mMONSTER_INFO->mDataSortNumber3D - 1], tDrawSort, mMONSTER.mAction.aFrame, mMONSTER.mAction.aLocation, mMONSTER.mAction.aFront, tRange, tMOTION, 1);
            }
        }
        else
        {
            tRange = (float)mMONSTER_INFO->mSize[1];
            GSOBJECT::DisplaySObject(mGDATA.mSOB_001_24[mMONSTER_INFO->mDataSortNumber3D - 1], tDrawSort, mMONSTER.mAction.aFrame, mMONSTER.mAction.aLocation, mMONSTER.mAction.aFront, tRange, tMOTION, 1);
        }
    }
    tA[0] = 0.0f;
    tA[1] = mMONSTER.mAction.aFront;
    tA[2] = 0.0f;
    switch (mMONSTER.mAction.aSort)
    {
    case 0:
        tDataIndex = mUTIL.ReturnMonsterCreateObject(mMONSTER_INFO->mDataSortNumber3D);
        if (tDataIndex != -1)
        {
            GMOBJECT::DisplayMObject(&mGDATA.mMONSTERMODEL[tDataIndex], tDrawSort, mMONSTER.mAction.aFrame, mMONSTER.mAction.aLocation, tA, 1);
        }
        break;
    case 5:
        tDataIndex = mUTIL.ReturnMonsterAttackObject(mMONSTER_INFO->mDataSortNumber3D);
        if (tDataIndex != -1)
        {
            GMOBJECT::DisplayMObject(&mGDATA.mMONSTERMODEL[tDataIndex], tDrawSort, mMONSTER.mAction.aFrame, mMONSTER.mAction.aLocation, tA, 1);
        }
        break;
    case 7:
        tDataIndex = mUTIL.ReturnMonsterSkillObject(mMONSTER_INFO->mDataSortNumber3D);
        if (tDataIndex != -1)
        {
            GMOBJECT::DisplayMObject(&mGDATA.mMONSTERMODEL[tDataIndex], tDrawSort, mMONSTER.mAction.aFrame, mMONSTER.mAction.aLocation, tA, 1);
        }
        break;
    case 12:
        tDataIndex = mUTIL.ReturnMonsterDeathObject(mMONSTER_INFO->mDataSortNumber3D);
        if (tDataIndex != -1)
        { 
            GMOBJECT::DisplayMObject( &mGDATA.mMONSTERMODEL[tDataIndex], tDrawSort, mMONSTER.mAction.aFrame, mMONSTER.mAction.aLocation, tA, 1); 
        }
        break;
    default:
        break;
    }
    if (mEffectForBossDeath)
    {
        GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[67], tDrawSort, mEffectForBossDeathFrame, mMONSTER.mAction.aLocation, tA, 1);
    }
    if (mEffectForBossSpawn)
    {
        GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[68], tDrawSort, mEffectForBossSpawnFrame, mMONSTER.mAction.aLocation, tA, 1);
    }
    if (mSpecialEffectForBoss)
    {
        GMOBJECT::DisplayMObject(&mGDATA.mMONSTERMODEL[138], tDrawSort, mSpecialEffectForBossFrame, mMONSTER.mAction.aLocation, tA, 1);
    }
}


void MONSTER_OBJECT::ProcessGAttackPacket()
{
    ATTACK_FOR_PROTOCOL tAttackInfo; 

    if (mPLAY.mAVATAR_OBJECT[0].mIndex == mMONSTER.mAction.aTargetObjectIndex && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == mMONSTER.mAction.aTargetObjectUniqueNumber)
    {
        tAttackInfo.mCase = 4;
        tAttackInfo.mServerIndex1 = mServerIndex;
        tAttackInfo.mUniqueNumber1 = mUniqueNumber;
        tAttackInfo.mServerIndex2 = mPLAY.mAVATAR_OBJECT[0].mIndex;
        tAttackInfo.mUniqueNumber2 = mPLAY.mAVATAR_OBJECT[0].mUniqueNumber;
        tAttackInfo.mSenderLocation[0] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[0];
        tAttackInfo.mSenderLocation[1] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[1];
        tAttackInfo.mSenderLocation[2] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[2];
        tAttackInfo.mAttackActionValue1 = 1;
        tAttackInfo.mAttackActionValue2 = 0;
        tAttackInfo.mAttackActionValue3 = 0;
        tAttackInfo.mAttackActionValue4 = 0;
        mTRANSFER.T_PROCESS_ATTACK_SEND(&tAttackInfo);
    }
}

void MONSTER_OBJECT::ProcessRAttackPacket()
{
    ATTACK_FOR_PROTOCOL tAttackInfo; 

    if (mMONSTER_INFO->mRadiusInfo[0] >= mUTIL.GetLengthXYZ( mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation, mMONSTER.mAction.aLocation))
    {
        tAttackInfo.mCase = 4;
        tAttackInfo.mServerIndex1 = mServerIndex;
        tAttackInfo.mUniqueNumber1 = mUniqueNumber;
        tAttackInfo.mServerIndex2 = mPLAY.mAVATAR_OBJECT[0].mIndex;
        tAttackInfo.mUniqueNumber2 = mPLAY.mAVATAR_OBJECT[0].mUniqueNumber;
        tAttackInfo.mSenderLocation[0] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[0];
        tAttackInfo.mSenderLocation[1] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[1];
        tAttackInfo.mSenderLocation[2] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[2];
        tAttackInfo.mAttackActionValue1 = 1;
        tAttackInfo.mAttackActionValue2 = 0;
        tAttackInfo.mAttackActionValue3 = 0;
        tAttackInfo.mAttackActionValue4 = 0;
        mTRANSFER.T_PROCESS_ATTACK_SEND(&tAttackInfo);
    }
}

void MONSTER_OBJECT::ProcessBAttackPacket()
{
    int i;

    for (i = 0; i < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[i].mCheckValidState; ++i)
    {
        ;
    }
    if (i != mPLAY.MAX_EFFECT_OBJECT)
    {
        mPLAY.mEFFECT_OBJECT[i].mCheckValidState = 1;
        mPLAY.mEFFECT_OBJECT[i].mEffectIndex = 3;
        mPLAY.mEFFECT_OBJECT[i].mEffectState = 2;
        mPLAY.mEFFECT_OBJECT[i].mUserIndex = mServerIndex;
        mPLAY.mEFFECT_OBJECT[i].mUniqueNumber = mUniqueNumber;
        mPLAY.mEFFECT_OBJECT[i].mDamageSoundSort = mMONSTER_INFO->mDataSortNumber3D;
        mPLAY.mEFFECT_OBJECT[i].mTargetObjType = 1;
        mPLAY.mEFFECT_OBJECT[i].mTargetObjIndex = mMONSTER.mAction.aTargetObjectIndex;
        mPLAY.mEFFECT_OBJECT[i].mTargetObjUniqueNumber = mMONSTER.mAction.aTargetObjectUniqueNumber;
        mPLAY.mEFFECT_OBJECT[i].UNKa1 = 0;
        mPLAY.mEFFECT_OBJECT[i].UNKa4 = 0;
        if (mMONSTER_INFO->mDataSortNumber3D == 113)
        {
            mPLAY.mEFFECT_OBJECT[i].UNKa1 = 1;
            switch (mMONSTER_INFO->mSpecialType)
            {
            case 18:
                mPLAY.mEFFECT_OBJECT[i].mTribe = 0;
                break;
            case 35:
                mPLAY.mEFFECT_OBJECT[i].mTribe = !mMYINFO.mAvatarInfo.aTribe || mMYINFO.mAvatarInfo.aTribe == mPLAY.ReturnAlliance(0);
                break;
            case 36:
                mPLAY.mEFFECT_OBJECT[i].mTribe = mMYINFO.mAvatarInfo.aTribe == 1 || mMYINFO.mAvatarInfo.aTribe == mPLAY.ReturnAlliance(1);
                break;
            case 37:
                mPLAY.mEFFECT_OBJECT[i].mTribe = mMYINFO.mAvatarInfo.aTribe == 2 || mMYINFO.mAvatarInfo.aTribe == mPLAY.ReturnAlliance(2);
                break;
            case 38:
                mPLAY.mEFFECT_OBJECT[i].mTribe = mMYINFO.mAvatarInfo.aTribe == 3 || mMYINFO.mAvatarInfo.aTribe == mPLAY.ReturnAlliance(3);
                break;
            default:
                break;
            }
            mPLAY.mEFFECT_OBJECT[i].UNKa3 = 0.0;
        }
        mPLAY.mEFFECT_OBJECT[i].aSort = mUTIL.ReturnMonsterBulletObject(mMONSTER_INFO->mDataSortNumber3D);
        if (mPLAY.mEFFECT_OBJECT[i].aSort == -1)
        {
            mPLAY.mEFFECT_OBJECT[i].mCheckValidState = 0;
        }
        else
        {
            mPLAY.mEFFECT_OBJECT[i].mEffectFrame = 0.0;
            mPLAY.mEFFECT_OBJECT[i].tLocation1[0] = mMONSTER.mAction.aLocation[0];
            mPLAY.mEFFECT_OBJECT[i].tLocation1[1] = mMONSTER_INFO->mBulletInfo[0] + mMONSTER.mAction.aLocation[1];
            mPLAY.mEFFECT_OBJECT[i].tLocation1[2] = mMONSTER.mAction.aLocation[2];
            mPLAY.mEFFECT_OBJECT[i].tAngle1[0] = 0.0;
            mPLAY.mEFFECT_OBJECT[i].tAngle1[1] = mMONSTER.mAction.aFront;
            mPLAY.mEFFECT_OBJECT[i].tAngle1[2] = 0.0;
            mPLAY.mEFFECT_OBJECT[i].tLocation2[0] = mPLAY.mEFFECT_OBJECT[i].tLocation1[0];
            mPLAY.mEFFECT_OBJECT[i].tLocation2[1] = mPLAY.mEFFECT_OBJECT[i].tLocation1[1];
            mPLAY.mEFFECT_OBJECT[i].tLocation2[2] = mPLAY.mEFFECT_OBJECT[i].tLocation1[2];
            mPLAY.mEFFECT_OBJECT[i].tAngle2[0] = mMONSTER.mAction.aTargetLocation[0];
            mPLAY.mEFFECT_OBJECT[i].tAngle2[1] = mMONSTER.mAction.aTargetLocation[1];
            mPLAY.mEFFECT_OBJECT[i].tAngle2[2] = mMONSTER.mAction.aTargetLocation[2];
            mPLAY.mEFFECT_OBJECT[i].mBulletInfo = mMONSTER_INFO->mBulletInfo[1];
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mCase = 4;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mServerIndex1 = mServerIndex;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mUniqueNumber1 = mUniqueNumber;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mServerIndex2 = mMONSTER.mAction.aTargetObjectIndex;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mUniqueNumber2 = mMONSTER.mAction.aTargetObjectUniqueNumber;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mSenderLocation[0] = 0.0;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mSenderLocation[1] = 0.0;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mSenderLocation[2] = 0.0;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mAttackActionValue1 = 1;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mAttackActionValue2 = 0;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mAttackActionValue3 = 0;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mAttackActionValue4 = 0;
        }
    }
}

void MONSTER_OBJECT::ProcessSAttackPacket()
{
    int i; 

    for (i = 0; i < mPLAY.MAX_EFFECT_OBJECT && mPLAY.mEFFECT_OBJECT[i].mCheckValidState; ++i)
    {
        ;
    }
    if (i != mPLAY.MAX_EFFECT_OBJECT)
    {
        mPLAY.mEFFECT_OBJECT[i].mCheckValidState = 1;
        mPLAY.mEFFECT_OBJECT[i].mEffectIndex = 3;
        mPLAY.mEFFECT_OBJECT[i].mEffectState = 2;
        mPLAY.mEFFECT_OBJECT[i].mUserIndex = mServerIndex;
        mPLAY.mEFFECT_OBJECT[i].mUniqueNumber = mUniqueNumber;
        mPLAY.mEFFECT_OBJECT[i].mDamageSoundSort = mMONSTER_INFO->mDataSortNumber3D;
        mPLAY.mEFFECT_OBJECT[i].mTargetObjType = 1;
        mPLAY.mEFFECT_OBJECT[i].mTargetObjIndex = mMONSTER.mAction.aTargetObjectIndex;
        mPLAY.mEFFECT_OBJECT[i].mTargetObjUniqueNumber = mMONSTER.mAction.aTargetObjectUniqueNumber;
        mPLAY.mEFFECT_OBJECT[i].UNKa1 = 0;
        mPLAY.mEFFECT_OBJECT[i].UNKa4 = 1;
        mPLAY.mEFFECT_OBJECT[i].aSort = mUTIL.ReturnMonsterBulletObject(mMONSTER_INFO->mDataSortNumber3D);
        if (mPLAY.mEFFECT_OBJECT[i].aSort == -1)
        {
            mPLAY.mEFFECT_OBJECT[i].mCheckValidState = 0;
        }
        else
        {
            mPLAY.mEFFECT_OBJECT[i].mEffectFrame = 0.0;
            mPLAY.mEFFECT_OBJECT[i].tLocation1[0] = mMONSTER.mAction.aLocation[0];
            mPLAY.mEFFECT_OBJECT[i].tLocation1[1] = mMONSTER_INFO->mBulletInfo[0] + mMONSTER.mAction.aLocation[1];
            mPLAY.mEFFECT_OBJECT[i].tLocation1[2] = mMONSTER.mAction.aLocation[2];
            mPLAY.mEFFECT_OBJECT[i].tAngle1[0] = 0.0;
            mPLAY.mEFFECT_OBJECT[i].tAngle1[1] = mMONSTER.mAction.aFront;
            mPLAY.mEFFECT_OBJECT[i].tAngle1[2] = 0.0;
            mPLAY.mEFFECT_OBJECT[i].tLocation2[0] = mPLAY.mEFFECT_OBJECT[i].tLocation1[0];
            mPLAY.mEFFECT_OBJECT[i].tLocation2[1] = mPLAY.mEFFECT_OBJECT[i].tLocation1[1];
            mPLAY.mEFFECT_OBJECT[i].tLocation2[2] = mPLAY.mEFFECT_OBJECT[i].tLocation1[2];
            mPLAY.mEFFECT_OBJECT[i].tAngle2[0] = mMONSTER.mAction.aTargetLocation[0];
            mPLAY.mEFFECT_OBJECT[i].tAngle2[1] = mMONSTER.mAction.aTargetLocation[1];
            mPLAY.mEFFECT_OBJECT[i].tAngle2[2] = mMONSTER.mAction.aTargetLocation[2];
            mPLAY.mEFFECT_OBJECT[i].mBulletInfo = mMONSTER_INFO->mBulletInfo[1];
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mCase = 4;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mServerIndex1 = mServerIndex;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mUniqueNumber1 = mUniqueNumber;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mServerIndex2 = mMONSTER.mAction.aTargetObjectIndex;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mUniqueNumber2 = mMONSTER.mAction.aTargetObjectUniqueNumber;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mSenderLocation[0] = 0.0;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mSenderLocation[1] = 0.0;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mSenderLocation[2] = 0.0;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mAttackActionValue1 = 1;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mAttackActionValue2 = 0;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mAttackActionValue3 = 0;
            mPLAY.mEFFECT_OBJECT[i].tAttackInfo.mAttackActionValue4 = 1;
        }
    }
}

void MONSTER_OBJECT::A001( int mIndex, float dTime)
{
    int v4; 

    v4 = mGDATA.ReturnMonsterMotionFrameNum(mMONSTER_INFO->mDataSortNumber3D - 1, mMONSTER.mAction.aSort);
    mMONSTER.mAction.aFrame = dTime * 30.0 + mMONSTER.mAction.aFrame;
    if (mMONSTER.mAction.aFrame >= v4)
    {
        mMONSTER.mAction.aSort = 1;
        mMONSTER.mAction.aFrame = 0.0;
    }
}

void MONSTER_OBJECT::A002( int mIndex, float dTime)
{
    int v4; 

    v4 = mGDATA.ReturnMonsterMotionFrameNum( mMONSTER_INFO->mDataSortNumber3D - 1,  mMONSTER.mAction.aSort);
    mMONSTER.mAction.aFrame = dTime * 30.0 + mMONSTER.mAction.aFrame;
    if (mMONSTER.mAction.aFrame >= v4)
    {
        mMONSTER.mAction.aFrame = mMONSTER.mAction.aFrame - v4;
    }
}

void MONSTER_OBJECT::A004( int mIndex, float dTime )
{
    float v3; 
    int v5; 
    int v6; 
    MONSTER_OBJECT* tMONSTER = &mPLAY.mMONSTER_OBJECT[mIndex];

    v6 = mGDATA.ReturnMonsterMotionFrameNum(tMONSTER->mMONSTER_INFO->mDataSortNumber3D - 1, tMONSTER->mMONSTER.mAction.aSort);
    tMONSTER->mMONSTER.mAction.aFrame = dTime * 30.0 + tMONSTER->mMONSTER.mAction.aFrame;
    if (tMONSTER->mMONSTER.mAction.aFrame >= v6)
    {
        tMONSTER->mMONSTER.mAction.aFrame = tMONSTER->mMONSTER.mAction.aFrame - v6;
    }
    v3 = tMONSTER->mMONSTER_INFO->mWalkSpeed;
    if (mGDATA.mZONE.mWORLD2.Move(tMONSTER->mMONSTER.mAction.aLocation, tMONSTER->mMONSTER.mAction.aTargetLocation, v3, dTime, &v5))
    {
        if (v5)
        {
            tMONSTER->mMONSTER.mAction.aSort = 1;
            tMONSTER->mMONSTER.mAction.aFrame = 0.0;
        }
    }
    else
    {
        tMONSTER->mMONSTER.mAction.aSort = 1;
        tMONSTER->mMONSTER.mAction.aFrame = 0.0;
    }
}

void MONSTER_OBJECT::A005( int mIndex, float dTime)
{
    float tSpeed;
    BOOL tCheckArrival;
    int v6; 

    v6 = mGDATA.ReturnMonsterMotionFrameNum(mMONSTER_INFO->mDataSortNumber3D - 1, mMONSTER.mAction.aSort);
    mMONSTER.mAction.aFrame = dTime * 30.0 + mMONSTER.mAction.aFrame;
    if (mMONSTER.mAction.aFrame >= v6)
    {
        mMONSTER.mAction.aFrame = mMONSTER.mAction.aFrame - v6;
    }
    tSpeed = mMONSTER_INFO->mRunSpeed;
    if (mGDATA.mZONE.mWORLD2.Move(mMONSTER.mAction.aLocation, mMONSTER.mAction.aTargetLocation, tSpeed, dTime, &tCheckArrival))
    {
        if (tCheckArrival)
        {
            mMONSTER.mAction.aSort = 1;
            mMONSTER.mAction.aFrame = 0.0;
        }
    }
    else
    {
        mMONSTER.mAction.aSort = 1;
        mMONSTER.mAction.aFrame = 0.0;
    }
}
void MONSTER_OBJECT::A006( int mIndex, float dTime)
{
    int v4; 

    v4 = mGDATA.ReturnMonsterMotionFrameNum(mMONSTER_INFO->mDataSortNumber3D - 1, mMONSTER.mAction.aSort);
    mMONSTER.mAction.aFrame = dTime * 30.0 + mMONSTER.mAction.aFrame;
    if (mMONSTER.mAction.aFrame >= v4)
    {
        mMONSTER.mAction.aSort = 1;
        mMONSTER.mAction.aFrame = 0.0;
        mMonsterActionState = 0;
    }
}
void MONSTER_OBJECT::A008( int mIndex, float dTime)
{
    int v4;

    v4 = mGDATA.ReturnMonsterMotionFrameNum(mMONSTER_INFO->mDataSortNumber3D - 1, mMONSTER.mAction.aSort);
    mMONSTER.mAction.aFrame = dTime * 30.0 + mMONSTER.mAction.aFrame;
    if (mMONSTER.mAction.aFrame >= v4)
    {
        mMONSTER.mAction.aSort = 1;
        mMONSTER.mAction.aFrame = 0.0;
        mMonsterActionState = 0;
    }
}
void MONSTER_OBJECT::A009( int mIndex, float dTime)
{
    int v4; 

    v4 = mGDATA.ReturnMonsterMotionFrameNum(mMONSTER_INFO->mDataSortNumber3D - 1, mMONSTER.mAction.aSort);
    mMONSTER.mAction.aFrame = dTime * 30.0 + mMONSTER.mAction.aFrame;
    if (mMONSTER.mAction.aFrame >= v4)
    {
        mMONSTER.mAction.aSort = 1;
        mMONSTER.mAction.aFrame = 0.0;
    }
}
void MONSTER_OBJECT::A013( int mIndex, float dTime)
{
    float tPostYCoord;
    float x;
    float y;
    float z;
    int v8; 

    v8 = mGDATA.ReturnMonsterMotionFrameNum(mMONSTER_INFO->mDataSortNumber3D - 1, mMONSTER.mAction.aSort);
    mMONSTER.mAction.aFrame = dTime * 30.0 + mMONSTER.mAction.aFrame;
    if (mMONSTER.mAction.aSkillNumber != 1 && mCheckMonsterIsDead == 1)
    {
        mDeathSpeed = mDeathSpeed - dTime * 100.0;
        if (mDeathSpeed < 0.0)
        {
            mDeathSpeed = 0.0;
        }
        x = mMONSTER.mAction.aTargetLocation[0] * mDeathSpeed * dTime + mMONSTER.mAction.aLocation[0];
        y = mMONSTER.mAction.aLocation[1];
        z = mMONSTER.mAction.aTargetLocation[2] * mDeathSpeed * dTime + mMONSTER.mAction.aLocation[2];
        tPostYCoord = mMONSTER.mAction.aLocation[1] + 20.0;
        if (mGDATA.mZONE.mWORLD2.GetYCoord(x, z, &y, 1, tPostYCoord, 0, 1))
        {
            mMONSTER.mAction.aLocation[0] = x;
            mMONSTER.mAction.aLocation[1] = y;
            mMONSTER.mAction.aLocation[2] = z;
        }
    }
    if (mMONSTER.mAction.aFrame >= v8)
    {
        mMONSTER.mAction.aFrame = (v8 - 1);
        if (mCheckMonsterIsDead == 1)
        {
            mCheckMonsterIsDead = 0;
            mDeathTime = mAPP[0].hPresentElapsedSeconds;
        }
        else if (mAPP[0].hPresentElapsedSeconds - mDeathTime > 3.0)
        {
            Free();
        }
    }
}
void MONSTER_OBJECT::A020( int mIndex, float dTime)
{
    int v4; 

    v4 = mGDATA.ReturnMonsterMotionFrameNum( mMONSTER_INFO->mDataSortNumber3D - 1, mMONSTER.mAction.aSort);
    mMONSTER.mAction.aFrame = dTime * 30.0 + mMONSTER.mAction.aFrame;
    if (mMONSTER.mAction.aFrame >= v4)
    {
        mMONSTER.mAction.aFrame = (v4 - 1);
    }
}
BOOL MONSTER_OBJECT::CheckMonsterToCoordDistance( float tSCoord[3])
{
    return mAttackRadius + 5.0f > mUTIL.GetLengthXYZ(mMONSTER.mAction.aLocation, tSCoord);
}






// Class of NPC_OBJECT
void NPC_OBJECT::Init()
{
    mCheckValidState = FALSE;
}

void NPC_OBJECT::Free()
{
    mCheckValidState = FALSE;
}

void NPC_OBJECT::PlayActionSound()
{
    GSOUND* v1;

    if (mCheckValidState)
    {
        if (mUTIL.GetLengthXYZ(mLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation) <= 1000.0)
        {
            v1 = mGDATA.ReturnNPCSound( mNPC_INFO->nDataSortNumber3D - 1, mMotionIndex);
            GSOUND::Play(v1, mLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
        }
    }
}
void NPC_OBJECT::Draw(int tDrawSort, int mIndex, float dTime)
{
    float tRange; 
    float pFrame; 
    float tL[3];
    int tFrame;
    float tA[3];
    int tDataIndex; 
    GMOTION* tMOTION; 

    if (mCheckValidState)
    {
        if (tDrawSort >= 1 && tDrawSort <= 2 && mUTIL.GetLengthXYZ(mLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation) <= 1000.0)
        {
            tRange = mNPC_INFO->nSize[1];
            if (mUTIL.CheckPossibleDrawMeWithCamera(mLocation, tRange))
            {
                tMOTION = mGDATA.ReturnNPCMotion(mNPC_INFO->nDataSortNumber3D - 1, mMotionIndex);
                GSOBJECT::DisplaySObject( &mGDATA.mNPC[mNPC_INFO->nDataSortNumber3D - 1][0], tDrawSort, mFrame, mLocation, mFront, mNPC_INFO->nSize[1], tMOTION,  0);
                if (mNPC_INFO->nIndex == mMYINFO.ReturnQuestNextNPCNumber())
                {
                    if (mMYINFO.ReturnQuestPresentState() == 1)
                    {
                        tDataIndex = 153;
                    }
                    else
                    {
                        tDataIndex = 152;
                    }
                    tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[tDataIndex]);
                    if (tFrame > 0)
                    {
                        pFrame = ((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
                        tL[0] = mLocation[0];
                        tL[1] = mNPC_INFO->nSize[1] + mLocation[1];
                        tL[2] = mLocation[2];
                        tA[0] = 0.0f;
                        tA[1] = mFront;
                        tA[2] = 0.0f;
                        GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[tDataIndex], tDrawSort, pFrame, &tL[0], &tA[0], 0);
                    }
                }
            }
        }
    }
}
void NPC_OBJECT::DrawShadow(int mIndex, float dTime)
{
    float tYAngle; 
    GMOTION* tMOTION; 
    float tSize; 

    if (mCheckValidState && mUTIL.GetLengthXYZ(mLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation) <= 300.0)
    {
        tSize = (float)mNPC_INFO->nSize[1];
        if (mUTIL.CheckPossibleDrawMeWithCamera(mLocation, tSize))
        {
            tMOTION = mGDATA.ReturnNPCMotion(mNPC_INFO->nDataSortNumber3D - 1, mMotionIndex);
            tYAngle = (float)mNPC_INFO->nSize[1];
            GSOBJECT::DisplaySObjectShadow( &mGDATA.mNPC[mNPC_INFO->nDataSortNumber3D - 1][0], mFrame, mLocation, mFront, tYAngle, &mGDATA.mZONE, tMOTION, 0);
        }
    }
}
void NPC_OBJECT::DrawInfo(int tSort, int mIndex, float dTime)
{
    float tSize;
    int tColor; 
    float tCoord[3];

    if (mCheckValidState)
    {
        tSize = mNPC_INFO->nSize[1];
        if (mUTIL.CheckPossibleDrawMeWithCamera(mLocation, tSize))
        {
            if (tSort != 1 || mGAMEOPTION.tDisplayInfo && mUTIL.GetLengthXYZ(mLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation) <= 300.0)
            {
                tCoord[0] = mLocation[0];
                tCoord[1] = (mNPC_INFO->nSize[1] + 1) + mLocation[1];
                tCoord[2] = mLocation[2];
                tColor = mUTIL.ReturnNPCNameColor(mNPC_INFO->nIndex);
                mUTIL.DrawFont3D(mNPC_INFO->nName, tCoord, tColor);
            }
        }
    }
}
void NPC_OBJECT::A001(int mIndex, float dTime)
{
    int v3;

    if (mCheckValidState)
    {
        if (mMotionIndex == 1)
        {

            Update(mIndex, dTime);
        }
        else
        {
            A002(mIndex, dTime);
        }
    }
}
void NPC_OBJECT::A002(int mIndex, float dTime)
{
    int v4; 

    v4 = mGDATA.ReturnNPCMotionFrameNum( mNPC_INFO->nDataSortNumber3D - 1, mMotionIndex);
    mFrame = dTime * 30.0 + mFrame;
    if (mFrame >= v4)
    {
        mFrame = mFrame - v4;
    }
    if (mUTIL.GetLengthXYZ(mLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation) > 400.0)
    {
        mFront = mPostFront;
    }
}
void NPC_OBJECT::Update(int mIndex, float dTime)
{
    int v4;

    v4 = mGDATA.ReturnNPCMotionFrameNum( mNPC_INFO->nDataSortNumber3D - 1, mMotionIndex);
    mFrame = dTime * 30.0 + mFrame;
    if (mFrame >= v4)
    {
        mMotionIndex = 0;
        mFrame = 0.0;
    }
}
BOOL NPC_OBJECT::CheckNpcToCoordDistance(float tSCoord[3])
{
    return mUTIL.GetLengthXYZ(mLocation, tSCoord) < 10.0f;
}





// Class of ITEM_OBJECT
void ITEM_OBJECT::Init()
{
    mCheckValidState = FALSE;
}
void ITEM_OBJECT::Free()
{
    mCheckValidState = FALSE;
}
void ITEM_OBJECT::PlayActionSound( int mIndex)
{
    if (mCheckValidState)
    {
        if (mSoundIdx != -1)
        {
            GSOUND::Play(&mGDATA.mSOUND_5[mSoundIdx], &mDATA.iLocation[0], &mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[0]);
        }
    }
}
void ITEM_OBJECT::Draw(int tDrawSort, int mIndex, float dTime)
{
    if (mCheckValidState && tDrawSort >= 1 && tDrawSort <= 2 && mModelIdx != -1)
    {
        GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[mModelIdx], tDrawSort, 0.0, mLocation, mAngle, 0);
    }
}
void ITEM_OBJECT::DrawInfo(int mIndex, float dTime)
{
    int v3; 
    char Buffer[1000]; 
    float tLoc[3]; 

    if (mCheckValidState && mUTIL.GetLengthXYZ(mLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation) <= 300.0)
    {
        if (mITEM_INFO->iSort == 1 || mITEM_INFO->iSort == 2)
        {
            sprintf(Buffer, "%s(%d)", mITEM_INFO->iName, mDATA.iQuantity);
        }
        else
        {
            sprintf(Buffer, "%s", mITEM_INFO->iName);
        }
        tLoc[0] = mLocation[0];
        tLoc[1] = mLocation[1] + 2.5;
        tLoc[2] = mLocation[2];
        v3 = mUTIL.ReturnItemNameColor(this);
        mUTIL.DrawFont3D(Buffer, tLoc, v3);
    }
}
void ITEM_OBJECT::InitForCreate(int mIndex)
{
    float tPostYCoord;
    int v3; 
    int v4; 

    if (!mCheckValidState)
    {
        return;
    }
    mSoundIdx = -1;
    if (mSoundIdx == -1)
    {
        switch (mITEM_INFO->iIndex)
        {
        case 1018: mSoundIdx = 246; break;
        case 1019: mSoundIdx = 247; break;
        case 1020: mSoundIdx = 248; break;
        case 1021: mSoundIdx = 249; break;
        case 1022: mSoundIdx = 250; break;
        case 1023: mSoundIdx = 253; break;
        case 1024: mSoundIdx = 251; break;
        case 1025: mSoundIdx = 252; break;
        default: break;
        }
    }
    if (mSoundIdx == -1)
    {
        switch (mITEM_INFO->iSort)
        {
        case 1:
            mSoundIdx = 235;
            break;
        case 2:
            mSoundIdx = 236;
            break;
        case 3:
            mSoundIdx = 237;
            break;
        case 4:
            mSoundIdx = 238;
            break;
        case 5:
            mSoundIdx = 239;
            break;
        case 22:
            mSoundIdx = 240;
            break;
        default:
            break;
        }
    }
    if (mSoundIdx == -1)
    {
        switch (mITEM_INFO->iType)
        {
        case 1:
            mSoundIdx = 241;
            break;
        case 2:
            mSoundIdx = 242;
            break;
        case 3:
            mSoundIdx = 243;
            break;
        case 4:
            mSoundIdx = 244;
            break;
        case 5:
            mSoundIdx = 244;
            break;
        case 6:
            mSoundIdx = 244;
            break;
        case 7:
            mSoundIdx = 244;
            break;
        case 8:
            mSoundIdx = 244;
            break;
        default:
            break;
        }
    }
    mModelIdx = -1;
    if (mModelIdx == -1)
    {
        switch (mITEM_INFO->iIndex)
        {
        case 1017:
            mModelIdx = 16;
            break;
        case 1018:
            mModelIdx = 17;
            break;
        case 1019:
            mModelIdx = 18;
            break;
        case 1020:
            mModelIdx = 19;
            break;
        case 1021:
            mModelIdx = 20;
            break;
        case 1022:
            mModelIdx = 21;
            break;
        case 1023:
            mModelIdx = 24;
            break;
        case 1024:
            mModelIdx = 22;
            break;
        case 1025:
            mModelIdx = 23;
            break;
        case 7014:
            mModelIdx = 24;
            break;
        default:
            break;
        }
    }
    if (mModelIdx == -1)
    {
        switch (mITEM_INFO->iSort)
        {
        case 1:
            mModelIdx = 6;
            break;
        case 2:
            mModelIdx = 7;
            break;
        case 3:
            mModelIdx = 8;
            break;
        case 4:
            mModelIdx = 9;
            break;
        case 5:
            mModelIdx = 10;
            break;
        case 22:
            mModelIdx = 11;
            break;
        default:
            break;
        }
    }
    if (mModelIdx == -1)
    {
        switch (mITEM_INFO->iType)
        {
        case 1:
            mModelIdx = 12;
            break;
        case 2:
            mModelIdx = 13;
            break;
        case 3:
            mModelIdx = 14;
            break;
        case 4:
            mModelIdx = 15;
            break;
        case 5:
            mModelIdx = 15;
            break;
        case 6:
            mModelIdx = 15;
            break;
        case 7:
            mModelIdx = 15;
            break;
        case 8:
            mModelIdx = 15;
            break;
        default:
            break;
        }
    }
    if (mDATA.iCreateState)
    {
        ITEM_OBJECT::PlayActionSound(mIndex);
        if (rand() % 2)
        {
            mPreLocation[0] = (rand() % 10) * -1.0;
        }
        else
        {
            mPreLocation[0] = (rand() % 10) * 1.0;
        }
        mPreLocation[1] = (rand() % 51) + 50.0;
        if (rand() % 2)
        {
            mPreLocation[2] = (rand() % 10) * -1.0;
        }
        else
        {
            mPreLocation[2] = (rand() % 10) * 1.0;
        }
        mFront = (rand() % 721 + 720);
        mLocation[0] = mDATA.iLocation[0];
        mLocation[1] = mDATA.iLocation[1] + 20.0;
        mLocation[2] = mDATA.iLocation[2];
        mAngle[0] = 0.0;
        mAngle[1] = (rand() % 360);
        mAngle[2] = 0.0;
    }
    else
    {
        if (rand() % 2)
        {
            mLocation[0] = mDATA.iLocation[0] - (rand() % 10);
        }
        else
        {
            mLocation[0] = (rand() % 10) + mDATA.iLocation[0];
        }
        mLocation[1] = mDATA.iLocation[1];
        if (rand() % 2)
        {
            mLocation[2] = mDATA.iLocation[2] - (rand() % 10);
        }
        else
        {
            mLocation[2] = (rand() % 10) + mDATA.iLocation[2];
        }
        tPostYCoord = mDATA.iLocation[1] + 20.0;
        if (!mGDATA.mZONE.mWORLD.GetYCoord(mLocation[0], mLocation[2], &mLocation[1], 1, tPostYCoord, 0, 0))
        {
            memcpy(mLocation, mDATA.iLocation, 12);
        }
        mAngle[0] = 0.0;
        mAngle[1] = (rand() % 360);
        mAngle[2] = 0.0;
    }
}
void ITEM_OBJECT::Update(int mIndex, float dTime)
{
    float tPostYCoord; 
    float v5[3];
    float x[3]; 

    if (mCheckValidState)
    {
        if (mDATA.iCreateState)
        {
            memcpy(v5, mLocation, 12);
            mPreLocation[1] = dTime * -300.0 + mPreLocation[1];
            mLocation[0] = mPreLocation[0] * dTime + mLocation[0];
            mLocation[1] = mPreLocation[1] * dTime + mLocation[1];
            mLocation[2] = mPreLocation[2] * dTime + mLocation[2];
            mAngle[1] = mFront * dTime + mAngle[1];
            memcpy(x, mLocation, 12);
            tPostYCoord = v5[1] + 20.0f;
            if (mGDATA.mZONE.mWORLD.GetYCoord(x[0], x[2], &x[1], 1, tPostYCoord, 0, 0))
            {
                if (x[1] >= mLocation[1])
                {
                    mDATA.iCreateState = 0;
                    mLocation[1] = x[1];
                }
            }
        }
    }
}
BOOL ITEM_OBJECT::CheckPossibleGetItem()
{
    if (!mCheckValidState)
    {
        return 0;
    }
    if (mDATA.iPartyState == 1)
    {
        if (mDATA.iPresentTime - mDATA.iCreateTime > 10000 && !strcmp(mDATA.iPartyName, mMYINFO.mAvatarInfo.aPartyName) && strcmp(mMYINFO.mAvatarInfo.aPartyName, ""))
        {
            return 1;
        }
    }
    else if (mDATA.iPartyState == 2 && strcmp(mMYINFO.mAvatarInfo.aPartyName, "") && !strcmp(mDATA.iMaster, mMYINFO.mAvatarInfo.aPartyName))
    {
        return 1;
    }
    if (!strcmp(mDATA.iMaster, mMYINFO.mAvatarInfo.aName))
    {
        return 1;
    }
    if (mDATA.iPresentTime - mDATA.iCreateTime <= 30000)
    {
        return strcmp(mDATA.iMaster, "") == 0;
    }
    return 1;
}





// Class of EFFECT_OBJECT
EFFECT_OBJECT::EFFECT_OBJECT()
{
    POBJECT_FOR_GXD::POBJECT_FOR_GXD(mDATA);
    mCheckValidState = 0;
    mDATA.Init();
}

void EFFECT_OBJECT::Init()
{
    mCheckValidState = 0;
    mDATA.Init();
}

void EFFECT_OBJECT::Free()
{
    mCheckValidState = FALSE;
    mDATA.Free();
}

void EFFECT_OBJECT::SetBloodForAvatar(AVATAR_OBJECT* tAvatar, int tSort)
{
    if (tSort >= 1 && tSort <= 2 && tAvatar->mDATA.aVisibleState)
    {
        EFFECT_OBJECT::Free();
        mCheckValidState = 1;
        mEffectIndex = 5;
        mEffectState = 1;
        mUserIndex = tAvatar->mIndex;
        mUniqueNumber = tAvatar->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAvatar->mDATA.aPreviousTribe][tAvatar->mDATA.aGender];
        mSObjectIndex = 4;
        mParticleIndex = tSort != 1;
        GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
    }
}

void EFFECT_OBJECT::SetBloodForMonster(MONSTER_OBJECT* tMonster, int tSort)
{
    if (tSort >= 1 && tSort <= 7)
    {
        EFFECT_OBJECT::Free();
        mCheckValidState = 1;
        mEffectIndex = 5;
        mEffectState = 2;
        mUserIndex = tMonster->mServerIndex;
        mUniqueNumber = tMonster->mUniqueNumber;
        mSObjectForEffect = &mGDATA.mMONSTER_BLOOD_EFFECT[tMonster->mMONSTER_INFO->mDataSortNumber3D - 1][0];
        switch (tSort)
        {
        case 1:
            mSObjectIndex = 1;
            mParticleIndex = 0;
            break;
        case 2:
            mSObjectIndex = 2;
            mParticleIndex = 0;
            break;
        case 3:
            mSObjectIndex = 3;
            mParticleIndex = 0;
            break;
        case 4:
            mSObjectIndex = 1;
            mParticleIndex = 1;
            break;
        case 5:
            mSObjectIndex = 2;
            mParticleIndex = 1;
            break;
        case 6:
            mSObjectIndex = 3;
            mParticleIndex = 1;
            break;
        case 7:
            mSObjectIndex = 0;
            mParticleIndex = 2;
            break;
        default:
            break;
        }
        GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
    }
}

void EFFECT_OBJECT::SetFastRunForAvatar(AVATAR_OBJECT* tAVATAR)
{
    int v2;

    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 6;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        v2 = tAVATAR->mDATA.aPreviousTribe;
        if (v2)
        {
            if (v2 == 1)
            {
                mParticleIndex = 4;
            }
            else if (v2 == 2)
            {
                mParticleIndex = 5;
            }
        }
        else
        {
            mParticleIndex = 3;
        }
        GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
    }
}

void EFFECT_OBJECT::SetJumpRunForAvatar(AVATAR_OBJECT* tAVATAR)
{
    int v2;

    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 7;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        v2 = tAVATAR->mDATA.aPreviousTribe;
        if (v2)
        {
            if (v2 == 1)
            {
                mParticleIndex = 7;
            }
            else if (v2 == 2)
            {
                mParticleIndex = 8;
            }
        }
        else
        {
            mParticleIndex = 6;
        }
        GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
    }
}

void EFFECT_OBJECT::SetStripForMonster(MONSTER_OBJECT* tMONSTER)
{
    GMOTION* a7;

    Free();
    mCheckValidState = 1;
    mEffectIndex = 8;
    mEffectState = 2;
    mUserIndex = tMONSTER->mServerIndex;
    mUniqueNumber = tMONSTER->mUniqueNumber;
    aSort = 131;
    mEffectFrame = 0.0;
    mSObjectForEffect = &mGDATA.mMONSTER_BLOOD_EFFECT[tMONSTER->mMONSTER_INFO->mDataSortNumber3D - 1][0];
    mSObjectIndex = 2;
    a7 = mGDATA.ReturnMonsterMotion(tMONSTER->mMONSTER_INFO->mDataSortNumber3D - 1, tMONSTER->mMONSTER.mAction.aSort);
    GSOBJECT::GetSObjectCoord( mSObjectForEffect, mSObjectIndex, tLocation1, tMONSTER->mMONSTER.mAction.aFrame, tMONSTER->mMONSTER.mAction.aLocation, tMONSTER->mMONSTER.mAction.aFront, a7, 1);
    tAngle1[0] = 0.0;
    tAngle1[1] = tMONSTER->mMONSTER.mAction.aFront;
    tAngle1[2] = 0.0;
    GSOUND::Play( &mGDATA.mSOUND_5[211], tMONSTER->mMONSTER.mAction.aLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
}

void EFFECT_OBJECT::SetCriticalEffectForAvatar(int tSort, AVATAR_OBJECT* tAVATAR, int tSort2)
{
    GMOTION* a7;

    Free();
    mCheckValidState = 1;
    mEffectIndex = 9;
    mEffectState = 1;
    mUserIndex = tAVATAR->mIndex;
    mUniqueNumber = tAVATAR->mUniqueNumber;
    if (tSort == 1)
        aSort = 135;
    else
        aSort = 156;
    mEffectFrame = 0.0f;
    mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
    mSObjectIndex = 4;
    if (tAVATAR->mDATA.aAnimalAbsorbState)
        a7 = mGDATA.ReturnCharacterMotion( tAVATAR->mDATA.aPreviousTribe, tAVATAR->mDATA.aGender, tAVATAR->mDATA.aAction.aType, tAVATAR->mDATA.aAction.aSort, tAVATAR->mDATA.aLevel1, tAVATAR->mDATA.aLevel2, 0);
    else
        a7 = mGDATA.ReturnCharacterMotion( tAVATAR->mDATA.aPreviousTribe, tAVATAR->mDATA.aGender, tAVATAR->mDATA.aAction.aType, tAVATAR->mDATA.aAction.aSort, tAVATAR->mDATA.aLevel1, tAVATAR->mDATA.aLevel2, tAVATAR->mDATA.aAnimalNumber);
    GSOBJECT::GetSObjectCoord( mSObjectForEffect, mSObjectIndex, tLocation1, tAVATAR->mDATA.aAction.aFrame, tAVATAR->mDATA.aAction.aLocation, tAVATAR->mDATA.aAction.aFront, a7, tSort2);
    tAngle1[0] = 0.0f;
    tAngle1[1] = tAVATAR->mDATA.aAction.aFront;
    tAngle1[2] = 0.0f;
}

void EFFECT_OBJECT::SetCriticalEffectForMonster(MONSTER_OBJECT* tMONSTER)
{
    GMOTION* v2;

    Free();
    mCheckValidState = 1;
    mEffectIndex = 10;
    mEffectState = 2;
    mUserIndex = tMONSTER->mServerIndex;
    mUniqueNumber = tMONSTER->mUniqueNumber;
    aSort = 135;
    mEffectFrame = 0.0f;
    mSObjectForEffect = &mGDATA.mSOB_001_24[tMONSTER->mMONSTER_INFO->mDataSortNumber3D - 1][0];
    mSObjectIndex = 2;
    v2 = mGDATA.ReturnMonsterMotion(tMONSTER->mMONSTER_INFO->mDataSortNumber3D - 1, tMONSTER->mMONSTER.mAction.aSort);
    GSOBJECT::GetSObjectCoord( mSObjectForEffect, mSObjectIndex, tLocation1, tMONSTER->mMONSTER.mAction.aFrame, tMONSTER->mMONSTER.mAction.aLocation, tMONSTER->mMONSTER.mAction.aFront, v2, 1);
    tAngle1[0] = 0.0f;
    tAngle1[1] = tMONSTER->mMONSTER.mAction.aFront;
    tAngle1[2] = 0.0f;
}

void EFFECT_OBJECT::SetLevelEffectForLeftEye(AVATAR_OBJECT* tAVATAR)
{
    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aLevel2 <= 0)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
        mSObjectIndex = 1;
        switch (tAVATAR->mDATA.aLevel1)
        {
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
            mParticleIndex = 9;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
            mParticleIndex = 10;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
            mParticleIndex = 12;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 142:
        case 143:
        case 144:
            mParticleIndex = 14;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 145:
            mParticleIndex = 16;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        default:
            Free();
            break;
        }
    }
}

void EFFECT_OBJECT::SetLevelEffectForRightEye(AVATAR_OBJECT* tAVATAR)
{
    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aLevel2 <= 0)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
        mSObjectIndex = 0;
        switch (tAVATAR->mDATA.aLevel1)
        {
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
            mParticleIndex = 9;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
            mParticleIndex = 10;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
            mParticleIndex = 12;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 142:
        case 143:
        case 144:
            mParticleIndex = 14;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 145:
            mParticleIndex = 16;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        default:
            Free();
            break;
        }
    }
}

void EFFECT_OBJECT::SetLevelEffectForLeftHand(AVATAR_OBJECT* tAVATAR)
{
    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aLevel2 <= 0)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
        mSObjectIndex = 3;
        switch (tAVATAR->mDATA.aLevel1)
        {
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
            mParticleIndex = 11;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
            mParticleIndex = 13;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 142:
        case 143:
        case 144:
            mParticleIndex = 15;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 145:
            mParticleIndex = 17;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        default:
            Free();
            break;
        }
    }
}

void EFFECT_OBJECT::SetLevelEffectForRightHand(AVATAR_OBJECT* tAVATAR)
{
    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aLevel2 <= 0)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
        mSObjectIndex = 2;
        switch (tAVATAR->mDATA.aLevel1)
        {
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
            mParticleIndex = 11;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
            mParticleIndex = 13;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 142:
        case 143:
        case 144:
            mParticleIndex = 15;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 145:
            mParticleIndex = 17;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        default:
            Free();
            break;
        }
    }
}

void EFFECT_OBJECT::SetHighLevelEffect_1(AVATAR_OBJECT* tAVATAR)
{
    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aLevel2 >= 1)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
        mSObjectIndex = 2;
        switch (tAVATAR->mDATA.aLevel2)
        {
        case 1:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 2:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 3:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 4:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 5:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 6:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 7:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 8:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 9:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 10:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 11:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 12:
            mParticleIndex = 23;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        default:
            Free();
            break;
        }
    }
}

void EFFECT_OBJECT::SetHighLevelEffect_2(AVATAR_OBJECT* tAVATAR)
{
    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aLevel2 >= 1)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
        mSObjectIndex = 3;
        switch (tAVATAR->mDATA.aLevel2)
        {
        case 1:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 2:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 3:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 4:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 5:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 6:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 7:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 8:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 9:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 10:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 11:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 12:
            mParticleIndex = 23;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        default:
            Free();
            break;
        }
    }
}

void EFFECT_OBJECT::SetHighLevelEffect_3(AVATAR_OBJECT* tAVATAR)
{
    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aLevel2 >= 1)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
        if (tAVATAR->mDATA.aPreviousTribe)
        {
            if (tAVATAR->mDATA.aPreviousTribe == 1)
                mSObjectIndex = 11;
            else
                mSObjectIndex = 9;
        }
        else
        {
            mSObjectIndex = 7;
        }
        switch (tAVATAR->mDATA.aLevel2)
        {
        case 1:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 2:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 3:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 4:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 5:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 6:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 7:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 8:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 9:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 10:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 11:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 12:
            mParticleIndex = 23;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        default:
            Free();
            break;
        }
    }
}

void EFFECT_OBJECT::SetHighLevelEffect_4(AVATAR_OBJECT* tAVATAR)
{
    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aLevel2 >= 1)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
        if (tAVATAR->mDATA.aPreviousTribe)
        {
            if (tAVATAR->mDATA.aPreviousTribe == 1)
                mSObjectIndex = 12;
            else
                mSObjectIndex = 10;
        }
        else
        {
            mSObjectIndex = 8;
        }
        switch (tAVATAR->mDATA.aLevel2)
        {
        case 1:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 2:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 3:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 4:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 5:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 6:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 7:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 8:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 9:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 10:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 11:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 12:
            mParticleIndex = 23;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        default:
            Free();
            break;
        }
    }
}

void EFFECT_OBJECT::SetHighLevelEffect_5(AVATAR_OBJECT* tAVATAR)
{
    if(mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aLevel2 >= 1)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
        if (tAVATAR->mDATA.aPreviousTribe)
        {
            if (tAVATAR->mDATA.aPreviousTribe == 1)
                mSObjectIndex = 13;
            else
                mSObjectIndex = 11;
        }
        else
        {
            mSObjectIndex = 9;
        }
        switch (tAVATAR->mDATA.aLevel2)
        {
        case 1:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 2:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 3:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 4:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 5:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 6:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 7:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 8:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 9:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 10:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 11:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 12:
            mParticleIndex = 23;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        default:
            Free();
            break;
        }
    }
}

void EFFECT_OBJECT::SetHighLevelEffect_6(AVATAR_OBJECT* tAVATAR)
{
    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aLevel2 >= 1)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
        if (tAVATAR->mDATA.aPreviousTribe)
        {
            if (tAVATAR->mDATA.aPreviousTribe == 1)
                mSObjectIndex = 14;
            else
                mSObjectIndex = 12;
        }
        else
        {
            mSObjectIndex = 10;
        }
        switch (tAVATAR->mDATA.aLevel2)
        {
        case 1:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 2:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 3:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 4:
            mParticleIndex = 20;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 5:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 6:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 7:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 8:
            mParticleIndex = 21;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 9:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 10:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 11:
            mParticleIndex = 22;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        case 12:
            mParticleIndex = 23;
            GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            break;
        default:
            Free();
            break;
        }
    }
}

void EFFECT_OBJECT::SetZone175TypeMonsterEffect(int tSort, MONSTER_OBJECT* tMONSTER)
{
    Free();
    mCheckValidState = 1;
    mEffectIndex = 5;
    mEffectState = 2;
    mUserIndex = tMONSTER->mServerIndex;
    mUniqueNumber = tMONSTER->mUniqueNumber;
    mSObjectForEffect = &mGDATA.mMONSTER_BLOOD_EFFECT[tMONSTER->mMONSTER_INFO->mDataSortNumber3D - 1][0];
    if (tSort == 1)
    {
        mSObjectIndex = 1;
        mParticleIndex = 18;
    }
    else
    {
        if (tSort != 2)
        {
            Free();
            return;
        }
        mSObjectIndex = 1;
        mParticleIndex = 19;
    }
    GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
}

void EFFECT_OBJECT::Draw(int tDrawSort, int mIndex, float dTime)
{
    if (mCheckValidState)
    {
        switch (mEffectIndex)
        {
        case 1:
            if (tDrawSort >= 1 && tDrawSort <= 2)
            {
                GMOBJECT::DisplayMObject(
                    &mGDATA.mCHARMODEL[tPreviousTribe][tGender][aSort],
                    tDrawSort,
                    mEffectFrame,
                    tLocation1,
                    tAngle1,
                    0);
            }
            break;
        case 2:
            if (tDrawSort >= 1 && tDrawSort <= 2)
            {
                GMOBJECT::DisplayMObject(
                    &mGDATA.mCHARMODEL[tPreviousTribe][tGender][aSort],
                    tDrawSort,
                    mEffectFrame,
                    tLocation1,
                    tAngle1,
                    0);
            }
            break;
        case 3:
            if (tDrawSort >= 1 && tDrawSort <= 2)
            {
                GMOBJECT::DisplayMObject(
                    &mGDATA.mMONSTERMODEL[aSort],
                    tDrawSort,
                    mEffectFrame,
                    tLocation1,
                    tAngle1,
                    0);
            }
            break;
        case 4:
            if (tDrawSort >= 1 && tDrawSort <= 2)
            {
                GMOBJECT::DisplayMObject(
                    &mGDATA.mMONSTERMODEL[aSort],
                    tDrawSort,
                    mEffectFrame,
                    tLocation1,
                    tAngle1,
                    0);
            }
            break;
        case 5:
            if (tDrawSort == 3 && mDATA.mCheckValidState)
            {
                GPARTICLE::DisplayParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            }
            break;
        case 6:
            if (tDrawSort == 3 && mDATA.mCheckValidState)
            {
                GPARTICLE::DisplayParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            }
            break;
        case 7:
            if (tDrawSort == 3 && mDATA.mCheckValidState)
            {
                GPARTICLE::DisplayParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            }
            break;
        case 8:
            if (tDrawSort >= 1 && tDrawSort <= 2)
            {
                GMOBJECT::DisplayMObject(
                    &mGDATA.mMODEL3[aSort],
                    tDrawSort,
                    mEffectFrame,
                    tLocation1,
                    tAngle1,
                    0);
            }
            break;
        case 9:
            if (tDrawSort >= 1 && tDrawSort <= 2)
            {
                GMOBJECT::DisplayMObject(
                    &mGDATA.mMODEL3[aSort],
                    tDrawSort,
                    mEffectFrame,
                    tLocation1,
                    tAngle1,
                    0);
            }
            break;
        case 10:
            if (tDrawSort >= 1 && tDrawSort <= 2)
            {
                GMOBJECT::DisplayMObject(
                    &mGDATA.mMODEL3[aSort],
                    tDrawSort,
                    mEffectFrame,
                    tLocation1,
                    tAngle1,
                    0);
            }
            break;
        case 11:
            if (tDrawSort == 3 && mDATA.mCheckValidState)
            {
                GPARTICLE::DisplayParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            }
            break;
        case 12:
            if (tDrawSort >= 1 && tDrawSort <= 2)
            {
                GMOBJECT::DisplayMObject(
                    &mGDATA.mMODEL3[aSort],
                    tDrawSort,
                    mEffectFrame,
                    tLocation1,
                    tAngle1,
                    0);
            }
            break;
        case 13:
            if (tDrawSort >= 1 && tDrawSort <= 2)
            {
                GMOBJECT::DisplayMObject(
                    &mGDATA.mMODEL3[aSort],
                    tDrawSort,
                    mEffectFrame,
                    tLocation1,
                    tAngle1,
                    0);
            }
            break;
        case 14:
            if (tDrawSort == 3 && mDATA.mCheckValidState)
            {
                GPARTICLE::DisplayParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
            }
            break;
        default:
            return;
        }
    }
}

void EFFECT_OBJECT::Update(int mIndex, float dTime)
{
    double v3;
    float v4; 
    float v5; 
    int v6; 
    double v7;
    float v8; 
    float v9; 
    double v10;
    float v11; 
    float v12; 
    double v13;
    float v14; 
    float v15; 
    int v16; 
    float tCoord[3]; 
    int i;
    float v20;
    float v21;
    float v22;
    float v23;
    float v24;
    ACTION_INFO* v25;
    float tAngle[3];
    int v27; 
    GMOTION* tMOTION;

    if (mCheckValidState)
    {
        switch (mEffectIndex)
        {
        case 1:
            v16 = mTargetObjType;
            if (v16 == 1)
            {
                for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || !mPLAY.mAVATAR_OBJECT[i].mDATA.aVisibleState || mPLAY.mAVATAR_OBJECT[i].mIndex != mTargetObjIndex || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != mTargetObjUniqueNumber); ++i)
                {
                    ;
                }
                if (i == mPLAY.MAX_AVATAR_OBJECT)
                {
                    goto LABEL_258;
                }
                tAngle2[0] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[0];
                tAngle2[1] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[1] + 10.0f;
                tAngle2[2] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[2];
                v21 = 4.5f;
            }
            else if (v16 == 2)
            {
                for (i = 0; i < mPLAY.MAX_MONSTER_OBJECT && (!mPLAY.mMONSTER_OBJECT[i].mCheckValidState || mPLAY.mMONSTER_OBJECT[i].mServerIndex != mTargetObjIndex || mPLAY.mMONSTER_OBJECT[i].mUniqueNumber != mTargetObjUniqueNumber); ++i)
                {
                    ;
                }
                if (i == mPLAY.MAX_MONSTER_OBJECT)
                {
                    goto LABEL_258;
                }
                tAngle2[0] = mPLAY.mMONSTER_OBJECT[i].mMONSTER.mAction.aLocation[0];
                tAngle2[1] = (float)mPLAY.mMONSTER_OBJECT[i].mMONSTER_INFO->mSize[1] * 0.5f + mPLAY.mMONSTER_OBJECT[i].mMONSTER.mAction.aLocation[1] + (float)mPLAY.mMONSTER_OBJECT[i].mMONSTER_INFO->mSize[3];
                tAngle2[2] = mPLAY.mMONSTER_OBJECT[i].mMONSTER.mAction.aLocation[2];
                v21 = mPLAY.mMONSTER_OBJECT[i].mAttackRadius;
            }
            if (GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[tPreviousTribe][tGender][aSort]) > 0)
            {
                mEffectFrame = dTime * 30.0f + mEffectFrame;
                if (mEffectFrame >= (double)GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[tPreviousTribe][tGender][aSort]))
                {
                    mEffectFrame = 0.0f;
                }
            }
            v22 = tAngle2[0] - tLocation1[0];
            v23 = tAngle2[1] - tLocation1[1];
            v24 = tAngle2[2] - tLocation1[2];
            v15 = v24 * v24 + v23 * v23 + v22 * v22;
            v14 = sqrt(v15);
            v20 = v14;
            if (v14 > 500.0)
            {
                goto LABEL_258;
            }
            if (v20 > 0.0)
            {
                v22 = v22 / v20;
                v23 = v23 / v20;
                v24 = v24 / v20;
            }
            tLocation1[0] = mBulletInfo * dTime * v22 + tLocation1[0];
            tLocation1[1] = mBulletInfo * dTime * v23 + tLocation1[1];
            tLocation1[2] = mBulletInfo * dTime * v24 + tLocation1[2];
            tAngle1[1] = mUTIL.GetYAngle(tLocation1[0], tLocation1[2], tAngle2[0], tAngle2[2]);
            if (v21 > mUTIL.GetLengthXYZ(tAngle2, tLocation1) || (v13 = mUTIL.GetLengthXYZ(tLocation1, tLocation2), mUTIL.GetLengthXYZ(tAngle2, tLocation2) < v13))
            {
                tLocation1[0] = tAngle2[0];
                tLocation1[1] = tAngle2[1];
                tLocation1[2] = tAngle2[2];
                if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo.mServerIndex1 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo.mUniqueNumber1)
                {
                    tAttackInfo.mSenderLocation[0] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[0];
                    tAttackInfo.mSenderLocation[1] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[1];
                    tAttackInfo.mSenderLocation[2] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[2];
                    mTRANSFER.T_PROCESS_ATTACK_SEND(&tAttackInfo);
                }
                mEffectIndex = 2;
                ++aSort;
                mEffectFrame = 0.0;
            }
            break;
        case 2:
            if (GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[tPreviousTribe][tGender][aSort]) < 1)
            {
                goto LABEL_258;
            }
            mEffectFrame = dTime * 30.0f + mEffectFrame;
            if (mEffectFrame >= (float)GMOBJECT::GetTotalFrameNum(&mGDATA.mCHARMODEL[tPreviousTribe][tGender][aSort]))
            {
                goto LABEL_258;
            }
            break;
        case 3:
            if (UNKa1)
            {
                if (GMOBJECT::GetTotalFrameNum(&mGDATA.mMONSTERMODEL[aSort]) > 0)
                {
                    mEffectFrame = dTime * 30.0f + mEffectFrame;
                    if (mEffectFrame >= (double)GMOBJECT::GetTotalFrameNum(&mGDATA.mMONSTERMODEL[aSort]))
                    {
                        mEffectFrame = 0.0f;
                    }
                }
                UNKa3 = UNKa3 + dTime;
                if (EFFECT_OBJECT::MoveCurve( tLocation2, tAngle2, UNKa3, mBulletInfo, tLocation1))
                {
                    if (!mTribe && mUTIL.GetLengthXYZ(mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation, tLocation1) < 100.0f)
                    {
                        tAttackInfo.mServerIndex2 = mPLAY.mAVATAR_OBJECT[0].mIndex;
                        tAttackInfo.mUniqueNumber2 = mPLAY.mAVATAR_OBJECT[0].mUniqueNumber;
                        tAttackInfo.mSenderLocation[0] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[0];
                        tAttackInfo.mSenderLocation[1] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[1];
                        tAttackInfo.mSenderLocation[2] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[2];
                        mTRANSFER.T_PROCESS_ATTACK_SEND(&tAttackInfo);
                    }
                    v27 = mUTIL.ReturnMonsterDamageSound(mDamageSoundSort);
                    if (v27 != -1)
                        GSOUND::Play( &mGDATA.mSOUND_5[v27], tLocation1, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
                    mEffectIndex = 4;
                    aSort = mUTIL.ReturnMonsterDamageObject(mDamageSoundSort);
                    if (aSort == -1)
                    {
                        goto LABEL_258;
                    }
                    mEffectFrame = 0.0;
                }
            }
            else if (UNKa4)
            {
                if (GMOBJECT::GetTotalFrameNum(&mGDATA.mMONSTERMODEL[aSort]) > 0)
                {
                    mEffectFrame = dTime * 30.0f + mEffectFrame;
                    if (mEffectFrame >= (double)GMOBJECT::GetTotalFrameNum(&mGDATA.mMONSTERMODEL[aSort]))
                    {
                        mEffectFrame = 0.0f;
                    }
                }
                v22 = tAngle2[0] - tLocation1[0];
                v23 = tAngle2[1] - tLocation1[1];
                v24 = tAngle2[2] - tLocation1[2];
                v12 = v24 * v24 + v23 * v23 + v22 * v22;
                v11 = sqrt(v12);
                v20 = v11;
                if (v11 > 0.0)
                {
                    v22 = v22 / v20;
                    v23 = v23 / v20;
                    v24 = v24 / v20;
                }
                tLocation1[0] = mBulletInfo * dTime * v22 + tLocation1[0];
                tLocation1[1] = mBulletInfo * dTime * v23 + tLocation1[1];
                tLocation1[2] = mBulletInfo * dTime * v24 + tLocation1[2];
                tAngle1[1] = mUTIL.GetYAngle( tLocation1[0], tLocation1[2], tAngle2[0], tAngle2[2]);
                v10 = mUTIL.GetLengthXYZ(tLocation1, tLocation2);
                if (mUTIL.GetLengthXYZ(tAngle2, tLocation2) < v10)
                {
                    tLocation1[0] = tAngle2[0];
                    tLocation1[1] = tAngle2[1];
                    tLocation1[2] = tAngle2[2];
                    if (mUTIL.GetLengthXYZ(mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation, tLocation1) < 100.0f)
                    {
                        tAttackInfo.mServerIndex2 = mPLAY.mAVATAR_OBJECT[0].mIndex;
                        tAttackInfo.mUniqueNumber2 = mPLAY.mAVATAR_OBJECT[0].mUniqueNumber;
                        tAttackInfo.mSenderLocation[0] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[0];
                        tAttackInfo.mSenderLocation[1] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[1];
                        tAttackInfo.mSenderLocation[2] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[2];
                        mTRANSFER.T_PROCESS_ATTACK_SEND(&tAttackInfo);
                    }
                    v27 = mUTIL.ReturnMonsterDamageSound(mDamageSoundSort);
                    if (v27 != -1)
                    {
                        GSOUND::Play(&mGDATA.mSOUND_5[v27], tLocation1, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
                    }
                    mEffectIndex = 4;
                    aSort = mUTIL.ReturnMonsterDamageObject(mDamageSoundSort);
                    if (aSort == -1)
                    {
                        goto LABEL_258;
                    }
                    mEffectFrame = 0.0f;
                }
            }
            else
            {
                for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || !mPLAY.mAVATAR_OBJECT[i].mDATA.aVisibleState || mPLAY.mAVATAR_OBJECT[i].mIndex != mTargetObjIndex || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != mTargetObjUniqueNumber); ++i)
                {
                    ;
                }
                if (i == mPLAY.MAX_AVATAR_OBJECT)
                {
                    goto LABEL_258;
                }
                tAngle2[0] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[0];
                tAngle2[1] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[1] + 10.0f;
                tAngle2[2] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[2];
                v21 = 4.5f;
                if (GMOBJECT::GetTotalFrameNum(&mGDATA.mMONSTERMODEL[aSort]) > 0)
                {
                    mEffectFrame = dTime * 30.0f + mEffectFrame;
                    if (mEffectFrame >= (float)GMOBJECT::GetTotalFrameNum(&mGDATA.mMONSTERMODEL[aSort]))
                    {
                        mEffectFrame = 0.0f;
                    }
                }
                v22 = tAngle2[0] - tLocation1[0];
                v23 = tAngle2[1] - tLocation1[1];
                v24 = tAngle2[2] - tLocation1[2];
                v9 = v24 * v24 + v23 * v23 + v22 * v22;
                v8 = sqrt(v9);
                v20 = v8;
                if (v8 > 500.0f)
                {
                    goto LABEL_258;
                }
                if (v20 > 0.0f)
                {
                    v22 = v22 / v20;
                    v23 = v23 / v20;
                    v24 = v24 / v20;
                }
                tLocation1[0] = mBulletInfo * dTime * v22 + tLocation1[0];
                tLocation1[1] = mBulletInfo * dTime * v23 + tLocation1[1];
                tLocation1[2] = mBulletInfo * dTime * v24 + tLocation1[2];
                tAngle1[1] = mUTIL.GetYAngle( tLocation1[0], tLocation1[2], tAngle2[0], tAngle2[2]);
                if (v21 > mUTIL.GetLengthXYZ(tAngle2, tLocation1) || (v7 = mUTIL.GetLengthXYZ(tLocation1, tLocation2), mUTIL.GetLengthXYZ(tAngle2, tLocation2) < v7))
                {
                    tLocation1[0] = tAngle2[0];
                    tLocation1[1] = tAngle2[1];
                    tLocation1[2] = tAngle2[2];
                    if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo.mServerIndex2 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo.mUniqueNumber2)
                    {
                        tAttackInfo.mSenderLocation[0] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[0];
                        tAttackInfo.mSenderLocation[1] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[1];
                        tAttackInfo.mSenderLocation[2] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[2];
                        mTRANSFER.T_PROCESS_ATTACK_SEND(&tAttackInfo);
                    }
                    v27 = mUTIL.ReturnMonsterDamageSound(mDamageSoundSort);
                    if (v27 != -1)
                    {
                        GSOUND::Play(&mGDATA.mSOUND_5[v27], tLocation1, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
                    }
                    mEffectIndex = 4;
                    aSort = mUTIL.ReturnMonsterDamageObject(mDamageSoundSort);
                    if (aSort == -1)
                    {
                        goto LABEL_258;
                    }
                    mEffectFrame = 0.0f;
                }
            }
            break;
        case 4:
            if (GMOBJECT::GetTotalFrameNum(&mGDATA.mMONSTERMODEL[aSort]) < 1)
                goto LABEL_258;
            mEffectFrame = dTime * 30.0f + mEffectFrame;
            if (mEffectFrame >= (float)GMOBJECT::GetTotalFrameNum(&mGDATA.mMONSTERMODEL[aSort]))
                goto LABEL_258;
            break;
        case 5:
            v6 = mEffectState;
            if (v6 == 1)
            {
                for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || !mPLAY.mAVATAR_OBJECT[i].mDATA.aVisibleState || mPLAY.mAVATAR_OBJECT[i].mIndex != mUserIndex || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != mUniqueNumber); ++i)
                {
                    ;
                }
                if (i == mPLAY.MAX_AVATAR_OBJECT)
                {
                    goto LABEL_258;
                }
                if (mPLAY.mAVATAR_OBJECT[i].mDATA.aAnimalAbsorbState)
                    tMOTION = mGDATA.ReturnCharacterMotion(
                        mPLAY.mAVATAR_OBJECT[i].mDATA.aPreviousTribe,
                        mPLAY.mAVATAR_OBJECT[i].mDATA.aGender,
                        mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aType,
                        mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort,
                        mPLAY.mAVATAR_OBJECT[i].mDATA.aLevel1,
                        mPLAY.mAVATAR_OBJECT[i].mDATA.aLevel2,
                        0);
                else
                    tMOTION = mGDATA.ReturnCharacterMotion(
                        mPLAY.mAVATAR_OBJECT[i].mDATA.aPreviousTribe,
                        mPLAY.mAVATAR_OBJECT[i].mDATA.aGender,
                        mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aType,
                        mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort,
                        mPLAY.mAVATAR_OBJECT[i].mDATA.aLevel1,
                        mPLAY.mAVATAR_OBJECT[i].mDATA.aLevel2,
                        mPLAY.mAVATAR_OBJECT[i].mDATA.aAnimalNumber);
                v25 = &mPLAY.mAVATAR_OBJECT[i].mDATA.aAction;
            }
            else if (v6 == 2)
            {
                for (i = 0; i < mPLAY.MAX_MONSTER_OBJECT && (!mPLAY.mMONSTER_OBJECT[i].mCheckValidState || mPLAY.mMONSTER_OBJECT[i].mServerIndex != mUserIndex || mPLAY.mMONSTER_OBJECT[i].mUniqueNumber != mUniqueNumber); ++i)
                {
                    ;
                }
                if (i == mPLAY.MAX_MONSTER_OBJECT)
                {
                    goto LABEL_258;
                }
                tMOTION = mGDATA.ReturnMonsterMotion( mPLAY.mMONSTER_OBJECT[i].mMONSTER_INFO->mDataSortNumber3D - 1, mPLAY.mMONSTER_OBJECT[i].mMONSTER.mAction.aSort);
                v25 = &mPLAY.mMONSTER_OBJECT[i].mMONSTER.mAction;
            }
            GSOBJECT::GetSObjectCoord( mSObjectForEffect, mSObjectIndex, tCoord, v25->aFrame, v25->aLocation, v25->aFront, tMOTION, 1);
            tAngle[0] = 0.0f;
            tAngle[1] = v25->aFront;
            tAngle[2] = 0.0f;
            GPARTICLE::UpdateParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA, dTime, tCoord, tAngle);
            if (!mDATA.mCheckValidState)
            {
                goto LABEL_264;
            }
            break;
        case 6:
            if (!mGAMEOPTION.tParticleEffect)
            {
                goto LABEL_258;
            }
            for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || !mPLAY.mAVATAR_OBJECT[i].mDATA.aVisibleState || mPLAY.mAVATAR_OBJECT[i].mIndex != mUserIndex || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != mUniqueNumber); ++i)
            {
                ;
            }
            if (i == mPLAY.MAX_AVATAR_OBJECT || mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort != 32)
            {
                goto LABEL_258;
            }
            tCoord[0] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[0];
            tCoord[1] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[1];
            tCoord[2] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[2];
            tAngle[0] = 0.0f;
            tAngle[1] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aFront;
            tAngle[2] = 0.0f;
            GPARTICLE::UpdateParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA, dTime, tCoord, tAngle);
            if (!mDATA.mCheckValidState)
            {
                goto LABEL_264;
            }
            break;
        case 7:
            if (!mGAMEOPTION.tParticleEffect)
            {
                goto LABEL_258;
            }
            for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || !mPLAY.mAVATAR_OBJECT[i].mDATA.aVisibleState || mPLAY.mAVATAR_OBJECT[i].mIndex != mUserIndex || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != mUniqueNumber); ++i)
            {
                ;
            }
            if (i == mPLAY.MAX_AVATAR_OBJECT || mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort != 33 && mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort != 34 && mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort != 35 && mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort != 36 && mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort != 37)
            {
                goto LABEL_258;
            }
            tCoord[0] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[0];
            tCoord[1] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[1];
            tCoord[2] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[2];
            tAngle[0] = 0.0f;
            tAngle[1] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aFront;
            tAngle[2] = 0.0f;
            GPARTICLE::UpdateParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA, dTime, tCoord, tAngle);
            if (!mDATA.mCheckValidState)
            {
                goto LABEL_264;
            }
            break;
        case 8:
            for (i = 0; i < mPLAY.MAX_MONSTER_OBJECT && (!mPLAY.mMONSTER_OBJECT[i].mCheckValidState || mPLAY.mMONSTER_OBJECT[i].mServerIndex != mUserIndex || mPLAY.mMONSTER_OBJECT[i].mUniqueNumber != mUniqueNumber); ++i)
            {
                ;
            }
            if (i == mPLAY.MAX_MONSTER_OBJECT)
            {
                goto LABEL_258;
            }
            tMOTION = mGDATA.ReturnMonsterMotion( mPLAY.mMONSTER_OBJECT[i].mMONSTER_INFO->mDataSortNumber3D - 1, mPLAY.mMONSTER_OBJECT[i].mMONSTER.mAction.aSort);
            v25 = &mPLAY.mMONSTER_OBJECT[i].mMONSTER.mAction;
            GSOBJECT::GetSObjectCoord( mSObjectForEffect, mSObjectIndex, tLocation1, v25->aFrame, v25->aLocation, v25->aFront, tMOTION, 1);
            tAngle1[0] = 0.0f;
            tAngle1[1] = v25->aFront;
            tAngle1[2] = 0.0f;
            if (GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[aSort]) < 1)
            {
                goto LABEL_258;
            }
            mEffectFrame = dTime * 30.0f + mEffectFrame;
            if (mEffectFrame >= (float)GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[aSort]))
            {
                goto LABEL_258;
            }
            break;
        case 9:
            for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || !mPLAY.mAVATAR_OBJECT[i].mDATA.aVisibleState || mPLAY.mAVATAR_OBJECT[i].mIndex != mUserIndex || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != mUniqueNumber); ++i)
            {
                ;
            }
            if (i == mPLAY.MAX_AVATAR_OBJECT)
            {
                goto LABEL_258;
            }
            if (mPLAY.mAVATAR_OBJECT[i].mDATA.aAnimalAbsorbState)
            {
                tMOTION = mGDATA.ReturnCharacterMotion(
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aPreviousTribe,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aGender,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aType,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aLevel1,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aLevel2,
                    0);
            }
            else
            {
                tMOTION = mGDATA.ReturnCharacterMotion(
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aPreviousTribe,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aGender,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aType,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aLevel1,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aLevel2,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aAnimalNumber);
            }
            v25 = &mPLAY.mAVATAR_OBJECT[i].mDATA.aAction;
            GSOBJECT::GetSObjectCoord(mSObjectForEffect, mSObjectIndex, tLocation1, v25->aFrame, v25->aLocation, v25->aFront, tMOTION, i == 0);
            tAngle1[0] = 0.0f;
            tAngle1[1] = v25->aFront;
            tAngle1[2] = 0.0f;
            if (GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[aSort]) < 1)
            {
                goto LABEL_258;
            }
            mEffectFrame = dTime * 30.0f + mEffectFrame;
            if (mEffectFrame >= (double)GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[aSort]))
            {
                goto LABEL_258;
            }
            break;
        case 10:
            for (i = 0; i < mPLAY.MAX_MONSTER_OBJECT && (!mPLAY.mMONSTER_OBJECT[i].mCheckValidState || mPLAY.mMONSTER_OBJECT[i].mServerIndex != mUserIndex || mPLAY.mMONSTER_OBJECT[i].mUniqueNumber != mUniqueNumber); ++i)
            {
                ;
            }
            if (i == mPLAY.MAX_MONSTER_OBJECT)
            {
                goto LABEL_258;
            }
            tMOTION = mGDATA.ReturnMonsterMotion( mPLAY.mMONSTER_OBJECT[i].mMONSTER_INFO->mDataSortNumber3D - 1, mPLAY.mMONSTER_OBJECT[i].mMONSTER.mAction.aSort);
            v25 = &mPLAY.mMONSTER_OBJECT[i].mMONSTER.mAction;
            GSOBJECT::GetSObjectCoord( mSObjectForEffect, mSObjectIndex, tLocation1, v25->aFrame, v25->aLocation, v25->aFront, tMOTION, 1);
            tAngle1[0] = 0.0f;
            tAngle1[1] = v25->aFront;
            tAngle1[2] = 0.0f;
            if (GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[aSort]) < 1)
            {
                goto LABEL_258;
            }
            mEffectFrame = dTime * 30.0f + mEffectFrame;
            if (mEffectFrame >= (float)GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[aSort]))
            {
                goto LABEL_258;
            }
            break;
        case 11:
            if (!mGAMEOPTION.tParticleEffect)
            {
                goto LABEL_258;
            }
            for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || !mPLAY.mAVATAR_OBJECT[i].mDATA.aVisibleState || mPLAY.mAVATAR_OBJECT[i].mIndex != mUserIndex || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != mUniqueNumber); ++i)
            {
                ;
            }
            if (i == mPLAY.MAX_AVATAR_OBJECT)
            {
                goto LABEL_258;
            }
            if (mPLAY.mAVATAR_OBJECT[i].mDATA.aAnimalAbsorbState)
                tMOTION = mGDATA.ReturnCharacterMotion(
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aPreviousTribe,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aGender,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aType,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aLevel1,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aLevel2,
                    0);
            else
                tMOTION = mGDATA.ReturnCharacterMotion(
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aPreviousTribe,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aGender,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aType,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aSort,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aLevel1,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aLevel2,
                    mPLAY.mAVATAR_OBJECT[i].mDATA.aAnimalNumber);
            v25 = &mPLAY.mAVATAR_OBJECT[i].mDATA.aAction;
            GSOBJECT::GetSObjectCoord( mSObjectForEffect, mSObjectIndex, tCoord, v25->aFrame, v25->aLocation, v25->aFront, tMOTION, i == 0);
            tAngle[0] = 0.0f;
            tAngle[1] = v25->aFront;
            tAngle[2] = 0.0f;
            GPARTICLE::UpdateParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA, dTime, tCoord, tAngle);
            if (!mDATA.mCheckValidState)
            {
                goto LABEL_264;
            }
            break;
        case 12:
            for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || !mPLAY.mAVATAR_OBJECT[i].mDATA.aVisibleState || mPLAY.mAVATAR_OBJECT[i].mIndex != mTargetObjIndex || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != mTargetObjUniqueNumber); ++i)
            {
                ;
            }
            if (i == mPLAY.MAX_AVATAR_OBJECT)
            {
                goto LABEL_258;
            }
            tAngle2[0] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[0];
            tAngle2[1] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[1] + 10.0f;
            tAngle2[2] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[2];
            v21 = 4.5f;
            if (GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[aSort]) > 0)
            {
                mEffectFrame = dTime * 30.0f + mEffectFrame;
                if (mEffectFrame >= (float)GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[aSort]))
                {
                    mEffectFrame = 0.0;
                }
            }
            v22 = tAngle2[0] - tLocation1[0];
            v23 = tAngle2[1] - tLocation1[1];
            v24 = tAngle2[2] - tLocation1[2];
            v5 = v24 * v24 + v23 * v23 + v22 * v22;
            v4 = sqrt(v5);
            v20 = v4;
            if (v4 > 500.0)
            {
                goto LABEL_258;
            }
            if (v20 > 0.0)
            {
                v22 = v22 / v20;
                v23 = v23 / v20;
                v24 = v24 / v20;
            }
            tLocation1[0] = mBulletInfo * dTime * v22 + tLocation1[0];
            tLocation1[1] = mBulletInfo * dTime * v23 + tLocation1[1];
            tLocation1[2] = mBulletInfo * dTime * v24 + tLocation1[2];
            tAngle1[1] = mUTIL.GetYAngle(tLocation1[0], tLocation1[2], tAngle2[0], tAngle2[2]);
            if (v21 > mUTIL.GetLengthXYZ(tAngle2, tLocation1) || (v3 = mUTIL.GetLengthXYZ(tLocation1, tLocation2), mUTIL.GetLengthXYZ(tAngle2, tLocation2) < v3))
            {
                if (mPLAY.mAVATAR_OBJECT[0].mIndex == tAttackInfo.mServerIndex1 && mPLAY.mAVATAR_OBJECT[0].mUniqueNumber == tAttackInfo.mUniqueNumber1)
                {
                    tAttackInfo.mSenderLocation[0] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[0];
                    tAttackInfo.mSenderLocation[1] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[1];
                    tAttackInfo.mSenderLocation[2] = mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation[2];
                    mTRANSFER.T_PROCESS_ATTACK_SEND(&tAttackInfo);
                }
                GSOUND::Play(&mGDATA.mSOUND_5[301], tLocation1, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation);
                mEffectIndex = 13;
                aSort = 157;
                mEffectFrame = 0.0;
            }
            break;
        case 13:
            if (GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[aSort]) < 1)
            {
                goto LABEL_258;
            }
            mEffectFrame = dTime * 30.0f + mEffectFrame;
            if (mEffectFrame >= (float)GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[aSort]))
            {
                goto LABEL_258;
            }
            break;
        case 14:
            if (!mGAMEOPTION.tParticleEffect)
            {
                goto LABEL_258;
            }
            for (i = 0; i < mPLAY.MAX_AVATAR_OBJECT && (!mPLAY.mAVATAR_OBJECT[i].mCheckValidState || !mPLAY.mAVATAR_OBJECT[i].mDATA.aVisibleState || mPLAY.mAVATAR_OBJECT[i].mIndex != mUserIndex || mPLAY.mAVATAR_OBJECT[i].mUniqueNumber != mUniqueNumber); ++i)
            {
                ;
            }
            if (i != mPLAY.MAX_AVATAR_OBJECT && mPLAY.mAVATAR_OBJECT[i].mDATA.aEquipForView[8][0] == 2160)
            {
                if (mPLAY.mAVATAR_OBJECT[i].mDATA.aAnimalNumber && !mPLAY.mAVATAR_OBJECT[i].mDATA.aAnimalAbsorbState)
                {
                    tCoord[0] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[0];
                    tCoord[1] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[1] + 45.0f;
                    tCoord[2] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[2];
                }
                else
                {
                    tCoord[0] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[0];
                    tCoord[1] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[1] + 35.0f;
                    tCoord[2] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aLocation[2];
                }
                tAngle[0] = 0.0f;
                tAngle[1] = mPLAY.mAVATAR_OBJECT[i].mDATA.aAction.aFront;
                tAngle[2] = 0.0f;
                GPARTICLE::UpdateParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA, dTime, tCoord, tAngle);
                if (!mDATA.mCheckValidState)
                {
                LABEL_264:
                    Free();
                }
            }
            else
            {
            LABEL_258:
                Free();
            }
            break;
        default:
            return;
        }
    }
}

BOOL EFFECT_OBJECT::MoveCurve(float tLocation1[3], float tLocation2[3], float tUnknown, float mBulletInfo, float tLocation3[3])
{
    float v6; 
    float v7; 
    float v8; 
    float v9; 
    FLOAT v10;
    FLOAT v11;
    float v12;
    D3DXVECTOR2 pV;
    float v14; 
    float v15; 
    float v16; 
    D3DXVECTOR2 pOut; 
    float v18;
    float v19;
    float v20;
    float v21;
    float v22;
    float v23;
    float v24;

    v20 = 0.0f;
    v15 = 0.0f;
    v16 = 1.0f;
    v12 = tLocation1[2];
    v22 = tLocation1[0];
    v23 = v12;
    v10 = tLocation2[0] - v22;
    v11 = tLocation2[2] - v12;
    pV.x = v10;
    pV.y = v11;
    D3DXVec2Normalize(&pOut, &pV);
    v9 = pV.y * pV.y + pV.x * pV.x;
    v8 = sqrt(v9);
    v21 = v8;
    v14 = v8 / mBulletInfo;
    tLocation3[0] = pOut.x * mBulletInfo * tUnknown + tLocation1[0];
    tLocation3[2] = pOut.y * mBulletInfo * tUnknown + tLocation1[2];
    v24 = tLocation2[1] - tLocation1[1];
    v18 = tUnknown / v14 * 180.0;
    if (v18 < 0.00009999999747378752)
        v18 = 0.0f;
    if (v18 > 179.9998931884766)
        v18 = 180.0f;
    v7 = v18 * 0.01745329238474369;
    v6 = sin(v7);
    v19 = v6 * v21 * 0.3300000131130219;
    v19 = v18 * 0.5 / 90.0 * v24 + v19;
    tLocation3[1] = tLocation1[1] + v19;
    if (v18 <= 179.9998931884766)
    {
        return 0;
    }
    tLocation3[0] = tLocation2[0];
    tLocation3[1] = tLocation2[1];
    tLocation3[2] = tLocation2[2];
    return 1;
}

void EFFECT_OBJECT::SetAbsorbEffect_1(AVATAR_OBJECT* tAVATAR)
{
    int v2;

    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aAnimalAbsorbState)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
        mSObjectIndex = 2;
        switch (tAVATAR->mDATA.aAnimalNumber)
        {
        case 1301:
            mParticleIndex = 24;
            break;
        case 1302:
            mParticleIndex = 27; 
            break;
        case 1303:
            mParticleIndex = 30;
            break;
        case 1304:
            mParticleIndex = 25;
            break;
        case 1305:
            mParticleIndex = 28;
            break;
        case 1306:  
        case 17046:
            mParticleIndex = 31;
            break;
        case 1307:
        case 6500:
        case 6501:
        case 6502:
        case 6503:
        case 6504:
        case 6505:
        case 6506:
        case 6507:
        case 6508:
        case 6509:
        case 814:       
            mParticleIndex = 26;
            break;
        case 1308:
        case 819:
            mParticleIndex = 29;
            break;
        case 1309:
        case 817:
            mParticleIndex = 32;
            break;
        case 1313:
            mParticleIndex = 33;
            break;
        case 1314:
        case 17047:
            mParticleIndex = 34;
            break;
        case 1315:
        case 820:
            mParticleIndex = 35;
            break;
        case 1317:
            mParticleIndex = 36;
            break;
        case 1318:
        case 17048:
            mParticleIndex = 37;
            break;
        case 1319:
        case 818:
            mParticleIndex = 38;
            break;
        case 1320:
            mParticleIndex = 42;
            break;
        case 1321:
        case 17049:
            mParticleIndex = 43;
            break;
        case 1322: 
        case 17058:
        case 821:
            mParticleIndex = 44;
            break;
        case 1323:
            mParticleIndex = 39;
            break;
        case 1324:
        case 17050:
            mParticleIndex = 40;
            break;
        case 1325:
        case 815:
            mParticleIndex = 41;
            break;
        case 1326:
            mParticleIndex = 45;
            break;
        case 1327:     
        case 17051:
            mParticleIndex = 46;
            break;
        case 1328:
        case 816:
            mParticleIndex = 47;
            break;
        case 1329:
            mParticleIndex = 50;
            break;
        case 1330:
        case 17060:
            mParticleIndex = 49;
            break;
        case 1331:
        case 17059:
            mParticleIndex = 48;
            break; 
        case 17044:
            mParticleIndex = 25;
            break; 
        case 17045:
            mParticleIndex = 28;
            break;
        case 17061:
            mParticleIndex = 50;
            break;
        default:
            Free();
            return;
        }
        GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
    }
}

void EFFECT_OBJECT::SetAbsorbEffect_2(AVATAR_OBJECT* tAVATAR)
{
    int v2; 

    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aAnimalAbsorbState)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
        mSObjectIndex = 3;
        switch (tAVATAR->mDATA.aAnimalNumber)
        {
        case 1301:
            mParticleIndex = 24;
            break;
        case 1302:
            mParticleIndex = 27;
            break;
        case 1303:
            mParticleIndex = 30;
            break;
        case 1304:
            mParticleIndex = 25;
            break;
        case 1305:
            mParticleIndex = 28;
            break;
        case 1306:
        case 17046:
            mParticleIndex = 31;
            break;
        case 1307:
        case 6500:
        case 6501:
        case 6502:
        case 6503:
        case 6504:
        case 6505:
        case 6506:
        case 6507:
        case 6508:
        case 6509:
        case 814:
            mParticleIndex = 26;
            break;
        case 1308:
        case 819:
            mParticleIndex = 29;
            break;
        case 1309:
        case 817:
            mParticleIndex = 32;
            break;
        case 1313:
            mParticleIndex = 33;
            break;
        case 1314:
        case 17047:
            mParticleIndex = 34;
            break;
        case 1315:
        case 820:
            mParticleIndex = 35;
            break;
        case 1317:
            mParticleIndex = 36;
            break;
        case 1318:
        case 17048:
            mParticleIndex = 37;
            break;
        case 1319:
        case 818:
            mParticleIndex = 38;
            break;
        case 1320:
            mParticleIndex = 42;
            break;
        case 1321:
        case 17049:
            mParticleIndex = 43;
            break;
        case 1322:
        case 17058:
        case 821:
            mParticleIndex = 44;
            break;
        case 1323:
            mParticleIndex = 39;
            break;
        case 1324:
        case 17050:
            mParticleIndex = 40;
            break;
        case 1325:
        case 815:
            mParticleIndex = 41;
            break;
        case 1326:
            mParticleIndex = 45;
            break;
        case 1327:
        case 17051:
            mParticleIndex = 46;
            break;
        case 1328:
        case 816:
            mParticleIndex = 47;
            break;
        case 1329:
            mParticleIndex = 50;
            break;
        case 1330:
        case 17060:
            mParticleIndex = 49;
            break;
        case 1331:
        case 17059:
            mParticleIndex = 48;
            break;
        case 17044:
            mParticleIndex = 25;
            break;
        case 17045:
            mParticleIndex = 28;
            break;
        case 17061:
            mParticleIndex = 50;
            break;
        default:
            Free();
            return;
        }
        GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
    }
}

void EFFECT_OBJECT::SetAbsorbEffect_3(AVATAR_OBJECT* tAVATAR)
{
    int v2; 

    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aAnimalAbsorbState)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
        
        if (tAVATAR->mDATA.aPreviousTribe == 0)
            mSObjectIndex = 7;
        else if (tAVATAR->mDATA.aPreviousTribe == 1)
            mSObjectIndex = 11;
        else if (tAVATAR->mDATA.aPreviousTribe == 2)
            mSObjectIndex = 9;

        switch (tAVATAR->mDATA.aAnimalNumber)
        {
        case 1301:
            mParticleIndex = 24;
            break;
        case 1302:
            mParticleIndex = 27;
            break;
        case 1303:
            mParticleIndex = 30;
            break;
        case 1304:
            mParticleIndex = 25;
            break;
        case 1305:
            mParticleIndex = 28;
            break;
        case 1306:
        case 17046:
            mParticleIndex = 31;
            break;
        case 1307:
        case 6500:
        case 6501:
        case 6502:
        case 6503:
        case 6504:
        case 6505:
        case 6506:
        case 6507:
        case 6508:
        case 6509:
        case 814:
            mParticleIndex = 26;
            break;
        case 1308:
        case 819:
            mParticleIndex = 29;
            break;
        case 1309:
        case 817:
            mParticleIndex = 32;
            break;
        case 1313:
            mParticleIndex = 33;
            break;
        case 1314:
        case 17047:
            mParticleIndex = 34;
            break;
        case 1315:
        case 820:
            mParticleIndex = 35;
            break;
        case 1317:
            mParticleIndex = 36;
            break;
        case 1318:
        case 17048:
            mParticleIndex = 37;
            break;
        case 1319:
        case 818:
            mParticleIndex = 38;
            break;
        case 1320:
            mParticleIndex = 42;
            break;
        case 1321:
        case 17049:
            mParticleIndex = 43;
            break;
        case 1322:
        case 17058:
        case 821:
            mParticleIndex = 44;
            break;
        case 1323:
            mParticleIndex = 39;
            break;
        case 1324:
        case 17050:
            mParticleIndex = 40;
            break;
        case 1325:
        case 815:
            mParticleIndex = 41;
            break;
        case 1326:
            mParticleIndex = 45;
            break;
        case 1327:
        case 17051:
            mParticleIndex = 46;
            break;
        case 1328:
        case 816:
            mParticleIndex = 47;
            break;
        case 1329:
            mParticleIndex = 50;
            break;
        case 1330:
        case 17060:
            mParticleIndex = 49;
            break;
        case 1331:
        case 17059:
            mParticleIndex = 48;
            break;
        case 17044:
            mParticleIndex = 25;
            break;
        case 17045:
            mParticleIndex = 28;
            break;
        case 17061:
            mParticleIndex = 50;
            break;
        default:
            Free();
            return;
        }
        GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
    }
}

void EFFECT_OBJECT::SetAbsorbEffect_4(AVATAR_OBJECT* tAVATAR)
{
    int v2; 

    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aAnimalAbsorbState)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
        
        if (tAVATAR->mDATA.aPreviousTribe == 0)
            mSObjectIndex = 8;
        else if (tAVATAR->mDATA.aPreviousTribe == 1)
            mSObjectIndex = 12;
        else if (tAVATAR->mDATA.aPreviousTribe == 2)
            mSObjectIndex = 10;

        switch (tAVATAR->mDATA.aAnimalNumber)
        {
        case 1301:
            mParticleIndex = 24;
            break;
        case 1302:
            mParticleIndex = 27;
            break;
        case 1303:
            mParticleIndex = 30;
            break;
        case 1304:
            mParticleIndex = 25;
            break;
        case 1305:
            mParticleIndex = 28;
            break;
        case 1306:
        case 17046:
            mParticleIndex = 31;
            break;
        case 1307:
        case 6500:
        case 6501:
        case 6502:
        case 6503:
        case 6504:
        case 6505:
        case 6506:
        case 6507:
        case 6508:
        case 6509:
        case 814:
            mParticleIndex = 26;
            break;
        case 1308:
        case 819:
            mParticleIndex = 29;
            break;
        case 1309:
        case 817:
            mParticleIndex = 32;
            break;
        case 1313:
            mParticleIndex = 33;
            break;
        case 1314:
        case 17047:
            mParticleIndex = 34;
            break;
        case 1315:
        case 820:
            mParticleIndex = 35;
            break;
        case 1317:
            mParticleIndex = 36;
            break;
        case 1318:
        case 17048:
            mParticleIndex = 37;
            break;
        case 1319:
        case 818:
            mParticleIndex = 38;
            break;
        case 1320:
            mParticleIndex = 42;
            break;
        case 1321:
        case 17049:
            mParticleIndex = 43;
            break;
        case 1322:
        case 17058:
        case 821:
            mParticleIndex = 44;
            break;
        case 1323:
            mParticleIndex = 39;
            break;
        case 1324:
        case 17050:
            mParticleIndex = 40;
            break;
        case 1325:
        case 815:
            mParticleIndex = 41;
            break;
        case 1326:
            mParticleIndex = 45;
            break;
        case 1327:
        case 17051:
            mParticleIndex = 46;
            break;
        case 1328:
        case 816:
            mParticleIndex = 47;
            break;
        case 1329:
            mParticleIndex = 50;
            break;
        case 1330:
        case 17060:
            mParticleIndex = 49;
            break;
        case 1331:
        case 17059:
            mParticleIndex = 48;
            break;
        case 17044:
            mParticleIndex = 25;
            break;
        case 17045:
            mParticleIndex = 28;
            break;
        case 17061:
            mParticleIndex = 50;
            break;
        default:
            Free();
            return;
        }
        GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
    }
}

void EFFECT_OBJECT::SetAbsorbEffect_5(AVATAR_OBJECT* tAVATAR)
{
    int v2;

    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aAnimalAbsorbState)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];
        
        if (tAVATAR->mDATA.aPreviousTribe == 0)
            mSObjectIndex = 9;
        else if (tAVATAR->mDATA.aPreviousTribe == 1)
            mSObjectIndex = 13;
        else if (tAVATAR->mDATA.aPreviousTribe == 2)
            mSObjectIndex = 11;

        switch (tAVATAR->mDATA.aAnimalNumber)
        {
        case 1301:
            mParticleIndex = 24;
            break;
        case 1302:
            mParticleIndex = 27;
            break;
        case 1303:
            mParticleIndex = 30;
            break;
        case 1304:
            mParticleIndex = 25;
            break;
        case 1305:
            mParticleIndex = 28;
            break;
        case 1306:
        case 17046:
            mParticleIndex = 31;
            break;
        case 1307:
        case 6500:
        case 6501:
        case 6502:
        case 6503:
        case 6504:
        case 6505:
        case 6506:
        case 6507:
        case 6508:
        case 6509:
        case 814:
            mParticleIndex = 26;
            break;
        case 1308:
        case 819:
            mParticleIndex = 29;
            break;
        case 1309:
        case 817:
            mParticleIndex = 32;
            break;
        case 1313:
            mParticleIndex = 33;
            break;
        case 1314:
        case 17047:
            mParticleIndex = 34;
            break;
        case 1315:
        case 820:
            mParticleIndex = 35;
            break;
        case 1317:
            mParticleIndex = 36;
            break;
        case 1318:
        case 17048:
            mParticleIndex = 37;
            break;
        case 1319:
        case 818:
            mParticleIndex = 38;
            break;
        case 1320:
            mParticleIndex = 42;
            break;
        case 1321:
        case 17049:
            mParticleIndex = 43;
            break;
        case 1322:
        case 17058:
        case 821:
            mParticleIndex = 44;
            break;
        case 1323:
            mParticleIndex = 39;
            break;
        case 1324:
        case 17050:
            mParticleIndex = 40;
            break;
        case 1325:
        case 815:
            mParticleIndex = 41;
            break;
        case 1326:
            mParticleIndex = 45;
            break;
        case 1327:
        case 17051:
            mParticleIndex = 46;
            break;
        case 1328:
        case 816:
            mParticleIndex = 47;
            break;
        case 1329:
            mParticleIndex = 50;
            break;
        case 1330:
        case 17060:
            mParticleIndex = 49;
            break;
        case 1331:
        case 17059:
            mParticleIndex = 48;
            break;
        case 17044:
            mParticleIndex = 25;
            break;
        case 17045:
            mParticleIndex = 28;
            break;
        case 17061:
            mParticleIndex = 50;
            break;
        default:
            Free();
            return;
        }
        GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
    }
}

void EFFECT_OBJECT::SetAbsorbEffect_6(AVATAR_OBJECT* tAVATAR)
{
    int v2;

    if (mGAMEOPTION.tParticleEffect && tAVATAR->mDATA.aVisibleState && tAVATAR->mDATA.aAnimalAbsorbState)
    {
        Free();
        mCheckValidState = 1;
        mEffectIndex = 11;
        mEffectState = 1;
        mUserIndex = tAVATAR->mIndex;
        mUniqueNumber = tAVATAR->mUniqueNumber;
        mSObjectForEffect = mGDATA.mWEAPON_3_EFFECT[tAVATAR->mDATA.aPreviousTribe][tAVATAR->mDATA.aGender];

        if (tAVATAR->mDATA.aPreviousTribe == 0)
            mSObjectIndex = 10;
        else if (tAVATAR->mDATA.aPreviousTribe == 1)
            mSObjectIndex = 14;
        else if (tAVATAR->mDATA.aPreviousTribe == 2)
            mSObjectIndex = 12;

        switch (tAVATAR->mDATA.aAnimalNumber)
        {
        case 1301:
            mParticleIndex = 24;
            break;
        case 1302:
            mParticleIndex = 27;
            break;
        case 1303:
            mParticleIndex = 30;
            break;
        case 1304:
            mParticleIndex = 25;
            break;
        case 1305:
            mParticleIndex = 28;
            break;
        case 1306:
        case 17046:
            mParticleIndex = 31;
            break;
        case 1307:
        case 6500:
        case 6501:
        case 6502:
        case 6503:
        case 6504:
        case 6505:
        case 6506:
        case 6507:
        case 6508:
        case 6509:
        case 814:
            mParticleIndex = 26;
            break;
        case 1308:
        case 819:
            mParticleIndex = 29;
            break;
        case 1309:
        case 817:
            mParticleIndex = 32;
            break;
        case 1313:
            mParticleIndex = 33;
            break;
        case 1314:
        case 17047:
            mParticleIndex = 34;
            break;
        case 1315:
        case 820:
            mParticleIndex = 35;
            break;
        case 1317:
            mParticleIndex = 36;
            break;
        case 1318:
        case 17048:
            mParticleIndex = 37;
            break;
        case 1319:
        case 818:
            mParticleIndex = 38;
            break;
        case 1320:
            mParticleIndex = 42;
            break;
        case 1321:
        case 17049:
            mParticleIndex = 43;
            break;
        case 1322:
        case 17058:
        case 821:
            mParticleIndex = 44;
            break;
        case 1323:
            mParticleIndex = 39;
            break;
        case 1324:
        case 17050:
            mParticleIndex = 40;
            break;
        case 1325:
        case 815:
            mParticleIndex = 41;
            break;
        case 1326:
            mParticleIndex = 45;
            break;
        case 1327:
        case 17051:
            mParticleIndex = 46;
            break;
        case 1328:
        case 816:
            mParticleIndex = 47;
            break;
        case 1329:
            mParticleIndex = 50;
            break;
        case 1330:
        case 17060:
            mParticleIndex = 49;
            break;
        case 1331:
        case 17059:
            mParticleIndex = 48;
            break;
        case 17044:
            mParticleIndex = 25;
            break;
        case 17045:
            mParticleIndex = 28;
            break;
        case 17061:
            mParticleIndex = 50;
            break;
        default:
            Free();
            return;
        }
        GPARTICLE::InitParticles(&mGDATA.mEFFECT[mParticleIndex], &mDATA);
    }
}




// Class of PROXY_OBJECT
void PROXY_OBJECT::Init()
{
    mCheckValidState = FALSE;
}
void PROXY_OBJECT::Free()
{
    mCheckValidState = FALSE;
}
void PROXY_OBJECT::Draw(int tDrawSort, float dTime)
{
    float pFrame; 
    int tDataIndex; 
    int tFrame; 
    float tA[3];

    if (mCheckValidState && tDrawSort >= 1 && tDrawSort <= 2)
    {
        tA[1] = 0.0;
        tA[2] = 0.0;
        tDataIndex = 0;
        tA[0] = 0.0;
        tA[1] = mFront;
        tA[2] = 0.0;
        // 2.5 MOBJECT
        /*switch (mMYINFO.mPresentZoneNumber)
        {
        case 1:
            tDataIndex = 0;
            break;
        case 6:
            tDataIndex = 1;
            break;
        case 11:
            tDataIndex = 2;
            break;
        case 140:
            tDataIndex = 3;
            break;
        }*/
        // 2.8 MOBJECT
        tDataIndex = 0;
        tFrame = GMOBJECT::GetTotalFrameNum(&mGDATA.mMODEL3[tDataIndex + 230]);
        if (tFrame > 0)
        {
            pFrame = (float)((int)(mAPP[0].hPresentElapsedSeconds * 30.0) % tFrame);
            GMOBJECT::DisplayMObject(&mGDATA.mMODEL3[tDataIndex + 230], tDrawSort, pFrame, mDATA.tShopLocation, tA, 0);
        }
    }
}
void PROXY_OBJECT::DrawInfo(float dTime)
{
    char Buffer[1000];
    float tL[3]; 

    if (mCheckValidState)
    {
        if (mUTIL.GetLengthXYZ(mDATA.tShopLocation, mPLAY.mAVATAR_OBJECT[0].mDATA.aAction.aLocation) <= 300.0)
        {
            sprintf(Buffer, "%s", mDATA.tShopName);
            tL[0] = mDATA.tShopLocation[0];
            tL[1] = mDATA.tShopLocation[1] + 12.0f;
            tL[2] = mDATA.tShopLocation[2];
            mUTIL.DrawFont3D(Buffer, tL, 7);
        }
    }
}
void PROXY_OBJECT::Update(float dTime)
{
}
BOOL PROXY_OBJECT::CheckProxyToCoordDistance(float tLocation[3])
{
    return mUTIL.GetLengthXYZ(mDATA.tShopLocation, tLocation) < 10.0;
}